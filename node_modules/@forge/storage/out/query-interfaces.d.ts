export declare type Value = string;
export interface StartsWith {
    condition: 'STARTS_WITH';
    value: Value;
}
export interface NotEqualTo {
    condition: 'NOT_EQUAL_TO';
    value: Value[];
}
export interface In {
    condition: 'IN';
    value: Value[];
}
interface FieldClause {
    field: string;
}
export declare type StartsWithClause = FieldClause & StartsWith;
export declare type NotEqualToClause = FieldClause & NotEqualTo;
export declare type InClause = FieldClause & In;
export declare type WhereClause = StartsWithClause | NotEqualToClause | InClause;
export interface ListOptions {
    where?: Array<WhereClause>;
    cursor?: string;
    limit?: number;
}
export declare type CustomEntityQueryValue = string | number | boolean;
export interface BetweenClause {
    condition: 'BETWEEN';
    values: CustomEntityQueryValue[];
}
export interface BeginsWithClause {
    condition: 'BEGINS_WITH';
    values: CustomEntityQueryValue[];
}
export interface ExistsClause {
    condition: 'EXISTS';
    values: CustomEntityQueryValue[];
}
export interface DoesNotExistClause {
    condition: 'NOT_EXISTS';
    values: CustomEntityQueryValue[];
}
export interface GreaterThanClause {
    condition: 'GREATER_THAN';
    values: CustomEntityQueryValue[];
}
export interface GreaterThanEqualToClause {
    condition: 'GREATER_THAN_EQUAL_TO';
    values: CustomEntityQueryValue[];
}
export interface LessThanClause {
    condition: 'LESS_THAN';
    values: CustomEntityQueryValue[];
}
export interface LessThanEqualToClause {
    condition: 'LESS_THAN_EQUAL_TO';
    values: CustomEntityQueryValue[];
}
export interface ContainsClause {
    condition: 'CONTAINS';
    values: CustomEntityQueryValue[];
}
export interface DoesNotContainClause {
    condition: 'NOT_CONTAINS';
    values: CustomEntityQueryValue[];
}
export interface EqualToClause {
    condition: 'EQUAL_TO';
    values: CustomEntityQueryValue[];
}
export interface IsNotEqualToClause {
    condition: 'NOT_EQUAL_TO';
    values: CustomEntityQueryValue[];
}
export declare type FilterOperator = 'or' | 'and';
export interface FilterPropertyClause {
    property: string;
}
export declare type BetweenFilterClause = FilterPropertyClause & BetweenClause;
export declare type BeginsWithFilterClause = FilterPropertyClause & BeginsWithClause;
export declare type ExistsFilterClause = FilterPropertyClause & ExistsClause;
export declare type DoesNotExistFilterClause = FilterPropertyClause & DoesNotExistClause;
export declare type GreaterThanFilterClause = FilterPropertyClause & GreaterThanClause;
export declare type GreaterThanEqualToFilterClause = FilterPropertyClause & GreaterThanEqualToClause;
export declare type LessThanFilterClause = FilterPropertyClause & LessThanClause;
export declare type LessThanEqualToFilterClause = FilterPropertyClause & LessThanEqualToClause;
export declare type ContainsFilterClause = FilterPropertyClause & ContainsClause;
export declare type DoesNotContainFilterClause = FilterPropertyClause & DoesNotContainClause;
export declare type EqualToFilterClause = FilterPropertyClause & EqualToClause;
export declare type IsNotEqualToFilterClause = FilterPropertyClause & IsNotEqualToClause;
export declare type RangeClause = BetweenClause | BeginsWithClause | EqualToClause | GreaterThanClause | GreaterThanEqualToClause | LessThanClause | LessThanEqualToClause;
export declare type FilterClause = BetweenFilterClause | BeginsWithFilterClause | ExistsFilterClause | DoesNotExistFilterClause | GreaterThanFilterClause | GreaterThanEqualToFilterClause | LessThanFilterClause | LessThanEqualToFilterClause | ContainsFilterClause | DoesNotContainFilterClause | EqualToFilterClause | IsNotEqualToFilterClause;
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CustomEntityQueryIndexOptions {
    partition: CustomEntityPartitionValue[];
}
export declare type CustomEntityPartitionValue = string | number | boolean;
export interface CustomEntityListOptions {
    sort?: SortOrder;
    entityName?: string;
    indexName?: string;
    partition?: CustomEntityPartitionValue[];
    range?: RangeClause;
    filters?: FilterClause[];
    filterOperator?: FilterOperator;
    cursor?: string;
    limit?: number;
}
export {};
//# sourceMappingURL=query-interfaces.d.ts.map