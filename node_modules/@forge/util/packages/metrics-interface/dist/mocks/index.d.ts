/// <reference types="jest" />
import { Counter, Gauge, Metrics, Set, Tags, Timing } from '../index';
export declare class MockCounter implements Counter {
    name: string;
    tags?: Tags | undefined;
    incr: jest.Mock<any, any, any>;
    decr: jest.Mock<any, any, any>;
    incrBy: jest.Mock<any, any, any>;
    decrBy: jest.Mock<any, any, any>;
    constructor(name: string, tags?: Tags | undefined);
}
export declare class MockGauge implements Gauge {
    name: string;
    tags?: Tags | undefined;
    set: jest.Mock<any, any, any>;
    constructor(name: string, tags?: Tags | undefined);
}
export declare class MockSet implements Set {
    name: string;
    tags?: Tags | undefined;
    add: jest.Mock<any, any, any>;
    constructor(name: string, tags?: Tags | undefined);
}
export declare class MockTiming implements Timing {
    name: string;
    tags?: Tags | undefined;
    buckets?: number[] | undefined;
    set: jest.Mock<any, any, any>;
    measure: jest.Mock<{
        stop: jest.Mock<any, any, any>;
    }, [], any>;
    constructor(name: string, tags?: Tags | undefined, buckets?: number[] | undefined);
}
export declare class MockMetrics implements Metrics {
    child: jest.Mock<MockMetrics, [], any>;
    counter: jest.Mock<MockCounter, [name: any, tags: any], any>;
    gauge: jest.Mock<MockGauge, [name: any, tags: any], any>;
    set: jest.Mock<MockSet, [name: any, tags: any], any>;
    timing: jest.Mock<MockTiming, [name: any, tags: any], any>;
    histogram: jest.Mock<MockTiming, [name: any, buckets: any, tags: any], any>;
    event: jest.Mock<any, any, any>;
}
//# sourceMappingURL=index.d.ts.map