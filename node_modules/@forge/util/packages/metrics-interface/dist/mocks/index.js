"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockMetrics = exports.MockTiming = exports.MockSet = exports.MockGauge = exports.MockCounter = void 0;
class MockCounter {
    constructor(name, tags) {
        this.name = name;
        this.tags = tags;
        this.incr = jest.fn();
        this.decr = jest.fn();
        this.incrBy = jest.fn();
        this.decrBy = jest.fn();
    }
}
exports.MockCounter = MockCounter;
class MockGauge {
    constructor(name, tags) {
        this.name = name;
        this.tags = tags;
        this.set = jest.fn();
    }
}
exports.MockGauge = MockGauge;
class MockSet {
    constructor(name, tags) {
        this.name = name;
        this.tags = tags;
        this.add = jest.fn();
    }
}
exports.MockSet = MockSet;
class MockTiming {
    constructor(name, tags, buckets) {
        this.name = name;
        this.tags = tags;
        this.buckets = buckets;
        this.set = jest.fn();
        this.measure = jest.fn(() => ({ stop: jest.fn() }));
    }
}
exports.MockTiming = MockTiming;
// Export a mock so any users of this library that use jest can use it.
class MockMetrics {
    constructor() {
        this.child = jest.fn(() => new MockMetrics());
        this.counter = jest.fn((name, tags) => new MockCounter(name, tags));
        this.gauge = jest.fn((name, tags) => new MockGauge(name, tags));
        this.set = jest.fn((name, tags) => new MockSet(name, tags));
        this.timing = jest.fn((name, tags) => new MockTiming(name, tags));
        this.histogram = jest.fn((name, buckets, tags) => new MockTiming(name, tags, buckets));
        this.event = jest.fn();
    }
}
exports.MockMetrics = MockMetrics;
//# sourceMappingURL=index.js.map