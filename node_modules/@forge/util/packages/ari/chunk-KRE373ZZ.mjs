import {
  EcosystemAppAriResourceOwner,
  EcosystemAppAriResourceType
} from "./chunk-ZSCWAZK4.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/ecosystem/app/manifest.ts
var ecosystemAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemAppAriResourceOwner,
  resourceType: EcosystemAppAriResourceType,
  resourceIdSlug: "{appId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/app/index.ts
var EcosystemAppAri = class _EcosystemAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId;
  }
  get appId() {
    return this._appId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemAppAriStaticOpts.qualifier,
      platformQualifier: ecosystemAppAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemAppAriStaticOpts.resourceOwner,
      resourceType: ecosystemAppAriStaticOpts.resourceType,
      resourceId: `${opts.appId}`,
      resourceIdSegmentValues: {
        appId: opts.appId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemAppAriStaticOpts);
    return new _EcosystemAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemAppAriStaticOpts);
    return new _EcosystemAppAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId
    };
  }
};

export {
  EcosystemAppAri
};
