import {
  JiraSoftwareColumnAriResourceOwner,
  JiraSoftwareColumnAriResourceType
} from "./chunk-P7LHCIIY.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira-software/column/manifest.ts
var jiraSoftwareColumnAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareColumnAriResourceOwner,
  resourceType: JiraSoftwareColumnAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{columnId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    columnId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/column/index.ts
var JiraSoftwareColumnAri = class _JiraSoftwareColumnAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._columnId = opts.resourceIdSegmentValues.columnId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get columnId() {
    return this._columnId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareColumnAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareColumnAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareColumnAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareColumnAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.columnId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        columnId: opts.columnId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareColumnAriStaticOpts);
    return new _JiraSoftwareColumnAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareColumnAriStaticOpts);
    return new _JiraSoftwareColumnAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      columnId: this.columnId
    };
  }
};

export {
  JiraSoftwareColumnAri
};
