import {
  OrgPolicyPolicyAriResourceOwner,
  OrgPolicyPolicyAriResourceType
} from "./chunk-3N5RUFAN.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/org-policy/policy/manifest.ts
var orgPolicyPolicyAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OrgPolicyPolicyAriResourceOwner,
  resourceType: OrgPolicyPolicyAriResourceType,
  resourceIdSlug: "{policyId}",
  resourceIdSegmentFormats: {
    policyId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/org-policy/policy/index.ts
var OrgPolicyPolicyAri = class _OrgPolicyPolicyAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._policyId = opts.resourceIdSegmentValues.policyId;
  }
  get policyId() {
    return this._policyId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: orgPolicyPolicyAriStaticOpts.qualifier,
      platformQualifier: orgPolicyPolicyAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: orgPolicyPolicyAriStaticOpts.resourceOwner,
      resourceType: orgPolicyPolicyAriStaticOpts.resourceType,
      resourceId: `${opts.policyId}`,
      resourceIdSegmentValues: {
        policyId: opts.policyId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, orgPolicyPolicyAriStaticOpts);
    return new _OrgPolicyPolicyAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, orgPolicyPolicyAriStaticOpts);
    return new _OrgPolicyPolicyAri(opts);
  }
  getVariables() {
    return {
      policyId: this.policyId
    };
  }
};

export {
  OrgPolicyPolicyAri
};
