"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// src/ecosystem/index.ts
var ecosystem_exports = {};
__export(ecosystem_exports, {
  EcosystemAppAri: () => EcosystemAppAri,
  EcosystemAppEnvironmentVersionAri: () => EcosystemAppEnvironmentVersionAri,
  EcosystemConnectAppAri: () => EcosystemConnectAppAri,
  EcosystemEnvironmentAri: () => EcosystemEnvironmentAri,
  EcosystemExtensionAri: () => EcosystemExtensionAri,
  EcosystemExtensionGroupAri: () => EcosystemExtensionGroupAri,
  EcosystemInstallationAri: () => EcosystemInstallationAri
});
module.exports = __toCommonJS(ecosystem_exports);

// src/errors.ts
var ValidationError = class extends Error {
};

// src/core/rules/cloud-id.ts
function validateCloudId(cloudId, format = new RegExp("^[a-zA-Z0-9\\-]*$")) {
  if (!cloudId.match(format))
    throw new ValidationError(`Invalid cloud ID, expected ID of format ${format}.`);
}

// src/core/rules/platform-qualifier.ts
function validatePlatformQualifier(qualifier) {
  if (qualifier !== "cloud" && qualifier !== "third-party")
    throw new ValidationError(`Identifier must have a qualifier of 'cloud' or 'third-party'. Received: ${qualifier}`);
}

// src/core/rules/qualifier.ts
function validateAtiQualifier(qualifier) {
  if (qualifier !== "ati")
    throw new ValidationError(`ATI must have a qualifier of 'ati'. Received: ${qualifier}`);
}
function validateAriQualifier(qualifier) {
  if (qualifier !== "ari")
    throw new ValidationError(`ARI must have a qualifier of 'ari'. Received: ${qualifier}`);
}

// src/core/rules/resource-id.ts
function validateResourceId(id, format = new RegExp("[!a-zA-Z0-9\\-_.~@:{}=]+(/[!a-zA-Z0-9\\-_.~@:{}=]+)*" /* ANY_RESOURCE_ID */), key = "resourceId") {
  let formatWithCarets = new RegExp(`^${format.source}$`);
  if (!id.match(formatWithCarets))
    throw new ValidationError(`Invalid ${key} - ${id}, expected ID of format ${formatWithCarets}.`);
}

// src/core/rules/resource-id-segments.ts
function validateResourceIdSegments(resourceIdSegmentValues, resourceIdSegmentFormats) {
  Object.entries(resourceIdSegmentValues).forEach(([resourceIdKey, resourceIdValue]) => {
    validateResourceId(resourceIdValue, resourceIdSegmentFormats == null ? void 0 : resourceIdSegmentFormats[resourceIdKey], resourceIdKey);
  });
}

// src/core/rules/resource-owner.ts
function validateResourceOwner(owner, expectedResourceOwner) {
  if (expectedResourceOwner && owner !== expectedResourceOwner)
    throw new ValidationError(`Invalid resource owner - ${owner}, expected ${expectedResourceOwner}.`);
}

// src/core/rules/resource-type.ts
function validateResourceType(type, expectedResourceType) {
  if (expectedResourceType && type !== expectedResourceType)
    throw new ValidationError(`Invalid resource type - ${type}, expected ${expectedResourceType}.`);
}

// src/core/parser/base.ts
var NUMBER_OF_BASE_SEGMENTS = 5, SEGMENT_SEPARATOR = ":", BaseParser = class {
  static getIdentifierSegments(inputStr, numberOfSegmentsRequired) {
    let allSegments = inputStr.split(SEGMENT_SEPARATOR);
    if (allSegments.length < numberOfSegmentsRequired)
      throw new ValidationError(`Input string must have ${numberOfSegmentsRequired} segments.`);
    if (allSegments.length > numberOfSegmentsRequired) {
      let segments = allSegments.slice(0, NUMBER_OF_BASE_SEGMENTS - 1), segmentsForResourceId = allSegments.slice(NUMBER_OF_BASE_SEGMENTS - 1, allSegments.length);
      return [...segments, segmentsForResourceId.join(SEGMENT_SEPARATOR)];
    }
    return allSegments;
  }
};

// src/core/parser/ari.ts
var NUMBER_OF_ARI_SEGMENTS = 5, AriParser = class extends BaseParser {
  static fromString(maybeAri, ariProperties) {
    let segments = this.getIdentifierSegments(maybeAri, NUMBER_OF_ARI_SEGMENTS), [qualifier, platformQualifier, resourceOwner, cloudId, resourceTypeAndId] = segments, [resourceType, ...resourceIdSegments] = resourceTypeAndId.split("/"), maybeAriDerivedProperties = {
      qualifier,
      platformQualifier,
      cloudId,
      resourceOwner,
      resourceType,
      resourceId: resourceIdSegments.join("/"),
      resourceIdSegmentValues: ariProperties != null && ariProperties.resourceIdSlug ? this.ariSegmentValuesFromSlug(
        ariProperties.resourceIdSlug,
        resourceIdSegments.join("/"),
        Object.keys(ariProperties.resourceIdSegmentFormats)
      ) : {}
    };
    return this.fromOpts(maybeAriDerivedProperties, ariProperties);
  }
  static fromOpts(maybeAriOpts, ariProperties) {
    let {
      qualifier = "ari",
      platformQualifier = "cloud",
      resourceOwner,
      cloudId,
      resourceId,
      resourceIdSegmentValues,
      resourceType
    } = maybeAriOpts;
    return validateAriQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateCloudId(maybeAriOpts.cloudId || "", ariProperties == null ? void 0 : ariProperties.cloudId), validateResourceOwner(resourceOwner, ariProperties == null ? void 0 : ariProperties.resourceOwner), validateResourceType(resourceType, ariProperties == null ? void 0 : ariProperties.resourceType), validateResourceIdSegments(resourceIdSegmentValues, ariProperties == null ? void 0 : ariProperties.resourceIdSegmentFormats), {
      qualifier,
      resourceOwner,
      resourceType,
      platformQualifier,
      cloudId,
      resourceId,
      resourceIdSegmentValues
    };
  }
  static ariSegmentValuesFromSlug(slug, incomingSegments, expectedKeys) {
    let regexpResult = new RegExp("^" + slug.replace(/\{(.*?)\}/g, "(?<$1>.*?)") + "$").exec(incomingSegments);
    if (!regexpResult)
      throw new ValidationError(`Segment '${incomingSegments}' don't match expected slug: ${slug}`);
    return expectedKeys.forEach((expectedKey) => {
      var _a;
      if (!((_a = regexpResult.groups) != null && _a[expectedKey]))
        throw new ValidationError(`No value supplied for '${expectedKey}' based on slug ${slug}`);
    }), regexpResult.groups || {};
  }
};

// src/core/parser/ati.ts
var NUMBER_OF_ATI_SEGMENTS = 4, AtiParser = class extends BaseParser {
  static fromString(inputStr, atiOpts) {
    let segments = this.getIdentifierSegments(inputStr, NUMBER_OF_ATI_SEGMENTS), [qualifier = "ati", platformQualifier = "cloud", resourceOwner, resourceType] = segments;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), { platformQualifier, resourceOwner, resourceType };
  }
  static fromOpts(maybeAtiOpts, atiOpts) {
    let { qualifier, platformQualifier, resourceOwner, resourceType } = maybeAtiOpts;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), {
      platformQualifier,
      resourceOwner,
      resourceType
    };
  }
};

// src/ati.ts
var Ati = class _Ati {
  constructor(platformQualifier, resourceOwner, resourceType) {
    this._platformQualifier = platformQualifier, this._resourceOwner = resourceOwner, this._resourceType = resourceType;
  }
  get platformQualifier() {
    return this._platformQualifier;
  }
  get resourceOwner() {
    return this._resourceOwner;
  }
  get resourceType() {
    return this._resourceType;
  }
  static create(opts) {
    return new _Ati(opts.platformQualifier || "cloud", opts.resourceOwner, opts.resourceType);
  }
  static parse(maybeAti, atiOpts) {
    let opts = AtiParser.fromString(maybeAti, atiOpts);
    return new _Ati(opts.platformQualifier, opts.resourceOwner, opts.resourceType);
  }
  toString() {
    return `ati:${this.platformQualifier}:${this.resourceOwner}:${this.resourceType}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this._platformQualifier,
      resourceOwner: this._resourceOwner,
      resourceType: this._resourceType
    };
  }
};

// src/core/ari.ts
var Ari = class {
  constructor(opts) {
    this._ati = Ati.create({
      platformQualifier: opts.platformQualifier || "cloud",
      resourceOwner: opts.resourceOwner,
      resourceType: opts.resourceType
    }), this._cloudId = opts.cloudId !== "" ? opts.cloudId : void 0, this._resourceId = opts.resourceId;
  }
  get platformQualifier() {
    return this._ati.platformQualifier;
  }
  get cloudId() {
    return this._cloudId;
  }
  get resourceOwner() {
    return this._ati.resourceOwner;
  }
  get resourceType() {
    return this._ati.resourceType;
  }
  get resourceId() {
    return this._resourceId;
  }
  get ati() {
    return this._ati;
  }
  equals(other) {
    return this.toString() === other.toString();
  }
  toString() {
    return `ari:${this.platformQualifier}:${this.resourceOwner}:${this.cloudId || ""}:${this.resourceType}/${this.resourceId}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this.platformQualifier,
      resourceOwner: this.resourceOwner,
      cloudId: this.cloudId,
      resourceType: this.resourceType,
      resourceId: this.resourceId
    };
  }
};

// src/any-ari.ts
var AnyAri = class _AnyAri extends Ari {
  constructor(opts) {
    super(opts);
  }
  static create(ariOpts, ariStaticOpts) {
    let ariOptsWithDefaults = { ...ariOpts, resourceIdSegmentValues: {} }, validatedOpts = AriParser.fromOpts(ariOptsWithDefaults, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static parse(maybeAri, ariStaticOpts) {
    let validatedOpts = AriParser.fromString(maybeAri, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static check(maybeAri) {
    try {
      return _AnyAri.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return this;
  }
};

// src/core/registered-ari.ts
var RegisteredAri = class extends Ari {
  static check(maybeAri) {
    try {
      return this.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return AnyAri.parse(this.toString());
  }
};

// src/ecosystem/app/types.ts
var EcosystemAppAriResourceOwner = "ecosystem", EcosystemAppAriResourceType = "app";

// src/ecosystem/app/manifest.ts
var ecosystemAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemAppAriResourceOwner,
  resourceType: EcosystemAppAriResourceType,
  resourceIdSlug: "{appId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/app/index.ts
var EcosystemAppAri = class _EcosystemAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId;
  }
  get appId() {
    return this._appId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemAppAriStaticOpts.qualifier,
      platformQualifier: ecosystemAppAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemAppAriStaticOpts.resourceOwner,
      resourceType: ecosystemAppAriStaticOpts.resourceType,
      resourceId: `${opts.appId}`,
      resourceIdSegmentValues: {
        appId: opts.appId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemAppAriStaticOpts);
    return new _EcosystemAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemAppAriStaticOpts);
    return new _EcosystemAppAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId
    };
  }
};

// src/ecosystem/app-environment-version/types.ts
var EcosystemAppEnvironmentVersionAriResourceOwner = "ecosystem", EcosystemAppEnvironmentVersionAriResourceType = "app-environment-version";

// src/ecosystem/app-environment-version/manifest.ts
var ecosystemAppEnvironmentVersionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemAppEnvironmentVersionAriResourceOwner,
  resourceType: EcosystemAppEnvironmentVersionAriResourceType,
  resourceIdSlug: "{appId}/{environmentId}/{versionId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    environmentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    versionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/app-environment-version/index.ts
var EcosystemAppEnvironmentVersionAri = class _EcosystemAppEnvironmentVersionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId, this._environmentId = opts.resourceIdSegmentValues.environmentId, this._versionId = opts.resourceIdSegmentValues.versionId;
  }
  get appId() {
    return this._appId;
  }
  get environmentId() {
    return this._environmentId;
  }
  get versionId() {
    return this._versionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemAppEnvironmentVersionAriStaticOpts.qualifier,
      platformQualifier: ecosystemAppEnvironmentVersionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemAppEnvironmentVersionAriStaticOpts.resourceOwner,
      resourceType: ecosystemAppEnvironmentVersionAriStaticOpts.resourceType,
      resourceId: `${opts.appId}/${opts.environmentId}/${opts.versionId}`,
      resourceIdSegmentValues: {
        appId: opts.appId,
        environmentId: opts.environmentId,
        versionId: opts.versionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemAppEnvironmentVersionAriStaticOpts);
    return new _EcosystemAppEnvironmentVersionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemAppEnvironmentVersionAriStaticOpts);
    return new _EcosystemAppEnvironmentVersionAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId,
      environmentId: this.environmentId,
      versionId: this.versionId
    };
  }
};

// src/ecosystem/connect-app/types.ts
var EcosystemConnectAppAriResourceOwner = "ecosystem", EcosystemConnectAppAriResourceType = "connect-app";

// src/ecosystem/connect-app/manifest.ts
var ecosystemConnectAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemConnectAppAriResourceOwner,
  resourceType: EcosystemConnectAppAriResourceType,
  resourceIdSlug: "{appKey}",
  resourceIdSegmentFormats: {
    appKey: /[a-zA-Z0-9-._]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/connect-app/index.ts
var EcosystemConnectAppAri = class _EcosystemConnectAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appKey = opts.resourceIdSegmentValues.appKey;
  }
  get appKey() {
    return this._appKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemConnectAppAriStaticOpts.qualifier,
      platformQualifier: ecosystemConnectAppAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemConnectAppAriStaticOpts.resourceOwner,
      resourceType: ecosystemConnectAppAriStaticOpts.resourceType,
      resourceId: `${opts.appKey}`,
      resourceIdSegmentValues: {
        appKey: opts.appKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemConnectAppAriStaticOpts);
    return new _EcosystemConnectAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemConnectAppAriStaticOpts);
    return new _EcosystemConnectAppAri(opts);
  }
  getVariables() {
    return {
      appKey: this.appKey
    };
  }
};

// src/ecosystem/environment/types.ts
var EcosystemEnvironmentAriResourceOwner = "ecosystem", EcosystemEnvironmentAriResourceType = "environment";

// src/ecosystem/environment/manifest.ts
var ecosystemEnvironmentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemEnvironmentAriResourceOwner,
  resourceType: EcosystemEnvironmentAriResourceType,
  resourceIdSlug: "{appId}/{environmentId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    environmentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/environment/index.ts
var EcosystemEnvironmentAri = class _EcosystemEnvironmentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId, this._environmentId = opts.resourceIdSegmentValues.environmentId;
  }
  get appId() {
    return this._appId;
  }
  get environmentId() {
    return this._environmentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemEnvironmentAriStaticOpts.qualifier,
      platformQualifier: ecosystemEnvironmentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemEnvironmentAriStaticOpts.resourceOwner,
      resourceType: ecosystemEnvironmentAriStaticOpts.resourceType,
      resourceId: `${opts.appId}/${opts.environmentId}`,
      resourceIdSegmentValues: {
        appId: opts.appId,
        environmentId: opts.environmentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemEnvironmentAriStaticOpts);
    return new _EcosystemEnvironmentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemEnvironmentAriStaticOpts);
    return new _EcosystemEnvironmentAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId,
      environmentId: this.environmentId
    };
  }
};

// src/ecosystem/extension/types.ts
var EcosystemExtensionAriResourceOwner = "ecosystem", EcosystemExtensionAriResourceType = "extension";

// src/ecosystem/extension/manifest.ts
var ecosystemExtensionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemExtensionAriResourceOwner,
  resourceType: EcosystemExtensionAriResourceType,
  resourceIdSlug: "{appId}/{environmentId}/{groupId}/{extensionKey}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    environmentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    groupId: /([0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}|static)/,
    // eslint-disable-line no-useless-escape
    extensionKey: /[a-zA-Z0-9-._]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/extension/index.ts
var EcosystemExtensionAri = class _EcosystemExtensionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId, this._environmentId = opts.resourceIdSegmentValues.environmentId, this._groupId = opts.resourceIdSegmentValues.groupId, this._extensionKey = opts.resourceIdSegmentValues.extensionKey;
  }
  get appId() {
    return this._appId;
  }
  get environmentId() {
    return this._environmentId;
  }
  get groupId() {
    return this._groupId;
  }
  get extensionKey() {
    return this._extensionKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemExtensionAriStaticOpts.qualifier,
      platformQualifier: ecosystemExtensionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemExtensionAriStaticOpts.resourceOwner,
      resourceType: ecosystemExtensionAriStaticOpts.resourceType,
      resourceId: `${opts.appId}/${opts.environmentId}/${opts.groupId}/${opts.extensionKey}`,
      resourceIdSegmentValues: {
        appId: opts.appId,
        environmentId: opts.environmentId,
        groupId: opts.groupId,
        extensionKey: opts.extensionKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemExtensionAriStaticOpts);
    return new _EcosystemExtensionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemExtensionAriStaticOpts);
    return new _EcosystemExtensionAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId,
      environmentId: this.environmentId,
      groupId: this.groupId,
      extensionKey: this.extensionKey
    };
  }
};

// src/ecosystem/extension-group/types.ts
var EcosystemExtensionGroupAriResourceOwner = "ecosystem", EcosystemExtensionGroupAriResourceType = "extension-group";

// src/ecosystem/extension-group/manifest.ts
var ecosystemExtensionGroupAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemExtensionGroupAriResourceOwner,
  resourceType: EcosystemExtensionGroupAriResourceType,
  resourceIdSlug: "{appId}/{environmentId}/{groupId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    environmentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    groupId: /([0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}|static)/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/extension-group/index.ts
var EcosystemExtensionGroupAri = class _EcosystemExtensionGroupAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId, this._environmentId = opts.resourceIdSegmentValues.environmentId, this._groupId = opts.resourceIdSegmentValues.groupId;
  }
  get appId() {
    return this._appId;
  }
  get environmentId() {
    return this._environmentId;
  }
  get groupId() {
    return this._groupId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemExtensionGroupAriStaticOpts.qualifier,
      platformQualifier: ecosystemExtensionGroupAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemExtensionGroupAriStaticOpts.resourceOwner,
      resourceType: ecosystemExtensionGroupAriStaticOpts.resourceType,
      resourceId: `${opts.appId}/${opts.environmentId}/${opts.groupId}`,
      resourceIdSegmentValues: {
        appId: opts.appId,
        environmentId: opts.environmentId,
        groupId: opts.groupId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemExtensionGroupAriStaticOpts);
    return new _EcosystemExtensionGroupAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemExtensionGroupAriStaticOpts);
    return new _EcosystemExtensionGroupAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId,
      environmentId: this.environmentId,
      groupId: this.groupId
    };
  }
};

// src/ecosystem/installation/types.ts
var EcosystemInstallationAriResourceOwner = "ecosystem", EcosystemInstallationAriResourceType = "installation";

// src/ecosystem/installation/manifest.ts
var ecosystemInstallationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemInstallationAriResourceOwner,
  resourceType: EcosystemInstallationAriResourceType,
  resourceIdSlug: "{installationId}",
  resourceIdSegmentFormats: {
    installationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/installation/index.ts
var EcosystemInstallationAri = class _EcosystemInstallationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._installationId = opts.resourceIdSegmentValues.installationId;
  }
  get installationId() {
    return this._installationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemInstallationAriStaticOpts.qualifier,
      platformQualifier: ecosystemInstallationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemInstallationAriStaticOpts.resourceOwner,
      resourceType: ecosystemInstallationAriStaticOpts.resourceType,
      resourceId: `${opts.installationId}`,
      resourceIdSegmentValues: {
        installationId: opts.installationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemInstallationAriStaticOpts);
    return new _EcosystemInstallationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemInstallationAriStaticOpts);
    return new _EcosystemInstallationAri(opts);
  }
  getVariables() {
    return {
      installationId: this.installationId
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EcosystemAppAri,
  EcosystemAppEnvironmentVersionAri,
  EcosystemConnectAppAri,
  EcosystemEnvironmentAri,
  EcosystemExtensionAri,
  EcosystemExtensionGroupAri,
  EcosystemInstallationAri
});
