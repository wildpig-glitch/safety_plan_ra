import {
  MapiRoleAriResourceOwner,
  MapiRoleAriResourceType
} from "./chunk-KZ5P3G67.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/mapi/role/manifest.ts
var mapiRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MapiRoleAriResourceOwner,
  resourceType: MapiRoleAriResourceType,
  resourceIdSlug: "scope/{roleTypeId}",
  resourceIdSegmentFormats: {
    roleTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/mapi/role/index.ts
var MapiRoleAri = class _MapiRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleTypeId = opts.resourceIdSegmentValues.roleTypeId;
  }
  get roleTypeId() {
    return this._roleTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mapiRoleAriStaticOpts.qualifier,
      platformQualifier: mapiRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: mapiRoleAriStaticOpts.resourceOwner,
      resourceType: mapiRoleAriStaticOpts.resourceType,
      resourceId: `scope/${opts.roleTypeId}`,
      resourceIdSegmentValues: {
        roleTypeId: opts.roleTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mapiRoleAriStaticOpts);
    return new _MapiRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mapiRoleAriStaticOpts);
    return new _MapiRoleAri(opts);
  }
  getVariables() {
    return {
      roleTypeId: this.roleTypeId
    };
  }
};

export {
  MapiRoleAri
};
