import {
  IdentityGroupAriResourceOwner,
  IdentityGroupAriResourceType
} from "./chunk-IZPJNHZU.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/identity/group/manifest.ts
var identityGroupAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityGroupAriResourceOwner,
  resourceType: IdentityGroupAriResourceType,
  resourceIdSlug: "{groupId}",
  resourceIdSegmentFormats: {
    groupId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/group/index.ts
var IdentityGroupAri = class _IdentityGroupAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._groupId = opts.resourceIdSegmentValues.groupId;
  }
  get groupId() {
    return this._groupId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityGroupAriStaticOpts.qualifier,
      platformQualifier: identityGroupAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityGroupAriStaticOpts.resourceOwner,
      resourceType: identityGroupAriStaticOpts.resourceType,
      resourceId: `${opts.groupId}`,
      resourceIdSegmentValues: {
        groupId: opts.groupId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityGroupAriStaticOpts);
    return new _IdentityGroupAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityGroupAriStaticOpts);
    return new _IdentityGroupAri(opts);
  }
  getVariables() {
    return {
      groupId: this.groupId
    };
  }
};

export {
  IdentityGroupAri
};
