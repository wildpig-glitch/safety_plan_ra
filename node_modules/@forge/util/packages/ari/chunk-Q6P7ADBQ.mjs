import {
  CmdbSchemaAriResourceOwner,
  CmdbSchemaAriResourceType
} from "./chunk-7NF55AHC.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/cmdb/schema/manifest.ts
var cmdbSchemaAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbSchemaAriResourceOwner,
  resourceType: CmdbSchemaAriResourceType,
  resourceIdSlug: "{workspaceId}/{schemaId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    schemaId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/schema/index.ts
var CmdbSchemaAri = class _CmdbSchemaAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._schemaId = opts.resourceIdSegmentValues.schemaId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get schemaId() {
    return this._schemaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbSchemaAriStaticOpts.qualifier,
      platformQualifier: cmdbSchemaAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbSchemaAriStaticOpts.resourceOwner,
      resourceType: cmdbSchemaAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.schemaId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        schemaId: opts.schemaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbSchemaAriStaticOpts);
    return new _CmdbSchemaAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbSchemaAriStaticOpts);
    return new _CmdbSchemaAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      schemaId: this.schemaId
    };
  }
};

export {
  CmdbSchemaAri
};
