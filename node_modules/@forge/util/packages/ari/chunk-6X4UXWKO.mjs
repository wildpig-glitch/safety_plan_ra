import {
  ConfluenceEventAriResourceOwner,
  ConfluenceEventAriResourceType
} from "./chunk-GWVYXALY.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/confluence/event/manifest.ts
var confluenceEventAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceEventAriResourceOwner,
  resourceType: ConfluenceEventAriResourceType,
  resourceIdSlug: "{eventType}/activation/{activationId}/event/{eventId}",
  resourceIdSegmentFormats: {
    eventType: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    eventId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/event/index.ts
var ConfluenceEventAri = class _ConfluenceEventAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._eventType = opts.resourceIdSegmentValues.eventType, this._activationId = opts.resourceIdSegmentValues.activationId, this._eventId = opts.resourceIdSegmentValues.eventId;
  }
  get siteId() {
    return this._siteId;
  }
  get eventType() {
    return this._eventType;
  }
  get activationId() {
    return this._activationId;
  }
  get eventId() {
    return this._eventId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceEventAriStaticOpts.qualifier,
      platformQualifier: confluenceEventAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceEventAriStaticOpts.resourceOwner,
      resourceType: confluenceEventAriStaticOpts.resourceType,
      resourceId: `${opts.eventType}/activation/${opts.activationId}/event/${opts.eventId}`,
      resourceIdSegmentValues: {
        eventType: opts.eventType,
        activationId: opts.activationId,
        eventId: opts.eventId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceEventAriStaticOpts);
    return new _ConfluenceEventAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceEventAriStaticOpts);
    return new _ConfluenceEventAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      eventType: this.eventType,
      activationId: this.activationId,
      eventId: this.eventId
    };
  }
};

export {
  ConfluenceEventAri
};
