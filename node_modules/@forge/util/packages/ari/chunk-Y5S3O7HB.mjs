import {
  VirtualAgentFlowEditorAriResourceOwner,
  VirtualAgentFlowEditorAriResourceType
} from "./chunk-ETXO2665.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/virtual-agent/flow-editor/manifest.ts
var virtualAgentFlowEditorAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentFlowEditorAriResourceOwner,
  resourceType: VirtualAgentFlowEditorAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{flowEditorId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    flowEditorId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/flow-editor/index.ts
var VirtualAgentFlowEditorAri = class _VirtualAgentFlowEditorAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._flowEditorId = opts.resourceIdSegmentValues.flowEditorId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get flowEditorId() {
    return this._flowEditorId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentFlowEditorAriStaticOpts.qualifier,
      platformQualifier: virtualAgentFlowEditorAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentFlowEditorAriStaticOpts.resourceOwner,
      resourceType: virtualAgentFlowEditorAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.flowEditorId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        flowEditorId: opts.flowEditorId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentFlowEditorAriStaticOpts);
    return new _VirtualAgentFlowEditorAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentFlowEditorAriStaticOpts);
    return new _VirtualAgentFlowEditorAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      flowEditorId: this.flowEditorId
    };
  }
};

export {
  VirtualAgentFlowEditorAri
};
