import {
  DevopsRelationshipAriResourceOwner,
  DevopsRelationshipAriResourceType
} from "./chunk-PPXOGRS2.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/devops/relationship/manifest.ts
var devopsRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: DevopsRelationshipAriResourceOwner,
  resourceType: DevopsRelationshipAriResourceType,
  resourceIdSlug: "{relationshipId}",
  resourceIdSegmentFormats: {
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/devops/relationship/index.ts
var DevopsRelationshipAri = class _DevopsRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: devopsRelationshipAriStaticOpts.qualifier,
      platformQualifier: devopsRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: devopsRelationshipAriStaticOpts.resourceOwner,
      resourceType: devopsRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.relationshipId}`,
      resourceIdSegmentValues: {
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, devopsRelationshipAriStaticOpts);
    return new _DevopsRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, devopsRelationshipAriStaticOpts);
    return new _DevopsRelationshipAri(opts);
  }
  getVariables() {
    return {
      relationshipId: this.relationshipId
    };
  }
};

export {
  DevopsRelationshipAri
};
