import {
  TrelloCardAriResourceOwner,
  TrelloCardAriResourceType
} from "./chunk-L5R7QT5M.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/trello/card/manifest.ts
var trelloCardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloCardAriResourceOwner,
  resourceType: TrelloCardAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{cardId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    cardId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/card/index.ts
var TrelloCardAri = class _TrelloCardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._cardId = opts.resourceIdSegmentValues.cardId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get cardId() {
    return this._cardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloCardAriStaticOpts.qualifier,
      platformQualifier: trelloCardAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloCardAriStaticOpts.resourceOwner,
      resourceType: trelloCardAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.cardId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        cardId: opts.cardId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloCardAriStaticOpts);
    return new _TrelloCardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloCardAriStaticOpts);
    return new _TrelloCardAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      cardId: this.cardId
    };
  }
};

export {
  TrelloCardAri
};
