import {
  JiraPlanCrossProjectVersionAriResourceOwner,
  JiraPlanCrossProjectVersionAriResourceType
} from "./chunk-KZ7YADXR.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/plan-cross-project-version/manifest.ts
var jiraPlanCrossProjectVersionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPlanCrossProjectVersionAriResourceOwner,
  resourceType: JiraPlanCrossProjectVersionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{crossProjectVersionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    crossProjectVersionId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/plan-cross-project-version/index.ts
var JiraPlanCrossProjectVersionAri = class _JiraPlanCrossProjectVersionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._crossProjectVersionId = opts.resourceIdSegmentValues.crossProjectVersionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get crossProjectVersionId() {
    return this._crossProjectVersionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPlanCrossProjectVersionAriStaticOpts.qualifier,
      platformQualifier: jiraPlanCrossProjectVersionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPlanCrossProjectVersionAriStaticOpts.resourceOwner,
      resourceType: jiraPlanCrossProjectVersionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.crossProjectVersionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        crossProjectVersionId: opts.crossProjectVersionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPlanCrossProjectVersionAriStaticOpts);
    return new _JiraPlanCrossProjectVersionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPlanCrossProjectVersionAriStaticOpts);
    return new _JiraPlanCrossProjectVersionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      crossProjectVersionId: this.crossProjectVersionId
    };
  }
};

export {
  JiraPlanCrossProjectVersionAri
};
