import {
  ConversationalHelpConversationMessageAriResourceOwner,
  ConversationalHelpConversationMessageAriResourceType
} from "./chunk-W6PEKGFC.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/conversational-help/conversation-message/manifest.ts
var conversationalHelpConversationMessageAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConversationalHelpConversationMessageAriResourceOwner,
  resourceType: ConversationalHelpConversationMessageAriResourceType,
  resourceIdSlug: "{conversationMessageId}",
  resourceIdSegmentFormats: {
    conversationMessageId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/conversational-help/conversation-message/index.ts
var ConversationalHelpConversationMessageAri = class _ConversationalHelpConversationMessageAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._conversationMessageId = opts.resourceIdSegmentValues.conversationMessageId;
  }
  get siteId() {
    return this._siteId;
  }
  get conversationMessageId() {
    return this._conversationMessageId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: conversationalHelpConversationMessageAriStaticOpts.qualifier,
      platformQualifier: conversationalHelpConversationMessageAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: conversationalHelpConversationMessageAriStaticOpts.resourceOwner,
      resourceType: conversationalHelpConversationMessageAriStaticOpts.resourceType,
      resourceId: `${opts.conversationMessageId}`,
      resourceIdSegmentValues: {
        conversationMessageId: opts.conversationMessageId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, conversationalHelpConversationMessageAriStaticOpts);
    return new _ConversationalHelpConversationMessageAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, conversationalHelpConversationMessageAriStaticOpts);
    return new _ConversationalHelpConversationMessageAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      conversationMessageId: this.conversationMessageId
    };
  }
};

export {
  ConversationalHelpConversationMessageAri
};
