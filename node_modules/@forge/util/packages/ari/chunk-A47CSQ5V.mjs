import {
  BitbucketPullrequestAriResourceOwner,
  BitbucketPullrequestAriResourceType
} from "./chunk-7V62G36F.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/bitbucket/pullrequest/manifest.ts
var bitbucketPullrequestAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketPullrequestAriResourceOwner,
  resourceType: BitbucketPullrequestAriResourceType,
  resourceIdSlug: "{pullRequestId}",
  resourceIdSegmentFormats: {
    pullRequestId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/pullrequest/index.ts
var BitbucketPullrequestAri = class _BitbucketPullrequestAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._pullRequestId = opts.resourceIdSegmentValues.pullRequestId;
  }
  get pullRequestId() {
    return this._pullRequestId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketPullrequestAriStaticOpts.qualifier,
      platformQualifier: bitbucketPullrequestAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketPullrequestAriStaticOpts.resourceOwner,
      resourceType: bitbucketPullrequestAriStaticOpts.resourceType,
      resourceId: `${opts.pullRequestId}`,
      resourceIdSegmentValues: {
        pullRequestId: opts.pullRequestId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketPullrequestAriStaticOpts);
    return new _BitbucketPullrequestAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketPullrequestAriStaticOpts);
    return new _BitbucketPullrequestAri(opts);
  }
  getVariables() {
    return {
      pullRequestId: this.pullRequestId
    };
  }
};

export {
  BitbucketPullrequestAri
};
