import {
  JiraNotificationTypeSchemeAriResourceOwner,
  JiraNotificationTypeSchemeAriResourceType
} from "./chunk-45SACCRI.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/notification-type-scheme/manifest.ts
var jiraNotificationTypeSchemeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraNotificationTypeSchemeAriResourceOwner,
  resourceType: JiraNotificationTypeSchemeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{notificationTypeSchemeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    notificationTypeSchemeId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/notification-type-scheme/index.ts
var JiraNotificationTypeSchemeAri = class _JiraNotificationTypeSchemeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._notificationTypeSchemeId = opts.resourceIdSegmentValues.notificationTypeSchemeId;
  }
  get activationId() {
    return this._activationId;
  }
  get notificationTypeSchemeId() {
    return this._notificationTypeSchemeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraNotificationTypeSchemeAriStaticOpts.qualifier,
      platformQualifier: jiraNotificationTypeSchemeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraNotificationTypeSchemeAriStaticOpts.resourceOwner,
      resourceType: jiraNotificationTypeSchemeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.notificationTypeSchemeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        notificationTypeSchemeId: opts.notificationTypeSchemeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraNotificationTypeSchemeAriStaticOpts);
    return new _JiraNotificationTypeSchemeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraNotificationTypeSchemeAriStaticOpts);
    return new _JiraNotificationTypeSchemeAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      notificationTypeSchemeId: this.notificationTypeSchemeId
    };
  }
};

export {
  JiraNotificationTypeSchemeAri
};
