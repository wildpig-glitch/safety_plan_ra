import {
  JiraSoftwareCardLayoutAriResourceOwner,
  JiraSoftwareCardLayoutAriResourceType
} from "./chunk-QSH6F5SY.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira-software/card-layout/manifest.ts
var jiraSoftwareCardLayoutAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareCardLayoutAriResourceOwner,
  resourceType: JiraSoftwareCardLayoutAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{cardLayoutId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    cardLayoutId: /[a-zA-Z0-9_]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/card-layout/index.ts
var JiraSoftwareCardLayoutAri = class _JiraSoftwareCardLayoutAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._cardLayoutId = opts.resourceIdSegmentValues.cardLayoutId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get cardLayoutId() {
    return this._cardLayoutId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareCardLayoutAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareCardLayoutAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareCardLayoutAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareCardLayoutAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.cardLayoutId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        cardLayoutId: opts.cardLayoutId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareCardLayoutAriStaticOpts);
    return new _JiraSoftwareCardLayoutAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareCardLayoutAriStaticOpts);
    return new _JiraSoftwareCardLayoutAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      cardLayoutId: this.cardLayoutId
    };
  }
};

export {
  JiraSoftwareCardLayoutAri
};
