import {
  TrelloRoleAriResourceOwner,
  TrelloRoleAriResourceType
} from "./chunk-I5GECIAC.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/trello/role/manifest.ts
var trelloRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloRoleAriResourceOwner,
  resourceType: TrelloRoleAriResourceType,
  resourceIdSlug: "{roleGroup}/{roleType}",
  resourceIdSegmentFormats: {
    roleGroup: /(?:workspace|enterprise|product)/,
    // eslint-disable-line no-useless-escape
    roleType: /(?:member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/role/index.ts
var TrelloRoleAri = class _TrelloRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleGroup = opts.resourceIdSegmentValues.roleGroup, this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleGroup() {
    return this._roleGroup;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloRoleAriStaticOpts.qualifier,
      platformQualifier: trelloRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloRoleAriStaticOpts.resourceOwner,
      resourceType: trelloRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleGroup}/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleGroup: opts.roleGroup,
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloRoleAriStaticOpts);
    return new _TrelloRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloRoleAriStaticOpts);
    return new _TrelloRoleAri(opts);
  }
  getVariables() {
    return {
      roleGroup: this.roleGroup,
      roleType: this.roleType
    };
  }
};

export {
  TrelloRoleAri
};
