import {
  OpsgenieScheduleAriResourceOwner,
  OpsgenieScheduleAriResourceType
} from "./chunk-OFBJZXGI.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/opsgenie/schedule/manifest.ts
var opsgenieScheduleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieScheduleAriResourceOwner,
  resourceType: OpsgenieScheduleAriResourceType,
  resourceIdSlug: "{workspaceId}/{scheduleId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    scheduleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/schedule/index.ts
var OpsgenieScheduleAri = class _OpsgenieScheduleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._scheduleId = opts.resourceIdSegmentValues.scheduleId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get scheduleId() {
    return this._scheduleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieScheduleAriStaticOpts.qualifier,
      platformQualifier: opsgenieScheduleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieScheduleAriStaticOpts.resourceOwner,
      resourceType: opsgenieScheduleAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.scheduleId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        scheduleId: opts.scheduleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieScheduleAriStaticOpts);
    return new _OpsgenieScheduleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieScheduleAriStaticOpts);
    return new _OpsgenieScheduleAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      scheduleId: this.scheduleId
    };
  }
};

export {
  OpsgenieScheduleAri
};
