import {
  MicrosoftChannelAriResourceOwner,
  MicrosoftChannelAriResourceType
} from "./chunk-2VMP2TVB.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/microsoft/channel/manifest.ts
var microsoftChannelAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: MicrosoftChannelAriResourceOwner,
  resourceType: MicrosoftChannelAriResourceType,
  resourceIdSlug: "tenantId/{tenantId}/teamId/{teamId}/channelId/{channelId}",
  resourceIdSegmentFormats: {
    tenantId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    teamId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    channelId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/microsoft/channel/index.ts
var MicrosoftChannelAri = class _MicrosoftChannelAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._tenantId = opts.resourceIdSegmentValues.tenantId, this._teamId = opts.resourceIdSegmentValues.teamId, this._channelId = opts.resourceIdSegmentValues.channelId;
  }
  get tenantId() {
    return this._tenantId;
  }
  get teamId() {
    return this._teamId;
  }
  get channelId() {
    return this._channelId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: microsoftChannelAriStaticOpts.qualifier,
      platformQualifier: microsoftChannelAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: microsoftChannelAriStaticOpts.resourceOwner,
      resourceType: microsoftChannelAriStaticOpts.resourceType,
      resourceId: `tenantId/${opts.tenantId}/teamId/${opts.teamId}/channelId/${opts.channelId}`,
      resourceIdSegmentValues: {
        tenantId: opts.tenantId,
        teamId: opts.teamId,
        channelId: opts.channelId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, microsoftChannelAriStaticOpts);
    return new _MicrosoftChannelAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, microsoftChannelAriStaticOpts);
    return new _MicrosoftChannelAri(opts);
  }
  getVariables() {
    return {
      tenantId: this.tenantId,
      teamId: this.teamId,
      channelId: this.channelId
    };
  }
};

export {
  MicrosoftChannelAri
};
