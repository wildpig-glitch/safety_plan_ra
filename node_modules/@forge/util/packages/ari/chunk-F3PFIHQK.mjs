import {
  JiraSoftwareBoardIssueListAriResourceOwner,
  JiraSoftwareBoardIssueListAriResourceType
} from "./chunk-3Z6ZDJ2A.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira-software/board-issue-list/manifest.ts
var jiraSoftwareBoardIssueListAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareBoardIssueListAriResourceOwner,
  resourceType: JiraSoftwareBoardIssueListAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{issueListId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    issueListId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/board-issue-list/index.ts
var JiraSoftwareBoardIssueListAri = class _JiraSoftwareBoardIssueListAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._issueListId = opts.resourceIdSegmentValues.issueListId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get issueListId() {
    return this._issueListId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareBoardIssueListAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareBoardIssueListAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareBoardIssueListAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareBoardIssueListAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.issueListId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        issueListId: opts.issueListId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareBoardIssueListAriStaticOpts);
    return new _JiraSoftwareBoardIssueListAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareBoardIssueListAriStaticOpts);
    return new _JiraSoftwareBoardIssueListAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      issueListId: this.issueListId
    };
  }
};

export {
  JiraSoftwareBoardIssueListAri
};
