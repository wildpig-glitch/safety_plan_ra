import {
  EcosystemEnvironmentAriResourceOwner,
  EcosystemEnvironmentAriResourceType
} from "./chunk-UJZYZKMO.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/ecosystem/environment/manifest.ts
var ecosystemEnvironmentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemEnvironmentAriResourceOwner,
  resourceType: EcosystemEnvironmentAriResourceType,
  resourceIdSlug: "{appId}/{environmentId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    environmentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/environment/index.ts
var EcosystemEnvironmentAri = class _EcosystemEnvironmentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId, this._environmentId = opts.resourceIdSegmentValues.environmentId;
  }
  get appId() {
    return this._appId;
  }
  get environmentId() {
    return this._environmentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemEnvironmentAriStaticOpts.qualifier,
      platformQualifier: ecosystemEnvironmentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemEnvironmentAriStaticOpts.resourceOwner,
      resourceType: ecosystemEnvironmentAriStaticOpts.resourceType,
      resourceId: `${opts.appId}/${opts.environmentId}`,
      resourceIdSegmentValues: {
        appId: opts.appId,
        environmentId: opts.environmentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemEnvironmentAriStaticOpts);
    return new _EcosystemEnvironmentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemEnvironmentAriStaticOpts);
    return new _EcosystemEnvironmentAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId,
      environmentId: this.environmentId
    };
  }
};

export {
  EcosystemEnvironmentAri
};
