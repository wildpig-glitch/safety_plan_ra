import {
  BeaconCustomDetectionAriResourceOwner,
  BeaconCustomDetectionAriResourceType
} from "./chunk-6YGOGAWM.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/beacon/custom-detection/manifest.ts
var beaconCustomDetectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: BeaconCustomDetectionAriResourceOwner,
  resourceType: BeaconCustomDetectionAriResourceType,
  resourceIdSlug: "{workspaceId}/{customDetectionId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    customDetectionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/custom-detection/index.ts
var BeaconCustomDetectionAri = class _BeaconCustomDetectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._customDetectionId = opts.resourceIdSegmentValues.customDetectionId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get customDetectionId() {
    return this._customDetectionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconCustomDetectionAriStaticOpts.qualifier,
      platformQualifier: beaconCustomDetectionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: beaconCustomDetectionAriStaticOpts.resourceOwner,
      resourceType: beaconCustomDetectionAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.customDetectionId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        customDetectionId: opts.customDetectionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconCustomDetectionAriStaticOpts);
    return new _BeaconCustomDetectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconCustomDetectionAriStaticOpts);
    return new _BeaconCustomDetectionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      customDetectionId: this.customDetectionId
    };
  }
};

export {
  BeaconCustomDetectionAri
};
