import {
  JiraServicedeskOrganizationAriResourceOwner,
  JiraServicedeskOrganizationAriResourceType
} from "./chunk-FYLFP7EF.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira-servicedesk/organization/manifest.ts
var jiraServicedeskOrganizationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskOrganizationAriResourceOwner,
  resourceType: JiraServicedeskOrganizationAriResourceType,
  resourceIdSlug: "activation/{activationId}/{organizationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    organizationId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/organization/index.ts
var JiraServicedeskOrganizationAri = class _JiraServicedeskOrganizationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._organizationId = opts.resourceIdSegmentValues.organizationId;
  }
  get activationId() {
    return this._activationId;
  }
  get organizationId() {
    return this._organizationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskOrganizationAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskOrganizationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskOrganizationAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskOrganizationAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.organizationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        organizationId: opts.organizationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskOrganizationAriStaticOpts);
    return new _JiraServicedeskOrganizationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskOrganizationAriStaticOpts);
    return new _JiraServicedeskOrganizationAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      organizationId: this.organizationId
    };
  }
};

export {
  JiraServicedeskOrganizationAri
};
