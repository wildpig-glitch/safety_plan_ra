import {
  PlatformLifecycleResourcePackageTypeAriResourceOwner,
  PlatformLifecycleResourcePackageTypeAriResourceType
} from "./chunk-YUROJJWW.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/platform/lifecycle-resource-package-type/manifest.ts
var platformLifecycleResourcePackageTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformLifecycleResourcePackageTypeAriResourceOwner,
  resourceType: PlatformLifecycleResourcePackageTypeAriResourceType,
  resourceIdSlug: "{resourcePackageTypeId}",
  resourceIdSegmentFormats: {
    resourcePackageTypeId: /[a-zA-Z.\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/lifecycle-resource-package-type/index.ts
var PlatformLifecycleResourcePackageTypeAri = class _PlatformLifecycleResourcePackageTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._resourcePackageTypeId = opts.resourceIdSegmentValues.resourcePackageTypeId;
  }
  get resourcePackageTypeId() {
    return this._resourcePackageTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformLifecycleResourcePackageTypeAriStaticOpts.qualifier,
      platformQualifier: platformLifecycleResourcePackageTypeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformLifecycleResourcePackageTypeAriStaticOpts.resourceOwner,
      resourceType: platformLifecycleResourcePackageTypeAriStaticOpts.resourceType,
      resourceId: `${opts.resourcePackageTypeId}`,
      resourceIdSegmentValues: {
        resourcePackageTypeId: opts.resourcePackageTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformLifecycleResourcePackageTypeAriStaticOpts);
    return new _PlatformLifecycleResourcePackageTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformLifecycleResourcePackageTypeAriStaticOpts);
    return new _PlatformLifecycleResourcePackageTypeAri(opts);
  }
  getVariables() {
    return {
      resourcePackageTypeId: this.resourcePackageTypeId
    };
  }
};

export {
  PlatformLifecycleResourcePackageTypeAri
};
