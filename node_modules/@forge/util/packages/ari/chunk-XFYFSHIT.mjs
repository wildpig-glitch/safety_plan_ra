import {
  EcosystemConnectAppAriResourceOwner,
  EcosystemConnectAppAriResourceType
} from "./chunk-GEYJT4UH.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/ecosystem/connect-app/manifest.ts
var ecosystemConnectAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemConnectAppAriResourceOwner,
  resourceType: EcosystemConnectAppAriResourceType,
  resourceIdSlug: "{appKey}",
  resourceIdSegmentFormats: {
    appKey: /[a-zA-Z0-9-._]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/connect-app/index.ts
var EcosystemConnectAppAri = class _EcosystemConnectAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appKey = opts.resourceIdSegmentValues.appKey;
  }
  get appKey() {
    return this._appKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemConnectAppAriStaticOpts.qualifier,
      platformQualifier: ecosystemConnectAppAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemConnectAppAriStaticOpts.resourceOwner,
      resourceType: ecosystemConnectAppAriStaticOpts.resourceType,
      resourceId: `${opts.appKey}`,
      resourceIdSegmentValues: {
        appKey: opts.appKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemConnectAppAriStaticOpts);
    return new _EcosystemConnectAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemConnectAppAriStaticOpts);
    return new _EcosystemConnectAppAri(opts);
  }
  getVariables() {
    return {
      appKey: this.appKey
    };
  }
};

export {
  EcosystemConnectAppAri
};
