import {
  CmdbTypeAriResourceOwner,
  CmdbTypeAriResourceType
} from "./chunk-Q5AHPTNW.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/cmdb/type/manifest.ts
var cmdbTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbTypeAriResourceOwner,
  resourceType: CmdbTypeAriResourceType,
  resourceIdSlug: "{workspaceId}/{typeId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    typeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/type/index.ts
var CmdbTypeAri = class _CmdbTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._typeId = opts.resourceIdSegmentValues.typeId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get typeId() {
    return this._typeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbTypeAriStaticOpts.qualifier,
      platformQualifier: cmdbTypeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbTypeAriStaticOpts.resourceOwner,
      resourceType: cmdbTypeAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.typeId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        typeId: opts.typeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbTypeAriStaticOpts);
    return new _CmdbTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbTypeAriStaticOpts);
    return new _CmdbTypeAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      typeId: this.typeId
    };
  }
};

export {
  CmdbTypeAri
};
