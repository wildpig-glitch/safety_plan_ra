import {
  IdentityUserAriResourceOwner,
  IdentityUserAriResourceType
} from "./chunk-N5QB45QP.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/identity/user/manifest.ts
var identityUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityUserAriResourceOwner,
  resourceType: IdentityUserAriResourceType,
  resourceIdSlug: "{userId}",
  resourceIdSegmentFormats: {
    userId: /[a-zA-Z0-9_\-\:]{1,128}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/user/index.ts
var IdentityUserAri = class _IdentityUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._userId = opts.resourceIdSegmentValues.userId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityUserAriStaticOpts.qualifier,
      platformQualifier: identityUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityUserAriStaticOpts.resourceOwner,
      resourceType: identityUserAriStaticOpts.resourceType,
      resourceId: `${opts.userId}`,
      resourceIdSegmentValues: {
        userId: opts.userId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityUserAriStaticOpts);
    return new _IdentityUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityUserAriStaticOpts);
    return new _IdentityUserAri(opts);
  }
  getVariables() {
    return {
      userId: this.userId
    };
  }
};

export {
  IdentityUserAri
};
