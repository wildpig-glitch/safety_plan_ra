import {
  CompassMetricDefinitionAriResourceOwner,
  CompassMetricDefinitionAriResourceType
} from "./chunk-BS6YPB3T.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/compass/metric-definition/manifest.ts
var compassMetricDefinitionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]*$"),
  resourceOwner: CompassMetricDefinitionAriResourceOwner,
  resourceType: CompassMetricDefinitionAriResourceType,
  resourceIdSlug: "{containerId}/{definitionId}",
  resourceIdSegmentFormats: {
    containerId: /(?:builtin|forge|[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12})/,
    // eslint-disable-line no-useless-escape
    definitionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/metric-definition/index.ts
var CompassMetricDefinitionAri = class _CompassMetricDefinitionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._optionalSiteId = opts.cloudId || "", this._containerId = opts.resourceIdSegmentValues.containerId, this._definitionId = opts.resourceIdSegmentValues.definitionId;
  }
  get optionalSiteId() {
    return this._optionalSiteId;
  }
  get containerId() {
    return this._containerId;
  }
  get definitionId() {
    return this._definitionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassMetricDefinitionAriStaticOpts.qualifier,
      platformQualifier: compassMetricDefinitionAriStaticOpts.platformQualifier,
      cloudId: opts.optionalSiteId,
      resourceOwner: compassMetricDefinitionAriStaticOpts.resourceOwner,
      resourceType: compassMetricDefinitionAriStaticOpts.resourceType,
      resourceId: `${opts.containerId}/${opts.definitionId}`,
      resourceIdSegmentValues: {
        containerId: opts.containerId,
        definitionId: opts.definitionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassMetricDefinitionAriStaticOpts);
    return new _CompassMetricDefinitionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassMetricDefinitionAriStaticOpts);
    return new _CompassMetricDefinitionAri(opts);
  }
  getVariables() {
    return {
      optionalSiteId: this.optionalSiteId,
      containerId: this.containerId,
      definitionId: this.definitionId
    };
  }
};

export {
  CompassMetricDefinitionAri
};
