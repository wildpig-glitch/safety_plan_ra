import {
  OpsgenieDeploymentServiceLinkAriResourceOwner,
  OpsgenieDeploymentServiceLinkAriResourceType
} from "./chunk-VYEUWCEP.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/opsgenie/deployment-service-link/manifest.ts
var opsgenieDeploymentServiceLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieDeploymentServiceLinkAriResourceOwner,
  resourceType: OpsgenieDeploymentServiceLinkAriResourceType,
  resourceIdSlug: "{workspaceId}/{deploymentId}/{serviceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    deploymentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    serviceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/deployment-service-link/index.ts
var OpsgenieDeploymentServiceLinkAri = class _OpsgenieDeploymentServiceLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._deploymentId = opts.resourceIdSegmentValues.deploymentId, this._serviceId = opts.resourceIdSegmentValues.serviceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get deploymentId() {
    return this._deploymentId;
  }
  get serviceId() {
    return this._serviceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieDeploymentServiceLinkAriStaticOpts.qualifier,
      platformQualifier: opsgenieDeploymentServiceLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieDeploymentServiceLinkAriStaticOpts.resourceOwner,
      resourceType: opsgenieDeploymentServiceLinkAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.deploymentId}/${opts.serviceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        deploymentId: opts.deploymentId,
        serviceId: opts.serviceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieDeploymentServiceLinkAriStaticOpts);
    return new _OpsgenieDeploymentServiceLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieDeploymentServiceLinkAriStaticOpts);
    return new _OpsgenieDeploymentServiceLinkAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      deploymentId: this.deploymentId,
      serviceId: this.serviceId
    };
  }
};

export {
  OpsgenieDeploymentServiceLinkAri
};
