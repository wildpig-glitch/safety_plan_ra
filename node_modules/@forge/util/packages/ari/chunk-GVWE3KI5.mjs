import {
  JiraFilterEmailSubscriptionAriResourceOwner,
  JiraFilterEmailSubscriptionAriResourceType
} from "./chunk-Z6KRUHKY.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/filter-email-subscription/manifest.ts
var jiraFilterEmailSubscriptionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraFilterEmailSubscriptionAriResourceOwner,
  resourceType: JiraFilterEmailSubscriptionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{filterEmailSubscriptionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    filterEmailSubscriptionId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/filter-email-subscription/index.ts
var JiraFilterEmailSubscriptionAri = class _JiraFilterEmailSubscriptionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._filterEmailSubscriptionId = opts.resourceIdSegmentValues.filterEmailSubscriptionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get filterEmailSubscriptionId() {
    return this._filterEmailSubscriptionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraFilterEmailSubscriptionAriStaticOpts.qualifier,
      platformQualifier: jiraFilterEmailSubscriptionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraFilterEmailSubscriptionAriStaticOpts.resourceOwner,
      resourceType: jiraFilterEmailSubscriptionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.filterEmailSubscriptionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        filterEmailSubscriptionId: opts.filterEmailSubscriptionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraFilterEmailSubscriptionAriStaticOpts);
    return new _JiraFilterEmailSubscriptionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraFilterEmailSubscriptionAriStaticOpts);
    return new _JiraFilterEmailSubscriptionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      filterEmailSubscriptionId: this.filterEmailSubscriptionId
    };
  }
};

export {
  JiraFilterEmailSubscriptionAri
};
