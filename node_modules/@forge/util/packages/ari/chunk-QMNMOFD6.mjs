import {
  BitbucketSiteAriResourceOwner,
  BitbucketSiteAriResourceType
} from "./chunk-NKJWWYMZ.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/bitbucket/site/manifest.ts
var bitbucketSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketSiteAriResourceOwner,
  resourceType: BitbucketSiteAriResourceType,
  resourceIdSlug: "bitbucket",
  resourceIdSegmentFormats: {}
};

// src/bitbucket/site/index.ts
var BitbucketSiteAri = class _BitbucketSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketSiteAriStaticOpts.qualifier,
      platformQualifier: bitbucketSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketSiteAriStaticOpts.resourceOwner,
      resourceType: bitbucketSiteAriStaticOpts.resourceType,
      resourceId: "bitbucket",
      resourceIdSegmentValues: {}
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketSiteAriStaticOpts);
    return new _BitbucketSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketSiteAriStaticOpts);
    return new _BitbucketSiteAri(opts);
  }
  getVariables() {
    return {};
  }
};

export {
  BitbucketSiteAri
};
