import {
  PlatformIntegrationAriResourceOwner,
  PlatformIntegrationAriResourceType
} from "./chunk-VTU2ZIQ5.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/platform/integration/manifest.ts
var platformIntegrationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformIntegrationAriResourceOwner,
  resourceType: PlatformIntegrationAriResourceType,
  resourceIdSlug: "{integrationKey}",
  resourceIdSegmentFormats: {
    integrationKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/integration/index.ts
var PlatformIntegrationAri = class _PlatformIntegrationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._integrationKey = opts.resourceIdSegmentValues.integrationKey;
  }
  get integrationKey() {
    return this._integrationKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformIntegrationAriStaticOpts.qualifier,
      platformQualifier: platformIntegrationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformIntegrationAriStaticOpts.resourceOwner,
      resourceType: platformIntegrationAriStaticOpts.resourceType,
      resourceId: `${opts.integrationKey}`,
      resourceIdSegmentValues: {
        integrationKey: opts.integrationKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformIntegrationAriStaticOpts);
    return new _PlatformIntegrationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformIntegrationAriStaticOpts);
    return new _PlatformIntegrationAri(opts);
  }
  getVariables() {
    return {
      integrationKey: this.integrationKey
    };
  }
};

export {
  PlatformIntegrationAri
};
