"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// src/jira-servicedesk/index.ts
var jira_servicedesk_exports = {};
__export(jira_servicedesk_exports, {
  JiraServicedeskApprovalAri: () => JiraServicedeskApprovalAri,
  JiraServicedeskCalendarEventAri: () => JiraServicedeskCalendarEventAri,
  JiraServicedeskCannedResponseAri: () => JiraServicedeskCannedResponseAri,
  JiraServicedeskOrganizationAri: () => JiraServicedeskOrganizationAri,
  JiraServicedeskQueueAri: () => JiraServicedeskQueueAri,
  JiraServicedeskRequestTypeAri: () => JiraServicedeskRequestTypeAri,
  JiraServicedeskRoleAri: () => JiraServicedeskRoleAri,
  JiraServicedeskSiteAri: () => JiraServicedeskSiteAri,
  JiraServicedeskSlaAri: () => JiraServicedeskSlaAri
});
module.exports = __toCommonJS(jira_servicedesk_exports);

// src/errors.ts
var ValidationError = class extends Error {
};

// src/core/rules/cloud-id.ts
function validateCloudId(cloudId, format = new RegExp("^[a-zA-Z0-9\\-]*$")) {
  if (!cloudId.match(format))
    throw new ValidationError(`Invalid cloud ID, expected ID of format ${format}.`);
}

// src/core/rules/platform-qualifier.ts
function validatePlatformQualifier(qualifier) {
  if (qualifier !== "cloud" && qualifier !== "third-party")
    throw new ValidationError(`Identifier must have a qualifier of 'cloud' or 'third-party'. Received: ${qualifier}`);
}

// src/core/rules/qualifier.ts
function validateAtiQualifier(qualifier) {
  if (qualifier !== "ati")
    throw new ValidationError(`ATI must have a qualifier of 'ati'. Received: ${qualifier}`);
}
function validateAriQualifier(qualifier) {
  if (qualifier !== "ari")
    throw new ValidationError(`ARI must have a qualifier of 'ari'. Received: ${qualifier}`);
}

// src/core/rules/resource-id.ts
function validateResourceId(id, format = new RegExp("[!a-zA-Z0-9\\-_.~@:{}=]+(/[!a-zA-Z0-9\\-_.~@:{}=]+)*" /* ANY_RESOURCE_ID */), key = "resourceId") {
  let formatWithCarets = new RegExp(`^${format.source}$`);
  if (!id.match(formatWithCarets))
    throw new ValidationError(`Invalid ${key} - ${id}, expected ID of format ${formatWithCarets}.`);
}

// src/core/rules/resource-id-segments.ts
function validateResourceIdSegments(resourceIdSegmentValues, resourceIdSegmentFormats) {
  Object.entries(resourceIdSegmentValues).forEach(([resourceIdKey, resourceIdValue]) => {
    validateResourceId(resourceIdValue, resourceIdSegmentFormats == null ? void 0 : resourceIdSegmentFormats[resourceIdKey], resourceIdKey);
  });
}

// src/core/rules/resource-owner.ts
function validateResourceOwner(owner, expectedResourceOwner) {
  if (expectedResourceOwner && owner !== expectedResourceOwner)
    throw new ValidationError(`Invalid resource owner - ${owner}, expected ${expectedResourceOwner}.`);
}

// src/core/rules/resource-type.ts
function validateResourceType(type, expectedResourceType) {
  if (expectedResourceType && type !== expectedResourceType)
    throw new ValidationError(`Invalid resource type - ${type}, expected ${expectedResourceType}.`);
}

// src/core/parser/base.ts
var NUMBER_OF_BASE_SEGMENTS = 5, SEGMENT_SEPARATOR = ":", BaseParser = class {
  static getIdentifierSegments(inputStr, numberOfSegmentsRequired) {
    let allSegments = inputStr.split(SEGMENT_SEPARATOR);
    if (allSegments.length < numberOfSegmentsRequired)
      throw new ValidationError(`Input string must have ${numberOfSegmentsRequired} segments.`);
    if (allSegments.length > numberOfSegmentsRequired) {
      let segments = allSegments.slice(0, NUMBER_OF_BASE_SEGMENTS - 1), segmentsForResourceId = allSegments.slice(NUMBER_OF_BASE_SEGMENTS - 1, allSegments.length);
      return [...segments, segmentsForResourceId.join(SEGMENT_SEPARATOR)];
    }
    return allSegments;
  }
};

// src/core/parser/ari.ts
var NUMBER_OF_ARI_SEGMENTS = 5, AriParser = class extends BaseParser {
  static fromString(maybeAri, ariProperties) {
    let segments = this.getIdentifierSegments(maybeAri, NUMBER_OF_ARI_SEGMENTS), [qualifier, platformQualifier, resourceOwner, cloudId, resourceTypeAndId] = segments, [resourceType, ...resourceIdSegments] = resourceTypeAndId.split("/"), maybeAriDerivedProperties = {
      qualifier,
      platformQualifier,
      cloudId,
      resourceOwner,
      resourceType,
      resourceId: resourceIdSegments.join("/"),
      resourceIdSegmentValues: ariProperties != null && ariProperties.resourceIdSlug ? this.ariSegmentValuesFromSlug(
        ariProperties.resourceIdSlug,
        resourceIdSegments.join("/"),
        Object.keys(ariProperties.resourceIdSegmentFormats)
      ) : {}
    };
    return this.fromOpts(maybeAriDerivedProperties, ariProperties);
  }
  static fromOpts(maybeAriOpts, ariProperties) {
    let {
      qualifier = "ari",
      platformQualifier = "cloud",
      resourceOwner,
      cloudId,
      resourceId,
      resourceIdSegmentValues,
      resourceType
    } = maybeAriOpts;
    return validateAriQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateCloudId(maybeAriOpts.cloudId || "", ariProperties == null ? void 0 : ariProperties.cloudId), validateResourceOwner(resourceOwner, ariProperties == null ? void 0 : ariProperties.resourceOwner), validateResourceType(resourceType, ariProperties == null ? void 0 : ariProperties.resourceType), validateResourceIdSegments(resourceIdSegmentValues, ariProperties == null ? void 0 : ariProperties.resourceIdSegmentFormats), {
      qualifier,
      resourceOwner,
      resourceType,
      platformQualifier,
      cloudId,
      resourceId,
      resourceIdSegmentValues
    };
  }
  static ariSegmentValuesFromSlug(slug, incomingSegments, expectedKeys) {
    let regexpResult = new RegExp("^" + slug.replace(/\{(.*?)\}/g, "(?<$1>.*?)") + "$").exec(incomingSegments);
    if (!regexpResult)
      throw new ValidationError(`Segment '${incomingSegments}' don't match expected slug: ${slug}`);
    return expectedKeys.forEach((expectedKey) => {
      var _a;
      if (!((_a = regexpResult.groups) != null && _a[expectedKey]))
        throw new ValidationError(`No value supplied for '${expectedKey}' based on slug ${slug}`);
    }), regexpResult.groups || {};
  }
};

// src/core/parser/ati.ts
var NUMBER_OF_ATI_SEGMENTS = 4, AtiParser = class extends BaseParser {
  static fromString(inputStr, atiOpts) {
    let segments = this.getIdentifierSegments(inputStr, NUMBER_OF_ATI_SEGMENTS), [qualifier = "ati", platformQualifier = "cloud", resourceOwner, resourceType] = segments;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), { platformQualifier, resourceOwner, resourceType };
  }
  static fromOpts(maybeAtiOpts, atiOpts) {
    let { qualifier, platformQualifier, resourceOwner, resourceType } = maybeAtiOpts;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), {
      platformQualifier,
      resourceOwner,
      resourceType
    };
  }
};

// src/ati.ts
var Ati = class _Ati {
  constructor(platformQualifier, resourceOwner, resourceType) {
    this._platformQualifier = platformQualifier, this._resourceOwner = resourceOwner, this._resourceType = resourceType;
  }
  get platformQualifier() {
    return this._platformQualifier;
  }
  get resourceOwner() {
    return this._resourceOwner;
  }
  get resourceType() {
    return this._resourceType;
  }
  static create(opts) {
    return new _Ati(opts.platformQualifier || "cloud", opts.resourceOwner, opts.resourceType);
  }
  static parse(maybeAti, atiOpts) {
    let opts = AtiParser.fromString(maybeAti, atiOpts);
    return new _Ati(opts.platformQualifier, opts.resourceOwner, opts.resourceType);
  }
  toString() {
    return `ati:${this.platformQualifier}:${this.resourceOwner}:${this.resourceType}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this._platformQualifier,
      resourceOwner: this._resourceOwner,
      resourceType: this._resourceType
    };
  }
};

// src/core/ari.ts
var Ari = class {
  constructor(opts) {
    this._ati = Ati.create({
      platformQualifier: opts.platformQualifier || "cloud",
      resourceOwner: opts.resourceOwner,
      resourceType: opts.resourceType
    }), this._cloudId = opts.cloudId !== "" ? opts.cloudId : void 0, this._resourceId = opts.resourceId;
  }
  get platformQualifier() {
    return this._ati.platformQualifier;
  }
  get cloudId() {
    return this._cloudId;
  }
  get resourceOwner() {
    return this._ati.resourceOwner;
  }
  get resourceType() {
    return this._ati.resourceType;
  }
  get resourceId() {
    return this._resourceId;
  }
  get ati() {
    return this._ati;
  }
  equals(other) {
    return this.toString() === other.toString();
  }
  toString() {
    return `ari:${this.platformQualifier}:${this.resourceOwner}:${this.cloudId || ""}:${this.resourceType}/${this.resourceId}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this.platformQualifier,
      resourceOwner: this.resourceOwner,
      cloudId: this.cloudId,
      resourceType: this.resourceType,
      resourceId: this.resourceId
    };
  }
};

// src/any-ari.ts
var AnyAri = class _AnyAri extends Ari {
  constructor(opts) {
    super(opts);
  }
  static create(ariOpts, ariStaticOpts) {
    let ariOptsWithDefaults = { ...ariOpts, resourceIdSegmentValues: {} }, validatedOpts = AriParser.fromOpts(ariOptsWithDefaults, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static parse(maybeAri, ariStaticOpts) {
    let validatedOpts = AriParser.fromString(maybeAri, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static check(maybeAri) {
    try {
      return _AnyAri.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return this;
  }
};

// src/core/registered-ari.ts
var RegisteredAri = class extends Ari {
  static check(maybeAri) {
    try {
      return this.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return AnyAri.parse(this.toString());
  }
};

// src/jira-servicedesk/approval/types.ts
var JiraServicedeskApprovalAriResourceOwner = "jira-servicedesk", JiraServicedeskApprovalAriResourceType = "approval";

// src/jira-servicedesk/approval/manifest.ts
var jiraServicedeskApprovalAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskApprovalAriResourceOwner,
  resourceType: JiraServicedeskApprovalAriResourceType,
  resourceIdSlug: "activation/{activationId}/{approvalId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    approvalId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/approval/index.ts
var JiraServicedeskApprovalAri = class _JiraServicedeskApprovalAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._approvalId = opts.resourceIdSegmentValues.approvalId;
  }
  get activationId() {
    return this._activationId;
  }
  get approvalId() {
    return this._approvalId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskApprovalAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskApprovalAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskApprovalAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskApprovalAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.approvalId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        approvalId: opts.approvalId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskApprovalAriStaticOpts);
    return new _JiraServicedeskApprovalAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskApprovalAriStaticOpts);
    return new _JiraServicedeskApprovalAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      approvalId: this.approvalId
    };
  }
};

// src/jira-servicedesk/calendar-event/types.ts
var JiraServicedeskCalendarEventAriResourceOwner = "jira-servicedesk", JiraServicedeskCalendarEventAriResourceType = "calendar-event";

// src/jira-servicedesk/calendar-event/manifest.ts
var jiraServicedeskCalendarEventAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskCalendarEventAriResourceOwner,
  resourceType: JiraServicedeskCalendarEventAriResourceType,
  resourceIdSlug: "activation/{activationId}/{calendarEventId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    calendarEventId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/calendar-event/index.ts
var JiraServicedeskCalendarEventAri = class _JiraServicedeskCalendarEventAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._calendarEventId = opts.resourceIdSegmentValues.calendarEventId;
  }
  get activationId() {
    return this._activationId;
  }
  get calendarEventId() {
    return this._calendarEventId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskCalendarEventAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskCalendarEventAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskCalendarEventAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskCalendarEventAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.calendarEventId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        calendarEventId: opts.calendarEventId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskCalendarEventAriStaticOpts);
    return new _JiraServicedeskCalendarEventAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskCalendarEventAriStaticOpts);
    return new _JiraServicedeskCalendarEventAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      calendarEventId: this.calendarEventId
    };
  }
};

// src/jira-servicedesk/canned-response/types.ts
var JiraServicedeskCannedResponseAriResourceOwner = "jira-servicedesk", JiraServicedeskCannedResponseAriResourceType = "canned-response";

// src/jira-servicedesk/canned-response/manifest.ts
var jiraServicedeskCannedResponseAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskCannedResponseAriResourceOwner,
  resourceType: JiraServicedeskCannedResponseAriResourceType,
  resourceIdSlug: "activation/{activationId}/{cannedResponseId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    cannedResponseId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/canned-response/index.ts
var JiraServicedeskCannedResponseAri = class _JiraServicedeskCannedResponseAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._cannedResponseId = opts.resourceIdSegmentValues.cannedResponseId;
  }
  get activationId() {
    return this._activationId;
  }
  get cannedResponseId() {
    return this._cannedResponseId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskCannedResponseAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskCannedResponseAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskCannedResponseAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskCannedResponseAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.cannedResponseId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        cannedResponseId: opts.cannedResponseId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskCannedResponseAriStaticOpts);
    return new _JiraServicedeskCannedResponseAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskCannedResponseAriStaticOpts);
    return new _JiraServicedeskCannedResponseAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      cannedResponseId: this.cannedResponseId
    };
  }
};

// src/jira-servicedesk/organization/types.ts
var JiraServicedeskOrganizationAriResourceOwner = "jira-servicedesk", JiraServicedeskOrganizationAriResourceType = "organization";

// src/jira-servicedesk/organization/manifest.ts
var jiraServicedeskOrganizationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskOrganizationAriResourceOwner,
  resourceType: JiraServicedeskOrganizationAriResourceType,
  resourceIdSlug: "activation/{activationId}/{organizationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    organizationId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/organization/index.ts
var JiraServicedeskOrganizationAri = class _JiraServicedeskOrganizationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._organizationId = opts.resourceIdSegmentValues.organizationId;
  }
  get activationId() {
    return this._activationId;
  }
  get organizationId() {
    return this._organizationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskOrganizationAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskOrganizationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskOrganizationAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskOrganizationAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.organizationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        organizationId: opts.organizationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskOrganizationAriStaticOpts);
    return new _JiraServicedeskOrganizationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskOrganizationAriStaticOpts);
    return new _JiraServicedeskOrganizationAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      organizationId: this.organizationId
    };
  }
};

// src/jira-servicedesk/queue/types.ts
var JiraServicedeskQueueAriResourceOwner = "jira-servicedesk", JiraServicedeskQueueAriResourceType = "queue";

// src/jira-servicedesk/queue/manifest.ts
var jiraServicedeskQueueAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraServicedeskQueueAriResourceOwner,
  resourceType: JiraServicedeskQueueAriResourceType,
  resourceIdSlug: "activation/{activationId}/{queueId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    queueId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/queue/index.ts
var JiraServicedeskQueueAri = class _JiraServicedeskQueueAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._queueId = opts.resourceIdSegmentValues.queueId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get queueId() {
    return this._queueId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskQueueAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskQueueAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraServicedeskQueueAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskQueueAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.queueId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        queueId: opts.queueId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskQueueAriStaticOpts);
    return new _JiraServicedeskQueueAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskQueueAriStaticOpts);
    return new _JiraServicedeskQueueAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      queueId: this.queueId
    };
  }
};

// src/jira-servicedesk/request-type/types.ts
var JiraServicedeskRequestTypeAriResourceOwner = "jira-servicedesk", JiraServicedeskRequestTypeAriResourceType = "request-type";

// src/jira-servicedesk/request-type/manifest.ts
var jiraServicedeskRequestTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskRequestTypeAriResourceOwner,
  resourceType: JiraServicedeskRequestTypeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{requestTypeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    requestTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/request-type/index.ts
var JiraServicedeskRequestTypeAri = class _JiraServicedeskRequestTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._requestTypeId = opts.resourceIdSegmentValues.requestTypeId;
  }
  get activationId() {
    return this._activationId;
  }
  get requestTypeId() {
    return this._requestTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskRequestTypeAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskRequestTypeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskRequestTypeAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskRequestTypeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.requestTypeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        requestTypeId: opts.requestTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskRequestTypeAriStaticOpts);
    return new _JiraServicedeskRequestTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskRequestTypeAriStaticOpts);
    return new _JiraServicedeskRequestTypeAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      requestTypeId: this.requestTypeId
    };
  }
};

// src/jira-servicedesk/role/types.ts
var JiraServicedeskRoleAriResourceOwner = "jira-servicedesk", JiraServicedeskRoleAriResourceType = "role";

// src/jira-servicedesk/role/manifest.ts
var jiraServicedeskRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskRoleAriResourceOwner,
  resourceType: JiraServicedeskRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/role/index.ts
var JiraServicedeskRoleAri = class _JiraServicedeskRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskRoleAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskRoleAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskRoleAriStaticOpts);
    return new _JiraServicedeskRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskRoleAriStaticOpts);
    return new _JiraServicedeskRoleAri(opts);
  }
  getVariables() {
    return {
      roleId: this.roleId
    };
  }
};

// src/jira-servicedesk/site/types.ts
var JiraServicedeskSiteAriResourceOwner = "jira-servicedesk", JiraServicedeskSiteAriResourceType = "site";

// src/jira-servicedesk/site/manifest.ts
var jiraServicedeskSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskSiteAriResourceOwner,
  resourceType: JiraServicedeskSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/site/index.ts
var JiraServicedeskSiteAri = class _JiraServicedeskSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskSiteAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskSiteAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskSiteAriStaticOpts);
    return new _JiraServicedeskSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskSiteAriStaticOpts);
    return new _JiraServicedeskSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/jira-servicedesk/sla/types.ts
var JiraServicedeskSlaAriResourceOwner = "jira-servicedesk", JiraServicedeskSlaAriResourceType = "sla";

// src/jira-servicedesk/sla/manifest.ts
var jiraServicedeskSlaAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskSlaAriResourceOwner,
  resourceType: JiraServicedeskSlaAriResourceType,
  resourceIdSlug: "activation/{activationId}/{slaId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    slaId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/sla/index.ts
var JiraServicedeskSlaAri = class _JiraServicedeskSlaAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._slaId = opts.resourceIdSegmentValues.slaId;
  }
  get activationId() {
    return this._activationId;
  }
  get slaId() {
    return this._slaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskSlaAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskSlaAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskSlaAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskSlaAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.slaId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        slaId: opts.slaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskSlaAriStaticOpts);
    return new _JiraServicedeskSlaAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskSlaAriStaticOpts);
    return new _JiraServicedeskSlaAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      slaId: this.slaId
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  JiraServicedeskApprovalAri,
  JiraServicedeskCalendarEventAri,
  JiraServicedeskCannedResponseAri,
  JiraServicedeskOrganizationAri,
  JiraServicedeskQueueAri,
  JiraServicedeskRequestTypeAri,
  JiraServicedeskRoleAri,
  JiraServicedeskSiteAri,
  JiraServicedeskSlaAri
});
