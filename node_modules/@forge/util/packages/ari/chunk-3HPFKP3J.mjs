import {
  BitbucketRepositoryAriResourceOwner,
  BitbucketRepositoryAriResourceType
} from "./chunk-4KEXHL4E.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/bitbucket/repository/manifest.ts
var bitbucketRepositoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketRepositoryAriResourceOwner,
  resourceType: BitbucketRepositoryAriResourceType,
  resourceIdSlug: "{repositoryId}",
  resourceIdSegmentFormats: {
    repositoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/repository/index.ts
var BitbucketRepositoryAri = class _BitbucketRepositoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._repositoryId = opts.resourceIdSegmentValues.repositoryId;
  }
  get repositoryId() {
    return this._repositoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketRepositoryAriStaticOpts.qualifier,
      platformQualifier: bitbucketRepositoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketRepositoryAriStaticOpts.resourceOwner,
      resourceType: bitbucketRepositoryAriStaticOpts.resourceType,
      resourceId: `${opts.repositoryId}`,
      resourceIdSegmentValues: {
        repositoryId: opts.repositoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketRepositoryAriStaticOpts);
    return new _BitbucketRepositoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketRepositoryAriStaticOpts);
    return new _BitbucketRepositoryAri(opts);
  }
  getVariables() {
    return {
      repositoryId: this.repositoryId
    };
  }
};

export {
  BitbucketRepositoryAri
};
