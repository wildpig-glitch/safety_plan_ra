import {
  GraphVulnerabilityAriResourceOwner,
  GraphVulnerabilityAriResourceType
} from "./chunk-J7VD66AE.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/graph/vulnerability/manifest.ts
var graphVulnerabilityAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphVulnerabilityAriResourceOwner,
  resourceType: GraphVulnerabilityAriResourceType,
  resourceIdSlug: "activation/{activationId}/{vulnerabilityId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    vulnerabilityId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/vulnerability/index.ts
var GraphVulnerabilityAri = class _GraphVulnerabilityAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._vulnerabilityId = opts.resourceIdSegmentValues.vulnerabilityId;
  }
  get activationId() {
    return this._activationId;
  }
  get vulnerabilityId() {
    return this._vulnerabilityId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphVulnerabilityAriStaticOpts.qualifier,
      platformQualifier: graphVulnerabilityAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphVulnerabilityAriStaticOpts.resourceOwner,
      resourceType: graphVulnerabilityAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.vulnerabilityId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        vulnerabilityId: opts.vulnerabilityId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphVulnerabilityAriStaticOpts);
    return new _GraphVulnerabilityAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphVulnerabilityAriStaticOpts);
    return new _GraphVulnerabilityAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      vulnerabilityId: this.vulnerabilityId
    };
  }
};

export {
  GraphVulnerabilityAri
};
