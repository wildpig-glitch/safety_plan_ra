import {
  JiraNavigationConfigAriResourceOwner,
  JiraNavigationConfigAriResourceType
} from "./chunk-C6ASIFDV.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/navigation-config/manifest.ts
var jiraNavigationConfigAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraNavigationConfigAriResourceOwner,
  resourceType: JiraNavigationConfigAriResourceType,
  resourceIdSlug: "activation/{activationId}/{userId}/{navKey}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    userId: /[a-zA-Z0-9_\-\:]{1,128}/,
    // eslint-disable-line no-useless-escape
    navKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/navigation-config/index.ts
var JiraNavigationConfigAri = class _JiraNavigationConfigAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._userId = opts.resourceIdSegmentValues.userId, this._navKey = opts.resourceIdSegmentValues.navKey;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get userId() {
    return this._userId;
  }
  get navKey() {
    return this._navKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraNavigationConfigAriStaticOpts.qualifier,
      platformQualifier: jiraNavigationConfigAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraNavigationConfigAriStaticOpts.resourceOwner,
      resourceType: jiraNavigationConfigAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.userId}/${opts.navKey}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        userId: opts.userId,
        navKey: opts.navKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraNavigationConfigAriStaticOpts);
    return new _JiraNavigationConfigAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraNavigationConfigAriStaticOpts);
    return new _JiraNavigationConfigAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      userId: this.userId,
      navKey: this.navKey
    };
  }
};

export {
  JiraNavigationConfigAri
};
