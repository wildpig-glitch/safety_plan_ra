import {
  BeaconDetectionSettingAriResourceOwner,
  BeaconDetectionSettingAriResourceType
} from "./chunk-XIUYJLCH.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/beacon/detection-setting/manifest.ts
var beaconDetectionSettingAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: BeaconDetectionSettingAriResourceOwner,
  resourceType: BeaconDetectionSettingAriResourceType,
  resourceIdSlug: "{workspaceId}/{detectionType}/{detectionId}/{settingId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    detectionType: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    detectionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    settingId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/detection-setting/index.ts
var BeaconDetectionSettingAri = class _BeaconDetectionSettingAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._detectionType = opts.resourceIdSegmentValues.detectionType, this._detectionId = opts.resourceIdSegmentValues.detectionId, this._settingId = opts.resourceIdSegmentValues.settingId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get detectionType() {
    return this._detectionType;
  }
  get detectionId() {
    return this._detectionId;
  }
  get settingId() {
    return this._settingId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconDetectionSettingAriStaticOpts.qualifier,
      platformQualifier: beaconDetectionSettingAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: beaconDetectionSettingAriStaticOpts.resourceOwner,
      resourceType: beaconDetectionSettingAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.detectionType}/${opts.detectionId}/${opts.settingId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        detectionType: opts.detectionType,
        detectionId: opts.detectionId,
        settingId: opts.settingId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconDetectionSettingAriStaticOpts);
    return new _BeaconDetectionSettingAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconDetectionSettingAriStaticOpts);
    return new _BeaconDetectionSettingAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      detectionType: this.detectionType,
      detectionId: this.detectionId,
      settingId: this.settingId
    };
  }
};

export {
  BeaconDetectionSettingAri
};
