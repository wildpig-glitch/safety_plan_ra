"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// src/bitbucket/index.ts
var bitbucket_exports = {};
__export(bitbucket_exports, {
  BitbucketAppAri: () => BitbucketAppAri,
  BitbucketOauthConsumerAri: () => BitbucketOauthConsumerAri,
  BitbucketProjectAri: () => BitbucketProjectAri,
  BitbucketPullrequestAri: () => BitbucketPullrequestAri,
  BitbucketRepositoryAri: () => BitbucketRepositoryAri,
  BitbucketRepositoryTransferAri: () => BitbucketRepositoryTransferAri,
  BitbucketSiteAri: () => BitbucketSiteAri,
  BitbucketTeamAri: () => BitbucketTeamAri,
  BitbucketWorkspaceAri: () => BitbucketWorkspaceAri
});
module.exports = __toCommonJS(bitbucket_exports);

// src/errors.ts
var ValidationError = class extends Error {
};

// src/core/rules/cloud-id.ts
function validateCloudId(cloudId, format = new RegExp("^[a-zA-Z0-9\\-]*$")) {
  if (!cloudId.match(format))
    throw new ValidationError(`Invalid cloud ID, expected ID of format ${format}.`);
}

// src/core/rules/platform-qualifier.ts
function validatePlatformQualifier(qualifier) {
  if (qualifier !== "cloud" && qualifier !== "third-party")
    throw new ValidationError(`Identifier must have a qualifier of 'cloud' or 'third-party'. Received: ${qualifier}`);
}

// src/core/rules/qualifier.ts
function validateAtiQualifier(qualifier) {
  if (qualifier !== "ati")
    throw new ValidationError(`ATI must have a qualifier of 'ati'. Received: ${qualifier}`);
}
function validateAriQualifier(qualifier) {
  if (qualifier !== "ari")
    throw new ValidationError(`ARI must have a qualifier of 'ari'. Received: ${qualifier}`);
}

// src/core/rules/resource-id.ts
function validateResourceId(id, format = new RegExp("[!a-zA-Z0-9\\-_.~@:{}=]+(/[!a-zA-Z0-9\\-_.~@:{}=]+)*" /* ANY_RESOURCE_ID */), key = "resourceId") {
  let formatWithCarets = new RegExp(`^${format.source}$`);
  if (!id.match(formatWithCarets))
    throw new ValidationError(`Invalid ${key} - ${id}, expected ID of format ${formatWithCarets}.`);
}

// src/core/rules/resource-id-segments.ts
function validateResourceIdSegments(resourceIdSegmentValues, resourceIdSegmentFormats) {
  Object.entries(resourceIdSegmentValues).forEach(([resourceIdKey, resourceIdValue]) => {
    validateResourceId(resourceIdValue, resourceIdSegmentFormats == null ? void 0 : resourceIdSegmentFormats[resourceIdKey], resourceIdKey);
  });
}

// src/core/rules/resource-owner.ts
function validateResourceOwner(owner, expectedResourceOwner) {
  if (expectedResourceOwner && owner !== expectedResourceOwner)
    throw new ValidationError(`Invalid resource owner - ${owner}, expected ${expectedResourceOwner}.`);
}

// src/core/rules/resource-type.ts
function validateResourceType(type, expectedResourceType) {
  if (expectedResourceType && type !== expectedResourceType)
    throw new ValidationError(`Invalid resource type - ${type}, expected ${expectedResourceType}.`);
}

// src/core/parser/base.ts
var NUMBER_OF_BASE_SEGMENTS = 5, SEGMENT_SEPARATOR = ":", BaseParser = class {
  static getIdentifierSegments(inputStr, numberOfSegmentsRequired) {
    let allSegments = inputStr.split(SEGMENT_SEPARATOR);
    if (allSegments.length < numberOfSegmentsRequired)
      throw new ValidationError(`Input string must have ${numberOfSegmentsRequired} segments.`);
    if (allSegments.length > numberOfSegmentsRequired) {
      let segments = allSegments.slice(0, NUMBER_OF_BASE_SEGMENTS - 1), segmentsForResourceId = allSegments.slice(NUMBER_OF_BASE_SEGMENTS - 1, allSegments.length);
      return [...segments, segmentsForResourceId.join(SEGMENT_SEPARATOR)];
    }
    return allSegments;
  }
};

// src/core/parser/ari.ts
var NUMBER_OF_ARI_SEGMENTS = 5, AriParser = class extends BaseParser {
  static fromString(maybeAri, ariProperties) {
    let segments = this.getIdentifierSegments(maybeAri, NUMBER_OF_ARI_SEGMENTS), [qualifier, platformQualifier, resourceOwner, cloudId, resourceTypeAndId] = segments, [resourceType, ...resourceIdSegments] = resourceTypeAndId.split("/"), maybeAriDerivedProperties = {
      qualifier,
      platformQualifier,
      cloudId,
      resourceOwner,
      resourceType,
      resourceId: resourceIdSegments.join("/"),
      resourceIdSegmentValues: ariProperties != null && ariProperties.resourceIdSlug ? this.ariSegmentValuesFromSlug(
        ariProperties.resourceIdSlug,
        resourceIdSegments.join("/"),
        Object.keys(ariProperties.resourceIdSegmentFormats)
      ) : {}
    };
    return this.fromOpts(maybeAriDerivedProperties, ariProperties);
  }
  static fromOpts(maybeAriOpts, ariProperties) {
    let {
      qualifier = "ari",
      platformQualifier = "cloud",
      resourceOwner,
      cloudId,
      resourceId,
      resourceIdSegmentValues,
      resourceType
    } = maybeAriOpts;
    return validateAriQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateCloudId(maybeAriOpts.cloudId || "", ariProperties == null ? void 0 : ariProperties.cloudId), validateResourceOwner(resourceOwner, ariProperties == null ? void 0 : ariProperties.resourceOwner), validateResourceType(resourceType, ariProperties == null ? void 0 : ariProperties.resourceType), validateResourceIdSegments(resourceIdSegmentValues, ariProperties == null ? void 0 : ariProperties.resourceIdSegmentFormats), {
      qualifier,
      resourceOwner,
      resourceType,
      platformQualifier,
      cloudId,
      resourceId,
      resourceIdSegmentValues
    };
  }
  static ariSegmentValuesFromSlug(slug, incomingSegments, expectedKeys) {
    let regexpResult = new RegExp("^" + slug.replace(/\{(.*?)\}/g, "(?<$1>.*?)") + "$").exec(incomingSegments);
    if (!regexpResult)
      throw new ValidationError(`Segment '${incomingSegments}' don't match expected slug: ${slug}`);
    return expectedKeys.forEach((expectedKey) => {
      var _a;
      if (!((_a = regexpResult.groups) != null && _a[expectedKey]))
        throw new ValidationError(`No value supplied for '${expectedKey}' based on slug ${slug}`);
    }), regexpResult.groups || {};
  }
};

// src/core/parser/ati.ts
var NUMBER_OF_ATI_SEGMENTS = 4, AtiParser = class extends BaseParser {
  static fromString(inputStr, atiOpts) {
    let segments = this.getIdentifierSegments(inputStr, NUMBER_OF_ATI_SEGMENTS), [qualifier = "ati", platformQualifier = "cloud", resourceOwner, resourceType] = segments;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), { platformQualifier, resourceOwner, resourceType };
  }
  static fromOpts(maybeAtiOpts, atiOpts) {
    let { qualifier, platformQualifier, resourceOwner, resourceType } = maybeAtiOpts;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), {
      platformQualifier,
      resourceOwner,
      resourceType
    };
  }
};

// src/ati.ts
var Ati = class _Ati {
  constructor(platformQualifier, resourceOwner, resourceType) {
    this._platformQualifier = platformQualifier, this._resourceOwner = resourceOwner, this._resourceType = resourceType;
  }
  get platformQualifier() {
    return this._platformQualifier;
  }
  get resourceOwner() {
    return this._resourceOwner;
  }
  get resourceType() {
    return this._resourceType;
  }
  static create(opts) {
    return new _Ati(opts.platformQualifier || "cloud", opts.resourceOwner, opts.resourceType);
  }
  static parse(maybeAti, atiOpts) {
    let opts = AtiParser.fromString(maybeAti, atiOpts);
    return new _Ati(opts.platformQualifier, opts.resourceOwner, opts.resourceType);
  }
  toString() {
    return `ati:${this.platformQualifier}:${this.resourceOwner}:${this.resourceType}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this._platformQualifier,
      resourceOwner: this._resourceOwner,
      resourceType: this._resourceType
    };
  }
};

// src/core/ari.ts
var Ari = class {
  constructor(opts) {
    this._ati = Ati.create({
      platformQualifier: opts.platformQualifier || "cloud",
      resourceOwner: opts.resourceOwner,
      resourceType: opts.resourceType
    }), this._cloudId = opts.cloudId !== "" ? opts.cloudId : void 0, this._resourceId = opts.resourceId;
  }
  get platformQualifier() {
    return this._ati.platformQualifier;
  }
  get cloudId() {
    return this._cloudId;
  }
  get resourceOwner() {
    return this._ati.resourceOwner;
  }
  get resourceType() {
    return this._ati.resourceType;
  }
  get resourceId() {
    return this._resourceId;
  }
  get ati() {
    return this._ati;
  }
  equals(other) {
    return this.toString() === other.toString();
  }
  toString() {
    return `ari:${this.platformQualifier}:${this.resourceOwner}:${this.cloudId || ""}:${this.resourceType}/${this.resourceId}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this.platformQualifier,
      resourceOwner: this.resourceOwner,
      cloudId: this.cloudId,
      resourceType: this.resourceType,
      resourceId: this.resourceId
    };
  }
};

// src/any-ari.ts
var AnyAri = class _AnyAri extends Ari {
  constructor(opts) {
    super(opts);
  }
  static create(ariOpts, ariStaticOpts) {
    let ariOptsWithDefaults = { ...ariOpts, resourceIdSegmentValues: {} }, validatedOpts = AriParser.fromOpts(ariOptsWithDefaults, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static parse(maybeAri, ariStaticOpts) {
    let validatedOpts = AriParser.fromString(maybeAri, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static check(maybeAri) {
    try {
      return _AnyAri.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return this;
  }
};

// src/core/registered-ari.ts
var RegisteredAri = class extends Ari {
  static check(maybeAri) {
    try {
      return this.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return AnyAri.parse(this.toString());
  }
};

// src/bitbucket/app/types.ts
var BitbucketAppAriResourceOwner = "bitbucket", BitbucketAppAriResourceType = "app";

// src/bitbucket/app/manifest.ts
var bitbucketAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketAppAriResourceOwner,
  resourceType: BitbucketAppAriResourceType,
  resourceIdSlug: "{workspaceId}/{appId}",
  resourceIdSegmentFormats: {
    workspaceId: /\{[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}}/,
    // eslint-disable-line no-useless-escape
    appId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/app/index.ts
var BitbucketAppAri = class _BitbucketAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._appId = opts.resourceIdSegmentValues.appId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get appId() {
    return this._appId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketAppAriStaticOpts.qualifier,
      platformQualifier: bitbucketAppAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketAppAriStaticOpts.resourceOwner,
      resourceType: bitbucketAppAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.appId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        appId: opts.appId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketAppAriStaticOpts);
    return new _BitbucketAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketAppAriStaticOpts);
    return new _BitbucketAppAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      appId: this.appId
    };
  }
};

// src/bitbucket/oauth-consumer/types.ts
var BitbucketOauthConsumerAriResourceOwner = "bitbucket", BitbucketOauthConsumerAriResourceType = "oauth-consumer";

// src/bitbucket/oauth-consumer/manifest.ts
var bitbucketOauthConsumerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketOauthConsumerAriResourceOwner,
  resourceType: BitbucketOauthConsumerAriResourceType,
  resourceIdSlug: "{clientId}",
  resourceIdSegmentFormats: {
    clientId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/oauth-consumer/index.ts
var BitbucketOauthConsumerAri = class _BitbucketOauthConsumerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._clientId = opts.resourceIdSegmentValues.clientId;
  }
  get clientId() {
    return this._clientId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketOauthConsumerAriStaticOpts.qualifier,
      platformQualifier: bitbucketOauthConsumerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketOauthConsumerAriStaticOpts.resourceOwner,
      resourceType: bitbucketOauthConsumerAriStaticOpts.resourceType,
      resourceId: `${opts.clientId}`,
      resourceIdSegmentValues: {
        clientId: opts.clientId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketOauthConsumerAriStaticOpts);
    return new _BitbucketOauthConsumerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketOauthConsumerAriStaticOpts);
    return new _BitbucketOauthConsumerAri(opts);
  }
  getVariables() {
    return {
      clientId: this.clientId
    };
  }
};

// src/bitbucket/project/types.ts
var BitbucketProjectAriResourceOwner = "bitbucket", BitbucketProjectAriResourceType = "project";

// src/bitbucket/project/manifest.ts
var bitbucketProjectAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketProjectAriResourceOwner,
  resourceType: BitbucketProjectAriResourceType,
  resourceIdSlug: "{projectId}",
  resourceIdSegmentFormats: {
    projectId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/project/index.ts
var BitbucketProjectAri = class _BitbucketProjectAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._projectId = opts.resourceIdSegmentValues.projectId;
  }
  get projectId() {
    return this._projectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketProjectAriStaticOpts.qualifier,
      platformQualifier: bitbucketProjectAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketProjectAriStaticOpts.resourceOwner,
      resourceType: bitbucketProjectAriStaticOpts.resourceType,
      resourceId: `${opts.projectId}`,
      resourceIdSegmentValues: {
        projectId: opts.projectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketProjectAriStaticOpts);
    return new _BitbucketProjectAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketProjectAriStaticOpts);
    return new _BitbucketProjectAri(opts);
  }
  getVariables() {
    return {
      projectId: this.projectId
    };
  }
};

// src/bitbucket/pullrequest/types.ts
var BitbucketPullrequestAriResourceOwner = "bitbucket", BitbucketPullrequestAriResourceType = "pullrequest";

// src/bitbucket/pullrequest/manifest.ts
var bitbucketPullrequestAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketPullrequestAriResourceOwner,
  resourceType: BitbucketPullrequestAriResourceType,
  resourceIdSlug: "{pullRequestId}",
  resourceIdSegmentFormats: {
    pullRequestId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/pullrequest/index.ts
var BitbucketPullrequestAri = class _BitbucketPullrequestAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._pullRequestId = opts.resourceIdSegmentValues.pullRequestId;
  }
  get pullRequestId() {
    return this._pullRequestId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketPullrequestAriStaticOpts.qualifier,
      platformQualifier: bitbucketPullrequestAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketPullrequestAriStaticOpts.resourceOwner,
      resourceType: bitbucketPullrequestAriStaticOpts.resourceType,
      resourceId: `${opts.pullRequestId}`,
      resourceIdSegmentValues: {
        pullRequestId: opts.pullRequestId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketPullrequestAriStaticOpts);
    return new _BitbucketPullrequestAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketPullrequestAriStaticOpts);
    return new _BitbucketPullrequestAri(opts);
  }
  getVariables() {
    return {
      pullRequestId: this.pullRequestId
    };
  }
};

// src/bitbucket/repository/types.ts
var BitbucketRepositoryAriResourceOwner = "bitbucket", BitbucketRepositoryAriResourceType = "repository";

// src/bitbucket/repository/manifest.ts
var bitbucketRepositoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketRepositoryAriResourceOwner,
  resourceType: BitbucketRepositoryAriResourceType,
  resourceIdSlug: "{repositoryId}",
  resourceIdSegmentFormats: {
    repositoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/repository/index.ts
var BitbucketRepositoryAri = class _BitbucketRepositoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._repositoryId = opts.resourceIdSegmentValues.repositoryId;
  }
  get repositoryId() {
    return this._repositoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketRepositoryAriStaticOpts.qualifier,
      platformQualifier: bitbucketRepositoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketRepositoryAriStaticOpts.resourceOwner,
      resourceType: bitbucketRepositoryAriStaticOpts.resourceType,
      resourceId: `${opts.repositoryId}`,
      resourceIdSegmentValues: {
        repositoryId: opts.repositoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketRepositoryAriStaticOpts);
    return new _BitbucketRepositoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketRepositoryAriStaticOpts);
    return new _BitbucketRepositoryAri(opts);
  }
  getVariables() {
    return {
      repositoryId: this.repositoryId
    };
  }
};

// src/bitbucket/repository-transfer/types.ts
var BitbucketRepositoryTransferAriResourceOwner = "bitbucket", BitbucketRepositoryTransferAriResourceType = "repository-transfer";

// src/bitbucket/repository-transfer/manifest.ts
var bitbucketRepositoryTransferAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketRepositoryTransferAriResourceOwner,
  resourceType: BitbucketRepositoryTransferAriResourceType,
  resourceIdSlug: "{transferId}",
  resourceIdSegmentFormats: {
    transferId: /[a-f0-9]{32}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/repository-transfer/index.ts
var BitbucketRepositoryTransferAri = class _BitbucketRepositoryTransferAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._transferId = opts.resourceIdSegmentValues.transferId;
  }
  get transferId() {
    return this._transferId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketRepositoryTransferAriStaticOpts.qualifier,
      platformQualifier: bitbucketRepositoryTransferAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketRepositoryTransferAriStaticOpts.resourceOwner,
      resourceType: bitbucketRepositoryTransferAriStaticOpts.resourceType,
      resourceId: `${opts.transferId}`,
      resourceIdSegmentValues: {
        transferId: opts.transferId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketRepositoryTransferAriStaticOpts);
    return new _BitbucketRepositoryTransferAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketRepositoryTransferAriStaticOpts);
    return new _BitbucketRepositoryTransferAri(opts);
  }
  getVariables() {
    return {
      transferId: this.transferId
    };
  }
};

// src/bitbucket/site/types.ts
var BitbucketSiteAriResourceOwner = "bitbucket", BitbucketSiteAriResourceType = "site";

// src/bitbucket/site/manifest.ts
var bitbucketSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketSiteAriResourceOwner,
  resourceType: BitbucketSiteAriResourceType,
  resourceIdSlug: "bitbucket",
  resourceIdSegmentFormats: {}
};

// src/bitbucket/site/index.ts
var BitbucketSiteAri = class _BitbucketSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketSiteAriStaticOpts.qualifier,
      platformQualifier: bitbucketSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketSiteAriStaticOpts.resourceOwner,
      resourceType: bitbucketSiteAriStaticOpts.resourceType,
      resourceId: "bitbucket",
      resourceIdSegmentValues: {}
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketSiteAriStaticOpts);
    return new _BitbucketSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketSiteAriStaticOpts);
    return new _BitbucketSiteAri(opts);
  }
  getVariables() {
    return {};
  }
};

// src/bitbucket/team/types.ts
var BitbucketTeamAriResourceOwner = "bitbucket", BitbucketTeamAriResourceType = "team";

// src/bitbucket/team/manifest.ts
var bitbucketTeamAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketTeamAriResourceOwner,
  resourceType: BitbucketTeamAriResourceType,
  resourceIdSlug: "{teamId}",
  resourceIdSegmentFormats: {
    teamId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/team/index.ts
var BitbucketTeamAri = class _BitbucketTeamAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._teamId = opts.resourceIdSegmentValues.teamId;
  }
  get teamId() {
    return this._teamId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketTeamAriStaticOpts.qualifier,
      platformQualifier: bitbucketTeamAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketTeamAriStaticOpts.resourceOwner,
      resourceType: bitbucketTeamAriStaticOpts.resourceType,
      resourceId: `${opts.teamId}`,
      resourceIdSegmentValues: {
        teamId: opts.teamId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketTeamAriStaticOpts);
    return new _BitbucketTeamAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketTeamAriStaticOpts);
    return new _BitbucketTeamAri(opts);
  }
  getVariables() {
    return {
      teamId: this.teamId
    };
  }
};

// src/bitbucket/workspace/types.ts
var BitbucketWorkspaceAriResourceOwner = "bitbucket", BitbucketWorkspaceAriResourceType = "workspace";

// src/bitbucket/workspace/manifest.ts
var bitbucketWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketWorkspaceAriResourceOwner,
  resourceType: BitbucketWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/workspace/index.ts
var BitbucketWorkspaceAri = class _BitbucketWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketWorkspaceAriStaticOpts.qualifier,
      platformQualifier: bitbucketWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketWorkspaceAriStaticOpts.resourceOwner,
      resourceType: bitbucketWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketWorkspaceAriStaticOpts);
    return new _BitbucketWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketWorkspaceAriStaticOpts);
    return new _BitbucketWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BitbucketAppAri,
  BitbucketOauthConsumerAri,
  BitbucketProjectAri,
  BitbucketPullrequestAri,
  BitbucketRepositoryAri,
  BitbucketRepositoryTransferAri,
  BitbucketSiteAri,
  BitbucketTeamAri,
  BitbucketWorkspaceAri
});
