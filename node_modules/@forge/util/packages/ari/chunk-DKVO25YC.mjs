import {
  GraphContentAriResourceOwner,
  GraphContentAriResourceType
} from "./chunk-PBJGJF43.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/graph/content/manifest.ts
var graphContentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphContentAriResourceOwner,
  resourceType: GraphContentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{contentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    contentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/content/index.ts
var GraphContentAri = class _GraphContentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._contentId = opts.resourceIdSegmentValues.contentId;
  }
  get activationId() {
    return this._activationId;
  }
  get contentId() {
    return this._contentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphContentAriStaticOpts.qualifier,
      platformQualifier: graphContentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphContentAriStaticOpts.resourceOwner,
      resourceType: graphContentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.contentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        contentId: opts.contentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphContentAriStaticOpts);
    return new _GraphContentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphContentAriStaticOpts);
    return new _GraphContentAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      contentId: this.contentId
    };
  }
};

export {
  GraphContentAri
};
