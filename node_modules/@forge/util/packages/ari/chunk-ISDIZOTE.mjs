import {
  JiraAvailableFieldsAriResourceOwner,
  JiraAvailableFieldsAriResourceType
} from "./chunk-ICE3OR6G.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/available-fields/manifest.ts
var jiraAvailableFieldsAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraAvailableFieldsAriResourceOwner,
  resourceType: JiraAvailableFieldsAriResourceType,
  resourceIdSlug: "activation/{activationId}/{projectId}/{issueTypeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    projectId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    issueTypeId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/available-fields/index.ts
var JiraAvailableFieldsAri = class _JiraAvailableFieldsAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._projectId = opts.resourceIdSegmentValues.projectId, this._issueTypeId = opts.resourceIdSegmentValues.issueTypeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get projectId() {
    return this._projectId;
  }
  get issueTypeId() {
    return this._issueTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraAvailableFieldsAriStaticOpts.qualifier,
      platformQualifier: jiraAvailableFieldsAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraAvailableFieldsAriStaticOpts.resourceOwner,
      resourceType: jiraAvailableFieldsAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.projectId}/${opts.issueTypeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        projectId: opts.projectId,
        issueTypeId: opts.issueTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraAvailableFieldsAriStaticOpts);
    return new _JiraAvailableFieldsAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraAvailableFieldsAriStaticOpts);
    return new _JiraAvailableFieldsAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      projectId: this.projectId,
      issueTypeId: this.issueTypeId
    };
  }
};

export {
  JiraAvailableFieldsAri
};
