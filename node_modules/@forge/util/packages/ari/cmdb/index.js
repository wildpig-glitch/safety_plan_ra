"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// src/cmdb/index.ts
var cmdb_exports = {};
__export(cmdb_exports, {
  CmdbAttributeAri: () => CmdbAttributeAri,
  CmdbImportConfigurationAri: () => CmdbImportConfigurationAri,
  CmdbObjectAri: () => CmdbObjectAri,
  CmdbRoleAri: () => CmdbRoleAri,
  CmdbSchemaAri: () => CmdbSchemaAri,
  CmdbTypeAri: () => CmdbTypeAri,
  CmdbWorkspaceAri: () => CmdbWorkspaceAri
});
module.exports = __toCommonJS(cmdb_exports);

// src/errors.ts
var ValidationError = class extends Error {
};

// src/core/rules/cloud-id.ts
function validateCloudId(cloudId, format = new RegExp("^[a-zA-Z0-9\\-]*$")) {
  if (!cloudId.match(format))
    throw new ValidationError(`Invalid cloud ID, expected ID of format ${format}.`);
}

// src/core/rules/platform-qualifier.ts
function validatePlatformQualifier(qualifier) {
  if (qualifier !== "cloud" && qualifier !== "third-party")
    throw new ValidationError(`Identifier must have a qualifier of 'cloud' or 'third-party'. Received: ${qualifier}`);
}

// src/core/rules/qualifier.ts
function validateAtiQualifier(qualifier) {
  if (qualifier !== "ati")
    throw new ValidationError(`ATI must have a qualifier of 'ati'. Received: ${qualifier}`);
}
function validateAriQualifier(qualifier) {
  if (qualifier !== "ari")
    throw new ValidationError(`ARI must have a qualifier of 'ari'. Received: ${qualifier}`);
}

// src/core/rules/resource-id.ts
function validateResourceId(id, format = new RegExp("[!a-zA-Z0-9\\-_.~@:{}=]+(/[!a-zA-Z0-9\\-_.~@:{}=]+)*" /* ANY_RESOURCE_ID */), key = "resourceId") {
  let formatWithCarets = new RegExp(`^${format.source}$`);
  if (!id.match(formatWithCarets))
    throw new ValidationError(`Invalid ${key} - ${id}, expected ID of format ${formatWithCarets}.`);
}

// src/core/rules/resource-id-segments.ts
function validateResourceIdSegments(resourceIdSegmentValues, resourceIdSegmentFormats) {
  Object.entries(resourceIdSegmentValues).forEach(([resourceIdKey, resourceIdValue]) => {
    validateResourceId(resourceIdValue, resourceIdSegmentFormats == null ? void 0 : resourceIdSegmentFormats[resourceIdKey], resourceIdKey);
  });
}

// src/core/rules/resource-owner.ts
function validateResourceOwner(owner, expectedResourceOwner) {
  if (expectedResourceOwner && owner !== expectedResourceOwner)
    throw new ValidationError(`Invalid resource owner - ${owner}, expected ${expectedResourceOwner}.`);
}

// src/core/rules/resource-type.ts
function validateResourceType(type, expectedResourceType) {
  if (expectedResourceType && type !== expectedResourceType)
    throw new ValidationError(`Invalid resource type - ${type}, expected ${expectedResourceType}.`);
}

// src/core/parser/base.ts
var NUMBER_OF_BASE_SEGMENTS = 5, SEGMENT_SEPARATOR = ":", BaseParser = class {
  static getIdentifierSegments(inputStr, numberOfSegmentsRequired) {
    let allSegments = inputStr.split(SEGMENT_SEPARATOR);
    if (allSegments.length < numberOfSegmentsRequired)
      throw new ValidationError(`Input string must have ${numberOfSegmentsRequired} segments.`);
    if (allSegments.length > numberOfSegmentsRequired) {
      let segments = allSegments.slice(0, NUMBER_OF_BASE_SEGMENTS - 1), segmentsForResourceId = allSegments.slice(NUMBER_OF_BASE_SEGMENTS - 1, allSegments.length);
      return [...segments, segmentsForResourceId.join(SEGMENT_SEPARATOR)];
    }
    return allSegments;
  }
};

// src/core/parser/ari.ts
var NUMBER_OF_ARI_SEGMENTS = 5, AriParser = class extends BaseParser {
  static fromString(maybeAri, ariProperties) {
    let segments = this.getIdentifierSegments(maybeAri, NUMBER_OF_ARI_SEGMENTS), [qualifier, platformQualifier, resourceOwner, cloudId, resourceTypeAndId] = segments, [resourceType, ...resourceIdSegments] = resourceTypeAndId.split("/"), maybeAriDerivedProperties = {
      qualifier,
      platformQualifier,
      cloudId,
      resourceOwner,
      resourceType,
      resourceId: resourceIdSegments.join("/"),
      resourceIdSegmentValues: ariProperties != null && ariProperties.resourceIdSlug ? this.ariSegmentValuesFromSlug(
        ariProperties.resourceIdSlug,
        resourceIdSegments.join("/"),
        Object.keys(ariProperties.resourceIdSegmentFormats)
      ) : {}
    };
    return this.fromOpts(maybeAriDerivedProperties, ariProperties);
  }
  static fromOpts(maybeAriOpts, ariProperties) {
    let {
      qualifier = "ari",
      platformQualifier = "cloud",
      resourceOwner,
      cloudId,
      resourceId,
      resourceIdSegmentValues,
      resourceType
    } = maybeAriOpts;
    return validateAriQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateCloudId(maybeAriOpts.cloudId || "", ariProperties == null ? void 0 : ariProperties.cloudId), validateResourceOwner(resourceOwner, ariProperties == null ? void 0 : ariProperties.resourceOwner), validateResourceType(resourceType, ariProperties == null ? void 0 : ariProperties.resourceType), validateResourceIdSegments(resourceIdSegmentValues, ariProperties == null ? void 0 : ariProperties.resourceIdSegmentFormats), {
      qualifier,
      resourceOwner,
      resourceType,
      platformQualifier,
      cloudId,
      resourceId,
      resourceIdSegmentValues
    };
  }
  static ariSegmentValuesFromSlug(slug, incomingSegments, expectedKeys) {
    let regexpResult = new RegExp("^" + slug.replace(/\{(.*?)\}/g, "(?<$1>.*?)") + "$").exec(incomingSegments);
    if (!regexpResult)
      throw new ValidationError(`Segment '${incomingSegments}' don't match expected slug: ${slug}`);
    return expectedKeys.forEach((expectedKey) => {
      var _a;
      if (!((_a = regexpResult.groups) != null && _a[expectedKey]))
        throw new ValidationError(`No value supplied for '${expectedKey}' based on slug ${slug}`);
    }), regexpResult.groups || {};
  }
};

// src/core/parser/ati.ts
var NUMBER_OF_ATI_SEGMENTS = 4, AtiParser = class extends BaseParser {
  static fromString(inputStr, atiOpts) {
    let segments = this.getIdentifierSegments(inputStr, NUMBER_OF_ATI_SEGMENTS), [qualifier = "ati", platformQualifier = "cloud", resourceOwner, resourceType] = segments;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), { platformQualifier, resourceOwner, resourceType };
  }
  static fromOpts(maybeAtiOpts, atiOpts) {
    let { qualifier, platformQualifier, resourceOwner, resourceType } = maybeAtiOpts;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), {
      platformQualifier,
      resourceOwner,
      resourceType
    };
  }
};

// src/ati.ts
var Ati = class _Ati {
  constructor(platformQualifier, resourceOwner, resourceType) {
    this._platformQualifier = platformQualifier, this._resourceOwner = resourceOwner, this._resourceType = resourceType;
  }
  get platformQualifier() {
    return this._platformQualifier;
  }
  get resourceOwner() {
    return this._resourceOwner;
  }
  get resourceType() {
    return this._resourceType;
  }
  static create(opts) {
    return new _Ati(opts.platformQualifier || "cloud", opts.resourceOwner, opts.resourceType);
  }
  static parse(maybeAti, atiOpts) {
    let opts = AtiParser.fromString(maybeAti, atiOpts);
    return new _Ati(opts.platformQualifier, opts.resourceOwner, opts.resourceType);
  }
  toString() {
    return `ati:${this.platformQualifier}:${this.resourceOwner}:${this.resourceType}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this._platformQualifier,
      resourceOwner: this._resourceOwner,
      resourceType: this._resourceType
    };
  }
};

// src/core/ari.ts
var Ari = class {
  constructor(opts) {
    this._ati = Ati.create({
      platformQualifier: opts.platformQualifier || "cloud",
      resourceOwner: opts.resourceOwner,
      resourceType: opts.resourceType
    }), this._cloudId = opts.cloudId !== "" ? opts.cloudId : void 0, this._resourceId = opts.resourceId;
  }
  get platformQualifier() {
    return this._ati.platformQualifier;
  }
  get cloudId() {
    return this._cloudId;
  }
  get resourceOwner() {
    return this._ati.resourceOwner;
  }
  get resourceType() {
    return this._ati.resourceType;
  }
  get resourceId() {
    return this._resourceId;
  }
  get ati() {
    return this._ati;
  }
  equals(other) {
    return this.toString() === other.toString();
  }
  toString() {
    return `ari:${this.platformQualifier}:${this.resourceOwner}:${this.cloudId || ""}:${this.resourceType}/${this.resourceId}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this.platformQualifier,
      resourceOwner: this.resourceOwner,
      cloudId: this.cloudId,
      resourceType: this.resourceType,
      resourceId: this.resourceId
    };
  }
};

// src/any-ari.ts
var AnyAri = class _AnyAri extends Ari {
  constructor(opts) {
    super(opts);
  }
  static create(ariOpts, ariStaticOpts) {
    let ariOptsWithDefaults = { ...ariOpts, resourceIdSegmentValues: {} }, validatedOpts = AriParser.fromOpts(ariOptsWithDefaults, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static parse(maybeAri, ariStaticOpts) {
    let validatedOpts = AriParser.fromString(maybeAri, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static check(maybeAri) {
    try {
      return _AnyAri.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return this;
  }
};

// src/core/registered-ari.ts
var RegisteredAri = class extends Ari {
  static check(maybeAri) {
    try {
      return this.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return AnyAri.parse(this.toString());
  }
};

// src/cmdb/attribute/types.ts
var CmdbAttributeAriResourceOwner = "cmdb", CmdbAttributeAriResourceType = "attribute";

// src/cmdb/attribute/manifest.ts
var cmdbAttributeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbAttributeAriResourceOwner,
  resourceType: CmdbAttributeAriResourceType,
  resourceIdSlug: "{workspaceId}/{attributeId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    attributeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/attribute/index.ts
var CmdbAttributeAri = class _CmdbAttributeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._attributeId = opts.resourceIdSegmentValues.attributeId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get attributeId() {
    return this._attributeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbAttributeAriStaticOpts.qualifier,
      platformQualifier: cmdbAttributeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbAttributeAriStaticOpts.resourceOwner,
      resourceType: cmdbAttributeAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.attributeId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        attributeId: opts.attributeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbAttributeAriStaticOpts);
    return new _CmdbAttributeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbAttributeAriStaticOpts);
    return new _CmdbAttributeAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      attributeId: this.attributeId
    };
  }
};

// src/cmdb/import-configuration/types.ts
var CmdbImportConfigurationAriResourceOwner = "cmdb", CmdbImportConfigurationAriResourceType = "import-configuration";

// src/cmdb/import-configuration/manifest.ts
var cmdbImportConfigurationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbImportConfigurationAriResourceOwner,
  resourceType: CmdbImportConfigurationAriResourceType,
  resourceIdSlug: "{workspaceId}/{importConfigId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    importConfigId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/import-configuration/index.ts
var CmdbImportConfigurationAri = class _CmdbImportConfigurationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._importConfigId = opts.resourceIdSegmentValues.importConfigId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get importConfigId() {
    return this._importConfigId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbImportConfigurationAriStaticOpts.qualifier,
      platformQualifier: cmdbImportConfigurationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbImportConfigurationAriStaticOpts.resourceOwner,
      resourceType: cmdbImportConfigurationAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.importConfigId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        importConfigId: opts.importConfigId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbImportConfigurationAriStaticOpts);
    return new _CmdbImportConfigurationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbImportConfigurationAriStaticOpts);
    return new _CmdbImportConfigurationAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      importConfigId: this.importConfigId
    };
  }
};

// src/cmdb/object/types.ts
var CmdbObjectAriResourceOwner = "cmdb", CmdbObjectAriResourceType = "object";

// src/cmdb/object/manifest.ts
var cmdbObjectAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbObjectAriResourceOwner,
  resourceType: CmdbObjectAriResourceType,
  resourceIdSlug: "{workspaceId}/{objectId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    objectId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/object/index.ts
var CmdbObjectAri = class _CmdbObjectAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._objectId = opts.resourceIdSegmentValues.objectId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get objectId() {
    return this._objectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbObjectAriStaticOpts.qualifier,
      platformQualifier: cmdbObjectAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbObjectAriStaticOpts.resourceOwner,
      resourceType: cmdbObjectAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.objectId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        objectId: opts.objectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbObjectAriStaticOpts);
    return new _CmdbObjectAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbObjectAriStaticOpts);
    return new _CmdbObjectAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      objectId: this.objectId
    };
  }
};

// src/cmdb/role/types.ts
var CmdbRoleAriResourceOwner = "cmdb", CmdbRoleAriResourceType = "role";

// src/cmdb/role/manifest.ts
var cmdbRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbRoleAriResourceOwner,
  resourceType: CmdbRoleAriResourceType,
  resourceIdSlug: "{roleGroup}/{roleType}",
  resourceIdSegmentFormats: {
    roleGroup: /(?:schema|airtrack|airtrack-buoy)/,
    // eslint-disable-line no-useless-escape
    roleType: /(?:viewer|admin|report-viewer|report-editor)/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/role/index.ts
var CmdbRoleAri = class _CmdbRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleGroup = opts.resourceIdSegmentValues.roleGroup, this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleGroup() {
    return this._roleGroup;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbRoleAriStaticOpts.qualifier,
      platformQualifier: cmdbRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbRoleAriStaticOpts.resourceOwner,
      resourceType: cmdbRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleGroup}/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleGroup: opts.roleGroup,
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbRoleAriStaticOpts);
    return new _CmdbRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbRoleAriStaticOpts);
    return new _CmdbRoleAri(opts);
  }
  getVariables() {
    return {
      roleGroup: this.roleGroup,
      roleType: this.roleType
    };
  }
};

// src/cmdb/schema/types.ts
var CmdbSchemaAriResourceOwner = "cmdb", CmdbSchemaAriResourceType = "schema";

// src/cmdb/schema/manifest.ts
var cmdbSchemaAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbSchemaAriResourceOwner,
  resourceType: CmdbSchemaAriResourceType,
  resourceIdSlug: "{workspaceId}/{schemaId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    schemaId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/schema/index.ts
var CmdbSchemaAri = class _CmdbSchemaAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._schemaId = opts.resourceIdSegmentValues.schemaId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get schemaId() {
    return this._schemaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbSchemaAriStaticOpts.qualifier,
      platformQualifier: cmdbSchemaAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbSchemaAriStaticOpts.resourceOwner,
      resourceType: cmdbSchemaAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.schemaId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        schemaId: opts.schemaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbSchemaAriStaticOpts);
    return new _CmdbSchemaAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbSchemaAriStaticOpts);
    return new _CmdbSchemaAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      schemaId: this.schemaId
    };
  }
};

// src/cmdb/type/types.ts
var CmdbTypeAriResourceOwner = "cmdb", CmdbTypeAriResourceType = "type";

// src/cmdb/type/manifest.ts
var cmdbTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbTypeAriResourceOwner,
  resourceType: CmdbTypeAriResourceType,
  resourceIdSlug: "{workspaceId}/{typeId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    typeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/type/index.ts
var CmdbTypeAri = class _CmdbTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._typeId = opts.resourceIdSegmentValues.typeId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get typeId() {
    return this._typeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbTypeAriStaticOpts.qualifier,
      platformQualifier: cmdbTypeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbTypeAriStaticOpts.resourceOwner,
      resourceType: cmdbTypeAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.typeId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        typeId: opts.typeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbTypeAriStaticOpts);
    return new _CmdbTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbTypeAriStaticOpts);
    return new _CmdbTypeAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      typeId: this.typeId
    };
  }
};

// src/cmdb/workspace/types.ts
var CmdbWorkspaceAriResourceOwner = "cmdb", CmdbWorkspaceAriResourceType = "workspace";

// src/cmdb/workspace/manifest.ts
var cmdbWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbWorkspaceAriResourceOwner,
  resourceType: CmdbWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/workspace/index.ts
var CmdbWorkspaceAri = class _CmdbWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbWorkspaceAriStaticOpts.qualifier,
      platformQualifier: cmdbWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbWorkspaceAriStaticOpts.resourceOwner,
      resourceType: cmdbWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbWorkspaceAriStaticOpts);
    return new _CmdbWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbWorkspaceAriStaticOpts);
    return new _CmdbWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CmdbAttributeAri,
  CmdbImportConfigurationAri,
  CmdbObjectAri,
  CmdbRoleAri,
  CmdbSchemaAri,
  CmdbTypeAri,
  CmdbWorkspaceAri
});
