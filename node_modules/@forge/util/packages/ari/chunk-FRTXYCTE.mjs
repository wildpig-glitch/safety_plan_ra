import {
  MeasurementSiteUserAriResourceOwner,
  MeasurementSiteUserAriResourceType
} from "./chunk-CHIUNEWO.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/measurement/site-user/manifest.ts
var measurementSiteUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MeasurementSiteUserAriResourceOwner,
  resourceType: MeasurementSiteUserAriResourceType,
  resourceIdSlug: "{siteId}/{aaId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    aaId: /[a-zA-Z0-9_\-\:]{1,128}/
    // eslint-disable-line no-useless-escape
  }
};

// src/measurement/site-user/index.ts
var MeasurementSiteUserAri = class _MeasurementSiteUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId, this._aaId = opts.resourceIdSegmentValues.aaId;
  }
  get siteId() {
    return this._siteId;
  }
  get aaId() {
    return this._aaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: measurementSiteUserAriStaticOpts.qualifier,
      platformQualifier: measurementSiteUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: measurementSiteUserAriStaticOpts.resourceOwner,
      resourceType: measurementSiteUserAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}/${opts.aaId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId,
        aaId: opts.aaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, measurementSiteUserAriStaticOpts);
    return new _MeasurementSiteUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, measurementSiteUserAriStaticOpts);
    return new _MeasurementSiteUserAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      aaId: this.aaId
    };
  }
};

export {
  MeasurementSiteUserAri
};
