import {
  JiraWorklogAriResourceOwner,
  JiraWorklogAriResourceType
} from "./chunk-V5CUEKO2.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/worklog/manifest.ts
var jiraWorklogAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraWorklogAriResourceOwner,
  resourceType: JiraWorklogAriResourceType,
  resourceIdSlug: "{worklogId}",
  resourceIdSegmentFormats: {
    worklogId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/worklog/index.ts
var JiraWorklogAri = class _JiraWorklogAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._worklogId = opts.resourceIdSegmentValues.worklogId;
  }
  get siteId() {
    return this._siteId;
  }
  get worklogId() {
    return this._worklogId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraWorklogAriStaticOpts.qualifier,
      platformQualifier: jiraWorklogAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraWorklogAriStaticOpts.resourceOwner,
      resourceType: jiraWorklogAriStaticOpts.resourceType,
      resourceId: `${opts.worklogId}`,
      resourceIdSegmentValues: {
        worklogId: opts.worklogId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraWorklogAriStaticOpts);
    return new _JiraWorklogAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraWorklogAriStaticOpts);
    return new _JiraWorklogAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      worklogId: this.worklogId
    };
  }
};

export {
  JiraWorklogAri
};
