import {
  OpsgenieDeploymentAriResourceOwner,
  OpsgenieDeploymentAriResourceType
} from "./chunk-BVX743QJ.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/opsgenie/deployment/manifest.ts
var opsgenieDeploymentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieDeploymentAriResourceOwner,
  resourceType: OpsgenieDeploymentAriResourceType,
  resourceIdSlug: "{workspaceId}/{deploymentId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    deploymentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/deployment/index.ts
var OpsgenieDeploymentAri = class _OpsgenieDeploymentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._deploymentId = opts.resourceIdSegmentValues.deploymentId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get deploymentId() {
    return this._deploymentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieDeploymentAriStaticOpts.qualifier,
      platformQualifier: opsgenieDeploymentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieDeploymentAriStaticOpts.resourceOwner,
      resourceType: opsgenieDeploymentAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.deploymentId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        deploymentId: opts.deploymentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieDeploymentAriStaticOpts);
    return new _OpsgenieDeploymentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieDeploymentAriStaticOpts);
    return new _OpsgenieDeploymentAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      deploymentId: this.deploymentId
    };
  }
};

export {
  OpsgenieDeploymentAri
};
