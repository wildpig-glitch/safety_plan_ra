import {
  JiraIssueTypeSchemeMappingAriResourceOwner,
  JiraIssueTypeSchemeMappingAriResourceType
} from "./chunk-VNWAD3NX.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/issue-type-scheme-mapping/manifest.ts
var jiraIssueTypeSchemeMappingAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueTypeSchemeMappingAriResourceOwner,
  resourceType: JiraIssueTypeSchemeMappingAriResourceType,
  resourceIdSlug: "activation/{activationId}/{issueTypeSchemeId}/{issueTypeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    issueTypeSchemeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    issueTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-type-scheme-mapping/index.ts
var JiraIssueTypeSchemeMappingAri = class _JiraIssueTypeSchemeMappingAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._issueTypeSchemeId = opts.resourceIdSegmentValues.issueTypeSchemeId, this._issueTypeId = opts.resourceIdSegmentValues.issueTypeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get issueTypeSchemeId() {
    return this._issueTypeSchemeId;
  }
  get issueTypeId() {
    return this._issueTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueTypeSchemeMappingAriStaticOpts.qualifier,
      platformQualifier: jiraIssueTypeSchemeMappingAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueTypeSchemeMappingAriStaticOpts.resourceOwner,
      resourceType: jiraIssueTypeSchemeMappingAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.issueTypeSchemeId}/${opts.issueTypeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        issueTypeSchemeId: opts.issueTypeSchemeId,
        issueTypeId: opts.issueTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueTypeSchemeMappingAriStaticOpts);
    return new _JiraIssueTypeSchemeMappingAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueTypeSchemeMappingAriStaticOpts);
    return new _JiraIssueTypeSchemeMappingAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      issueTypeSchemeId: this.issueTypeSchemeId,
      issueTypeId: this.issueTypeId
    };
  }
};

export {
  JiraIssueTypeSchemeMappingAri
};
