"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// src/virtual-agent/index.ts
var virtual_agent_exports = {};
__export(virtual_agent_exports, {
  VirtualAgentConfigurationAri: () => VirtualAgentConfigurationAri,
  VirtualAgentConversationAri: () => VirtualAgentConversationAri,
  VirtualAgentFlowEditorAri: () => VirtualAgentFlowEditorAri,
  VirtualAgentIntentProjectionAri: () => VirtualAgentIntentProjectionAri,
  VirtualAgentIntentQuestionProjectionAri: () => VirtualAgentIntentQuestionProjectionAri,
  VirtualAgentIntentRuleProjectionAri: () => VirtualAgentIntentRuleProjectionAri,
  VirtualAgentIntentTemplateAri: () => VirtualAgentIntentTemplateAri
});
module.exports = __toCommonJS(virtual_agent_exports);

// src/errors.ts
var ValidationError = class extends Error {
};

// src/core/rules/cloud-id.ts
function validateCloudId(cloudId, format = new RegExp("^[a-zA-Z0-9\\-]*$")) {
  if (!cloudId.match(format))
    throw new ValidationError(`Invalid cloud ID, expected ID of format ${format}.`);
}

// src/core/rules/platform-qualifier.ts
function validatePlatformQualifier(qualifier) {
  if (qualifier !== "cloud" && qualifier !== "third-party")
    throw new ValidationError(`Identifier must have a qualifier of 'cloud' or 'third-party'. Received: ${qualifier}`);
}

// src/core/rules/qualifier.ts
function validateAtiQualifier(qualifier) {
  if (qualifier !== "ati")
    throw new ValidationError(`ATI must have a qualifier of 'ati'. Received: ${qualifier}`);
}
function validateAriQualifier(qualifier) {
  if (qualifier !== "ari")
    throw new ValidationError(`ARI must have a qualifier of 'ari'. Received: ${qualifier}`);
}

// src/core/rules/resource-id.ts
function validateResourceId(id, format = new RegExp("[!a-zA-Z0-9\\-_.~@:{}=]+(/[!a-zA-Z0-9\\-_.~@:{}=]+)*" /* ANY_RESOURCE_ID */), key = "resourceId") {
  let formatWithCarets = new RegExp(`^${format.source}$`);
  if (!id.match(formatWithCarets))
    throw new ValidationError(`Invalid ${key} - ${id}, expected ID of format ${formatWithCarets}.`);
}

// src/core/rules/resource-id-segments.ts
function validateResourceIdSegments(resourceIdSegmentValues, resourceIdSegmentFormats) {
  Object.entries(resourceIdSegmentValues).forEach(([resourceIdKey, resourceIdValue]) => {
    validateResourceId(resourceIdValue, resourceIdSegmentFormats == null ? void 0 : resourceIdSegmentFormats[resourceIdKey], resourceIdKey);
  });
}

// src/core/rules/resource-owner.ts
function validateResourceOwner(owner, expectedResourceOwner) {
  if (expectedResourceOwner && owner !== expectedResourceOwner)
    throw new ValidationError(`Invalid resource owner - ${owner}, expected ${expectedResourceOwner}.`);
}

// src/core/rules/resource-type.ts
function validateResourceType(type, expectedResourceType) {
  if (expectedResourceType && type !== expectedResourceType)
    throw new ValidationError(`Invalid resource type - ${type}, expected ${expectedResourceType}.`);
}

// src/core/parser/base.ts
var NUMBER_OF_BASE_SEGMENTS = 5, SEGMENT_SEPARATOR = ":", BaseParser = class {
  static getIdentifierSegments(inputStr, numberOfSegmentsRequired) {
    let allSegments = inputStr.split(SEGMENT_SEPARATOR);
    if (allSegments.length < numberOfSegmentsRequired)
      throw new ValidationError(`Input string must have ${numberOfSegmentsRequired} segments.`);
    if (allSegments.length > numberOfSegmentsRequired) {
      let segments = allSegments.slice(0, NUMBER_OF_BASE_SEGMENTS - 1), segmentsForResourceId = allSegments.slice(NUMBER_OF_BASE_SEGMENTS - 1, allSegments.length);
      return [...segments, segmentsForResourceId.join(SEGMENT_SEPARATOR)];
    }
    return allSegments;
  }
};

// src/core/parser/ari.ts
var NUMBER_OF_ARI_SEGMENTS = 5, AriParser = class extends BaseParser {
  static fromString(maybeAri, ariProperties) {
    let segments = this.getIdentifierSegments(maybeAri, NUMBER_OF_ARI_SEGMENTS), [qualifier, platformQualifier, resourceOwner, cloudId, resourceTypeAndId] = segments, [resourceType, ...resourceIdSegments] = resourceTypeAndId.split("/"), maybeAriDerivedProperties = {
      qualifier,
      platformQualifier,
      cloudId,
      resourceOwner,
      resourceType,
      resourceId: resourceIdSegments.join("/"),
      resourceIdSegmentValues: ariProperties != null && ariProperties.resourceIdSlug ? this.ariSegmentValuesFromSlug(
        ariProperties.resourceIdSlug,
        resourceIdSegments.join("/"),
        Object.keys(ariProperties.resourceIdSegmentFormats)
      ) : {}
    };
    return this.fromOpts(maybeAriDerivedProperties, ariProperties);
  }
  static fromOpts(maybeAriOpts, ariProperties) {
    let {
      qualifier = "ari",
      platformQualifier = "cloud",
      resourceOwner,
      cloudId,
      resourceId,
      resourceIdSegmentValues,
      resourceType
    } = maybeAriOpts;
    return validateAriQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateCloudId(maybeAriOpts.cloudId || "", ariProperties == null ? void 0 : ariProperties.cloudId), validateResourceOwner(resourceOwner, ariProperties == null ? void 0 : ariProperties.resourceOwner), validateResourceType(resourceType, ariProperties == null ? void 0 : ariProperties.resourceType), validateResourceIdSegments(resourceIdSegmentValues, ariProperties == null ? void 0 : ariProperties.resourceIdSegmentFormats), {
      qualifier,
      resourceOwner,
      resourceType,
      platformQualifier,
      cloudId,
      resourceId,
      resourceIdSegmentValues
    };
  }
  static ariSegmentValuesFromSlug(slug, incomingSegments, expectedKeys) {
    let regexpResult = new RegExp("^" + slug.replace(/\{(.*?)\}/g, "(?<$1>.*?)") + "$").exec(incomingSegments);
    if (!regexpResult)
      throw new ValidationError(`Segment '${incomingSegments}' don't match expected slug: ${slug}`);
    return expectedKeys.forEach((expectedKey) => {
      var _a;
      if (!((_a = regexpResult.groups) != null && _a[expectedKey]))
        throw new ValidationError(`No value supplied for '${expectedKey}' based on slug ${slug}`);
    }), regexpResult.groups || {};
  }
};

// src/core/parser/ati.ts
var NUMBER_OF_ATI_SEGMENTS = 4, AtiParser = class extends BaseParser {
  static fromString(inputStr, atiOpts) {
    let segments = this.getIdentifierSegments(inputStr, NUMBER_OF_ATI_SEGMENTS), [qualifier = "ati", platformQualifier = "cloud", resourceOwner, resourceType] = segments;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), { platformQualifier, resourceOwner, resourceType };
  }
  static fromOpts(maybeAtiOpts, atiOpts) {
    let { qualifier, platformQualifier, resourceOwner, resourceType } = maybeAtiOpts;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), {
      platformQualifier,
      resourceOwner,
      resourceType
    };
  }
};

// src/ati.ts
var Ati = class _Ati {
  constructor(platformQualifier, resourceOwner, resourceType) {
    this._platformQualifier = platformQualifier, this._resourceOwner = resourceOwner, this._resourceType = resourceType;
  }
  get platformQualifier() {
    return this._platformQualifier;
  }
  get resourceOwner() {
    return this._resourceOwner;
  }
  get resourceType() {
    return this._resourceType;
  }
  static create(opts) {
    return new _Ati(opts.platformQualifier || "cloud", opts.resourceOwner, opts.resourceType);
  }
  static parse(maybeAti, atiOpts) {
    let opts = AtiParser.fromString(maybeAti, atiOpts);
    return new _Ati(opts.platformQualifier, opts.resourceOwner, opts.resourceType);
  }
  toString() {
    return `ati:${this.platformQualifier}:${this.resourceOwner}:${this.resourceType}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this._platformQualifier,
      resourceOwner: this._resourceOwner,
      resourceType: this._resourceType
    };
  }
};

// src/core/ari.ts
var Ari = class {
  constructor(opts) {
    this._ati = Ati.create({
      platformQualifier: opts.platformQualifier || "cloud",
      resourceOwner: opts.resourceOwner,
      resourceType: opts.resourceType
    }), this._cloudId = opts.cloudId !== "" ? opts.cloudId : void 0, this._resourceId = opts.resourceId;
  }
  get platformQualifier() {
    return this._ati.platformQualifier;
  }
  get cloudId() {
    return this._cloudId;
  }
  get resourceOwner() {
    return this._ati.resourceOwner;
  }
  get resourceType() {
    return this._ati.resourceType;
  }
  get resourceId() {
    return this._resourceId;
  }
  get ati() {
    return this._ati;
  }
  equals(other) {
    return this.toString() === other.toString();
  }
  toString() {
    return `ari:${this.platformQualifier}:${this.resourceOwner}:${this.cloudId || ""}:${this.resourceType}/${this.resourceId}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this.platformQualifier,
      resourceOwner: this.resourceOwner,
      cloudId: this.cloudId,
      resourceType: this.resourceType,
      resourceId: this.resourceId
    };
  }
};

// src/any-ari.ts
var AnyAri = class _AnyAri extends Ari {
  constructor(opts) {
    super(opts);
  }
  static create(ariOpts, ariStaticOpts) {
    let ariOptsWithDefaults = { ...ariOpts, resourceIdSegmentValues: {} }, validatedOpts = AriParser.fromOpts(ariOptsWithDefaults, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static parse(maybeAri, ariStaticOpts) {
    let validatedOpts = AriParser.fromString(maybeAri, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static check(maybeAri) {
    try {
      return _AnyAri.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return this;
  }
};

// src/core/registered-ari.ts
var RegisteredAri = class extends Ari {
  static check(maybeAri) {
    try {
      return this.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return AnyAri.parse(this.toString());
  }
};

// src/virtual-agent/configuration/types.ts
var VirtualAgentConfigurationAriResourceOwner = "virtual-agent", VirtualAgentConfigurationAriResourceType = "configuration";

// src/virtual-agent/configuration/manifest.ts
var virtualAgentConfigurationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentConfigurationAriResourceOwner,
  resourceType: VirtualAgentConfigurationAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/configuration/index.ts
var VirtualAgentConfigurationAri = class _VirtualAgentConfigurationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentConfigurationAriStaticOpts.qualifier,
      platformQualifier: virtualAgentConfigurationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentConfigurationAriStaticOpts.resourceOwner,
      resourceType: virtualAgentConfigurationAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentConfigurationAriStaticOpts);
    return new _VirtualAgentConfigurationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentConfigurationAriStaticOpts);
    return new _VirtualAgentConfigurationAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId
    };
  }
};

// src/virtual-agent/conversation/types.ts
var VirtualAgentConversationAriResourceOwner = "virtual-agent", VirtualAgentConversationAriResourceType = "conversation";

// src/virtual-agent/conversation/manifest.ts
var virtualAgentConversationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentConversationAriResourceOwner,
  resourceType: VirtualAgentConversationAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{conversationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    conversationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/conversation/index.ts
var VirtualAgentConversationAri = class _VirtualAgentConversationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._conversationId = opts.resourceIdSegmentValues.conversationId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get conversationId() {
    return this._conversationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentConversationAriStaticOpts.qualifier,
      platformQualifier: virtualAgentConversationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentConversationAriStaticOpts.resourceOwner,
      resourceType: virtualAgentConversationAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.conversationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        conversationId: opts.conversationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentConversationAriStaticOpts);
    return new _VirtualAgentConversationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentConversationAriStaticOpts);
    return new _VirtualAgentConversationAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      conversationId: this.conversationId
    };
  }
};

// src/virtual-agent/flow-editor/types.ts
var VirtualAgentFlowEditorAriResourceOwner = "virtual-agent", VirtualAgentFlowEditorAriResourceType = "flow-editor";

// src/virtual-agent/flow-editor/manifest.ts
var virtualAgentFlowEditorAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentFlowEditorAriResourceOwner,
  resourceType: VirtualAgentFlowEditorAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{flowEditorId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    flowEditorId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/flow-editor/index.ts
var VirtualAgentFlowEditorAri = class _VirtualAgentFlowEditorAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._flowEditorId = opts.resourceIdSegmentValues.flowEditorId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get flowEditorId() {
    return this._flowEditorId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentFlowEditorAriStaticOpts.qualifier,
      platformQualifier: virtualAgentFlowEditorAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentFlowEditorAriStaticOpts.resourceOwner,
      resourceType: virtualAgentFlowEditorAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.flowEditorId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        flowEditorId: opts.flowEditorId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentFlowEditorAriStaticOpts);
    return new _VirtualAgentFlowEditorAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentFlowEditorAriStaticOpts);
    return new _VirtualAgentFlowEditorAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      flowEditorId: this.flowEditorId
    };
  }
};

// src/virtual-agent/intent-projection/types.ts
var VirtualAgentIntentProjectionAriResourceOwner = "virtual-agent", VirtualAgentIntentProjectionAriResourceType = "intent-projection";

// src/virtual-agent/intent-projection/manifest.ts
var virtualAgentIntentProjectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentIntentProjectionAriResourceOwner,
  resourceType: VirtualAgentIntentProjectionAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{intentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    intentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-projection/index.ts
var VirtualAgentIntentProjectionAri = class _VirtualAgentIntentProjectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._intentId = opts.resourceIdSegmentValues.intentId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get intentId() {
    return this._intentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentProjectionAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentProjectionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentProjectionAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentProjectionAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.intentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        intentId: opts.intentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentProjectionAriStaticOpts);
    return new _VirtualAgentIntentProjectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentProjectionAriStaticOpts);
    return new _VirtualAgentIntentProjectionAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      intentId: this.intentId
    };
  }
};

// src/virtual-agent/intent-question-projection/types.ts
var VirtualAgentIntentQuestionProjectionAriResourceOwner = "virtual-agent", VirtualAgentIntentQuestionProjectionAriResourceType = "intent-question-projection";

// src/virtual-agent/intent-question-projection/manifest.ts
var virtualAgentIntentQuestionProjectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentIntentQuestionProjectionAriResourceOwner,
  resourceType: VirtualAgentIntentQuestionProjectionAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{intentQuestionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    intentQuestionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-question-projection/index.ts
var VirtualAgentIntentQuestionProjectionAri = class _VirtualAgentIntentQuestionProjectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._intentQuestionId = opts.resourceIdSegmentValues.intentQuestionId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get intentQuestionId() {
    return this._intentQuestionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentQuestionProjectionAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentQuestionProjectionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentQuestionProjectionAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentQuestionProjectionAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.intentQuestionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        intentQuestionId: opts.intentQuestionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentQuestionProjectionAriStaticOpts);
    return new _VirtualAgentIntentQuestionProjectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentQuestionProjectionAriStaticOpts);
    return new _VirtualAgentIntentQuestionProjectionAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      intentQuestionId: this.intentQuestionId
    };
  }
};

// src/virtual-agent/intent-rule-projection/types.ts
var VirtualAgentIntentRuleProjectionAriResourceOwner = "virtual-agent", VirtualAgentIntentRuleProjectionAriResourceType = "intent-rule-projection";

// src/virtual-agent/intent-rule-projection/manifest.ts
var virtualAgentIntentRuleProjectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentIntentRuleProjectionAriResourceOwner,
  resourceType: VirtualAgentIntentRuleProjectionAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{intentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    intentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-rule-projection/index.ts
var VirtualAgentIntentRuleProjectionAri = class _VirtualAgentIntentRuleProjectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._intentId = opts.resourceIdSegmentValues.intentId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get intentId() {
    return this._intentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentRuleProjectionAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentRuleProjectionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentRuleProjectionAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentRuleProjectionAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.intentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        intentId: opts.intentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentRuleProjectionAriStaticOpts);
    return new _VirtualAgentIntentRuleProjectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentRuleProjectionAriStaticOpts);
    return new _VirtualAgentIntentRuleProjectionAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      intentId: this.intentId
    };
  }
};

// src/virtual-agent/intent-template/types.ts
var VirtualAgentIntentTemplateAriResourceOwner = "virtual-agent", VirtualAgentIntentTemplateAriResourceType = "intent-template";

// src/virtual-agent/intent-template/manifest.ts
var virtualAgentIntentTemplateAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentIntentTemplateAriResourceOwner,
  resourceType: VirtualAgentIntentTemplateAriResourceType,
  resourceIdSlug: "{activationId}/{intentTemplateId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    intentTemplateId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-template/index.ts
var VirtualAgentIntentTemplateAri = class _VirtualAgentIntentTemplateAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._intentTemplateId = opts.resourceIdSegmentValues.intentTemplateId;
  }
  get activationId() {
    return this._activationId;
  }
  get intentTemplateId() {
    return this._intentTemplateId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentTemplateAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentTemplateAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentTemplateAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentTemplateAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.intentTemplateId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        intentTemplateId: opts.intentTemplateId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentTemplateAriStaticOpts);
    return new _VirtualAgentIntentTemplateAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentTemplateAriStaticOpts);
    return new _VirtualAgentIntentTemplateAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      intentTemplateId: this.intentTemplateId
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  VirtualAgentConfigurationAri,
  VirtualAgentConversationAri,
  VirtualAgentFlowEditorAri,
  VirtualAgentIntentProjectionAri,
  VirtualAgentIntentQuestionProjectionAri,
  VirtualAgentIntentRuleProjectionAri,
  VirtualAgentIntentTemplateAri
});
