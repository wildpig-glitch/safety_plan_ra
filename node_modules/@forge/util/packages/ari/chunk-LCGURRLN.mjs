import {
  CanvasDatabaseAriResourceOwner,
  CanvasDatabaseAriResourceType
} from "./chunk-LRE2PRU7.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/canvas/database/manifest.ts
var canvasDatabaseAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CanvasDatabaseAriResourceOwner,
  resourceType: CanvasDatabaseAriResourceType,
  resourceIdSlug: "{databaseId}",
  resourceIdSegmentFormats: {
    databaseId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/canvas/database/index.ts
var CanvasDatabaseAri = class _CanvasDatabaseAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._databaseId = opts.resourceIdSegmentValues.databaseId;
  }
  get siteId() {
    return this._siteId;
  }
  get databaseId() {
    return this._databaseId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: canvasDatabaseAriStaticOpts.qualifier,
      platformQualifier: canvasDatabaseAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: canvasDatabaseAriStaticOpts.resourceOwner,
      resourceType: canvasDatabaseAriStaticOpts.resourceType,
      resourceId: `${opts.databaseId}`,
      resourceIdSegmentValues: {
        databaseId: opts.databaseId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, canvasDatabaseAriStaticOpts);
    return new _CanvasDatabaseAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, canvasDatabaseAriStaticOpts);
    return new _CanvasDatabaseAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      databaseId: this.databaseId
    };
  }
};

export {
  CanvasDatabaseAri
};
