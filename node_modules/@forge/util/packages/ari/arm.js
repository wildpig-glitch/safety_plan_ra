"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// src/arm.ts
var arm_exports = {};
__export(arm_exports, {
  Arm: () => Arm
});
module.exports = __toCommonJS(arm_exports);

// src/errors.ts
var ValidationError = class extends Error {
};

// src/core/rules/platform-qualifier.ts
function validatePlatformQualifier(qualifier) {
  if (qualifier !== "cloud" && qualifier !== "third-party")
    throw new ValidationError(`Identifier must have a qualifier of 'cloud' or 'third-party'. Received: ${qualifier}`);
}

// src/core/rules/qualifier.ts
function validateArmQualifier(qualifier) {
  if (qualifier !== "arm")
    throw new ValidationError(`ARM must have a qualifier of 'arm'. Received: ${qualifier}`);
}

// src/core/rules/resource-matcher.ts
function validateNullableResourceMatcher(maybeMatcher) {
  maybeMatcher.length !== 0 && validateMatcher(maybeMatcher);
}
function validateResourceMatcher(maybeMatcher) {
  if (!maybeMatcher)
    throw Error("Matcher must be defined");
  validateMatcher(maybeMatcher);
}
function validateMatcher(maybeMatcher) {
  try {
    new RegExp(maybeMatcher);
  } catch (e) {
    throw Error("Invalid matcher sequence");
  }
}

// src/core/parser/base.ts
var NUMBER_OF_BASE_SEGMENTS = 5, SEGMENT_SEPARATOR = ":", BaseParser = class {
  static getIdentifierSegments(inputStr, numberOfSegmentsRequired) {
    let allSegments = inputStr.split(SEGMENT_SEPARATOR);
    if (allSegments.length < numberOfSegmentsRequired)
      throw new ValidationError(`Input string must have ${numberOfSegmentsRequired} segments.`);
    if (allSegments.length > numberOfSegmentsRequired) {
      let segments = allSegments.slice(0, NUMBER_OF_BASE_SEGMENTS - 1), segmentsForResourceId = allSegments.slice(NUMBER_OF_BASE_SEGMENTS - 1, allSegments.length);
      return [...segments, segmentsForResourceId.join(SEGMENT_SEPARATOR)];
    }
    return allSegments;
  }
};

// src/core/parser/arm.ts
var NUMBER_OF_ARM_SEGMENTS = 5, ArmParser = class extends BaseParser {
  static fromString(maybeArm) {
    let segments = this.getIdentifierSegments(maybeArm, NUMBER_OF_ARM_SEGMENTS), [qualifier, platformQualifier, resourceOwnerMatcher, cloudIdMatcher, resourceTypeAndIdMatchers] = segments, [resourceTypeMatcher, resourceIdMatcher] = resourceTypeAndIdMatchers.split("/"), maybeArmOpts = {
      qualifier,
      platformQualifier,
      cloudIdMatcher,
      resourceOwnerMatcher,
      resourceTypeMatcher,
      resourceIdMatcher
    };
    return this.fromOpts(maybeArmOpts);
  }
  static fromOpts(maybeArmOpts) {
    let {
      qualifier = "arm",
      platformQualifier = "cloud",
      cloudIdMatcher,
      resourceOwnerMatcher,
      resourceTypeMatcher,
      resourceIdMatcher
    } = maybeArmOpts;
    return validateArmQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateNullableResourceMatcher(cloudIdMatcher), validateResourceMatcher(resourceOwnerMatcher), validateResourceMatcher(resourceTypeMatcher), validateResourceMatcher(resourceIdMatcher), {
      platformQualifier,
      cloudIdMatcher,
      resourceOwnerMatcher,
      resourceTypeMatcher,
      resourceIdMatcher
    };
  }
};

// src/arm.ts
var Arm = class _Arm {
  static create(armOpts) {
    let opts = ArmParser.fromOpts({
      ...armOpts,
      qualifier: "arm",
      platformQualifier: armOpts.platformQualifier || "cloud",
      cloudIdMatcher: armOpts.cloudIdMatcher
    });
    return new _Arm(opts);
  }
  static parse(maybeArm) {
    let opts = ArmParser.fromString(maybeArm);
    return new _Arm(opts);
  }
  constructor(opts) {
    this._platformQualifier = opts.platformQualifier, this._cloudIdMatcher = opts.cloudIdMatcher, this._resourceOwnerMatcher = opts.resourceOwnerMatcher, this._resourceTypeMatcher = opts.resourceTypeMatcher, this._resourceIdMatcher = opts.resourceIdMatcher;
  }
  get platformQualifier() {
    return this._platformQualifier;
  }
  get cloudIdMatcher() {
    return this._cloudIdMatcher;
  }
  get resourceOwnerMatcher() {
    return this._resourceOwnerMatcher;
  }
  get resourceTypeMatcher() {
    return this._resourceTypeMatcher;
  }
  get resourceIdMatcher() {
    return this._resourceIdMatcher;
  }
  match(ari) {
    var _a, _b;
    let cloudId = (_a = ari.cloudId) != null ? _a : "", resourceOwner = ari.resourceOwner, resourceType = ari.resourceType, resourceId = ari.resourceId;
    return !(!new RegExp((_b = this.cloudIdMatcher) != null ? _b : "").test(cloudId) || !new RegExp(this.resourceOwnerMatcher).test(resourceOwner) || !new RegExp(this.resourceTypeMatcher).test(resourceType) || !new RegExp(this.resourceIdMatcher).test(resourceId));
  }
  equals(other) {
    return this.toString() === other.toString();
  }
  toString() {
    let {
      platformQualifier,
      resourceOwnerMatcher,
      cloudIdMatcher = "",
      resourceTypeMatcher,
      resourceIdMatcher
    } = this;
    return `arm:${platformQualifier}:${resourceOwnerMatcher}:${cloudIdMatcher}:${resourceTypeMatcher}/${resourceIdMatcher}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this.platformQualifier,
      cloudIdMatcher: this.cloudIdMatcher,
      resourceOwnerMatcher: this.resourceOwnerMatcher,
      resourceTypeMatcher: this.resourceTypeMatcher,
      resourceIdMatcher: this.resourceIdMatcher
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Arm
});
