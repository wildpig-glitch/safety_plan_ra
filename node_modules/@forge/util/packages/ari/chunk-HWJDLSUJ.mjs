import {
  LinkingPlatformDatasourceAriResourceOwner,
  LinkingPlatformDatasourceAriResourceType
} from "./chunk-ARLPVCER.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/linking-platform/datasource/manifest.ts
var linkingPlatformDatasourceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: LinkingPlatformDatasourceAriResourceOwner,
  resourceType: LinkingPlatformDatasourceAriResourceType,
  resourceIdSlug: "{datasourceId}",
  resourceIdSegmentFormats: {
    datasourceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/linking-platform/datasource/index.ts
var LinkingPlatformDatasourceAri = class _LinkingPlatformDatasourceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._datasourceId = opts.resourceIdSegmentValues.datasourceId;
  }
  get datasourceId() {
    return this._datasourceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: linkingPlatformDatasourceAriStaticOpts.qualifier,
      platformQualifier: linkingPlatformDatasourceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: linkingPlatformDatasourceAriStaticOpts.resourceOwner,
      resourceType: linkingPlatformDatasourceAriStaticOpts.resourceType,
      resourceId: `${opts.datasourceId}`,
      resourceIdSegmentValues: {
        datasourceId: opts.datasourceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, linkingPlatformDatasourceAriStaticOpts);
    return new _LinkingPlatformDatasourceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, linkingPlatformDatasourceAriStaticOpts);
    return new _LinkingPlatformDatasourceAri(opts);
  }
  getVariables() {
    return {
      datasourceId: this.datasourceId
    };
  }
};

export {
  LinkingPlatformDatasourceAri
};
