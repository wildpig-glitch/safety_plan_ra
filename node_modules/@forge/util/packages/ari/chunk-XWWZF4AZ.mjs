import {
  VirtualAgentIntentQuestionProjectionAriResourceOwner,
  VirtualAgentIntentQuestionProjectionAriResourceType
} from "./chunk-FRZCZ4T6.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/virtual-agent/intent-question-projection/manifest.ts
var virtualAgentIntentQuestionProjectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentIntentQuestionProjectionAriResourceOwner,
  resourceType: VirtualAgentIntentQuestionProjectionAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{intentQuestionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    intentQuestionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-question-projection/index.ts
var VirtualAgentIntentQuestionProjectionAri = class _VirtualAgentIntentQuestionProjectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._intentQuestionId = opts.resourceIdSegmentValues.intentQuestionId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get intentQuestionId() {
    return this._intentQuestionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentQuestionProjectionAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentQuestionProjectionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentQuestionProjectionAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentQuestionProjectionAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.intentQuestionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        intentQuestionId: opts.intentQuestionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentQuestionProjectionAriStaticOpts);
    return new _VirtualAgentIntentQuestionProjectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentQuestionProjectionAriStaticOpts);
    return new _VirtualAgentIntentQuestionProjectionAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      intentQuestionId: this.intentQuestionId
    };
  }
};

export {
  VirtualAgentIntentQuestionProjectionAri
};
