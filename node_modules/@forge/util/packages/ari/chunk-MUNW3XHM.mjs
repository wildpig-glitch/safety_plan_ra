import {
  JiraNotificationUserPreferenceAriResourceOwner,
  JiraNotificationUserPreferenceAriResourceType
} from "./chunk-RYGO66NC.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/notification-user-preference/manifest.ts
var jiraNotificationUserPreferenceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraNotificationUserPreferenceAriResourceOwner,
  resourceType: JiraNotificationUserPreferenceAriResourceType,
  resourceIdSlug: "activation/{activationId}/{notificationUserPreferenceId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    notificationUserPreferenceId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/notification-user-preference/index.ts
var JiraNotificationUserPreferenceAri = class _JiraNotificationUserPreferenceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._notificationUserPreferenceId = opts.resourceIdSegmentValues.notificationUserPreferenceId;
  }
  get activationId() {
    return this._activationId;
  }
  get notificationUserPreferenceId() {
    return this._notificationUserPreferenceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraNotificationUserPreferenceAriStaticOpts.qualifier,
      platformQualifier: jiraNotificationUserPreferenceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraNotificationUserPreferenceAriStaticOpts.resourceOwner,
      resourceType: jiraNotificationUserPreferenceAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.notificationUserPreferenceId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        notificationUserPreferenceId: opts.notificationUserPreferenceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraNotificationUserPreferenceAriStaticOpts);
    return new _JiraNotificationUserPreferenceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraNotificationUserPreferenceAriStaticOpts);
    return new _JiraNotificationUserPreferenceAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      notificationUserPreferenceId: this.notificationUserPreferenceId
    };
  }
};

export {
  JiraNotificationUserPreferenceAri
};
