import {
  MediaFileAriResourceOwner,
  MediaFileAriResourceType
} from "./chunk-D3IDOZFP.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/media/file/manifest.ts
var mediaFileAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MediaFileAriResourceOwner,
  resourceType: MediaFileAriResourceType,
  resourceIdSlug: "{fileId}",
  resourceIdSegmentFormats: {
    fileId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/media/file/index.ts
var MediaFileAri = class _MediaFileAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._fileId = opts.resourceIdSegmentValues.fileId;
  }
  get fileId() {
    return this._fileId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mediaFileAriStaticOpts.qualifier,
      platformQualifier: mediaFileAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: mediaFileAriStaticOpts.resourceOwner,
      resourceType: mediaFileAriStaticOpts.resourceType,
      resourceId: `${opts.fileId}`,
      resourceIdSegmentValues: {
        fileId: opts.fileId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mediaFileAriStaticOpts);
    return new _MediaFileAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mediaFileAriStaticOpts);
    return new _MediaFileAri(opts);
  }
  getVariables() {
    return {
      fileId: this.fileId
    };
  }
};

export {
  MediaFileAri
};
