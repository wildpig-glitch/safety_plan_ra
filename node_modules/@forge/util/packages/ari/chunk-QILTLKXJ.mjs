import {
  IdentityThirdPartyUserAriResourceOwner,
  IdentityThirdPartyUserAriResourceType
} from "./chunk-4VINCT53.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/identity/third-party-user/manifest.ts
var identityThirdPartyUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityThirdPartyUserAriResourceOwner,
  resourceType: IdentityThirdPartyUserAriResourceType,
  resourceIdSlug: "{directoryId}/{userId}",
  resourceIdSegmentFormats: {
    directoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    userId: /[a-zA-Z0-9_\-\:]{1,128}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/third-party-user/index.ts
var IdentityThirdPartyUserAri = class _IdentityThirdPartyUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._directoryId = opts.resourceIdSegmentValues.directoryId, this._userId = opts.resourceIdSegmentValues.userId;
  }
  get directoryId() {
    return this._directoryId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityThirdPartyUserAriStaticOpts.qualifier,
      platformQualifier: identityThirdPartyUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityThirdPartyUserAriStaticOpts.resourceOwner,
      resourceType: identityThirdPartyUserAriStaticOpts.resourceType,
      resourceId: `${opts.directoryId}/${opts.userId}`,
      resourceIdSegmentValues: {
        directoryId: opts.directoryId,
        userId: opts.userId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityThirdPartyUserAriStaticOpts);
    return new _IdentityThirdPartyUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityThirdPartyUserAriStaticOpts);
    return new _IdentityThirdPartyUserAri(opts);
  }
  getVariables() {
    return {
      directoryId: this.directoryId,
      userId: this.userId
    };
  }
};

export {
  IdentityThirdPartyUserAri
};
