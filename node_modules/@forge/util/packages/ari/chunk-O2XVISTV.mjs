import {
  CmdbAttributeAriResourceOwner,
  CmdbAttributeAriResourceType
} from "./chunk-XAMITGNQ.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/cmdb/attribute/manifest.ts
var cmdbAttributeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbAttributeAriResourceOwner,
  resourceType: CmdbAttributeAriResourceType,
  resourceIdSlug: "{workspaceId}/{attributeId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    attributeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/attribute/index.ts
var CmdbAttributeAri = class _CmdbAttributeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._attributeId = opts.resourceIdSegmentValues.attributeId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get attributeId() {
    return this._attributeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbAttributeAriStaticOpts.qualifier,
      platformQualifier: cmdbAttributeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbAttributeAriStaticOpts.resourceOwner,
      resourceType: cmdbAttributeAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.attributeId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        attributeId: opts.attributeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbAttributeAriStaticOpts);
    return new _CmdbAttributeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbAttributeAriStaticOpts);
    return new _CmdbAttributeAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      attributeId: this.attributeId
    };
  }
};

export {
  CmdbAttributeAri
};
