import {
  DevopsToolAriResourceOwner,
  DevopsToolAriResourceType
} from "./chunk-WECRO6DG.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/devops/tool/manifest.ts
var devopsToolAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: DevopsToolAriResourceOwner,
  resourceType: DevopsToolAriResourceType,
  resourceIdSlug: "{toolId}",
  resourceIdSegmentFormats: {
    toolId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/devops/tool/index.ts
var DevopsToolAri = class _DevopsToolAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._toolId = opts.resourceIdSegmentValues.toolId;
  }
  get siteId() {
    return this._siteId;
  }
  get toolId() {
    return this._toolId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: devopsToolAriStaticOpts.qualifier,
      platformQualifier: devopsToolAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: devopsToolAriStaticOpts.resourceOwner,
      resourceType: devopsToolAriStaticOpts.resourceType,
      resourceId: `${opts.toolId}`,
      resourceIdSegmentValues: {
        toolId: opts.toolId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, devopsToolAriStaticOpts);
    return new _DevopsToolAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, devopsToolAriStaticOpts);
    return new _DevopsToolAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      toolId: this.toolId
    };
  }
};

export {
  DevopsToolAri
};
