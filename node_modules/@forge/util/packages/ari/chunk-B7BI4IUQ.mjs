import {
  ApprovalDeskRoleAriResourceOwner,
  ApprovalDeskRoleAriResourceType
} from "./chunk-OQIMDPGX.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/approval-desk/role/manifest.ts
var approvalDeskRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ApprovalDeskRoleAriResourceOwner,
  resourceType: ApprovalDeskRoleAriResourceType,
  resourceIdSlug: "{scope}/{roleId}",
  resourceIdSegmentFormats: {
    scope: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/approval-desk/role/index.ts
var ApprovalDeskRoleAri = class _ApprovalDeskRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._scope = opts.resourceIdSegmentValues.scope, this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get scope() {
    return this._scope;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: approvalDeskRoleAriStaticOpts.qualifier,
      platformQualifier: approvalDeskRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: approvalDeskRoleAriStaticOpts.resourceOwner,
      resourceType: approvalDeskRoleAriStaticOpts.resourceType,
      resourceId: `${opts.scope}/${opts.roleId}`,
      resourceIdSegmentValues: {
        scope: opts.scope,
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, approvalDeskRoleAriStaticOpts);
    return new _ApprovalDeskRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, approvalDeskRoleAriStaticOpts);
    return new _ApprovalDeskRoleAri(opts);
  }
  getVariables() {
    return {
      scope: this.scope,
      roleId: this.roleId
    };
  }
};

export {
  ApprovalDeskRoleAri
};
