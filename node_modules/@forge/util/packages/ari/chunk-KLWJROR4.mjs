import {
  BitbucketTeamAriResourceOwner,
  BitbucketTeamAriResourceType
} from "./chunk-O3ROTQWU.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/bitbucket/team/manifest.ts
var bitbucketTeamAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketTeamAriResourceOwner,
  resourceType: BitbucketTeamAriResourceType,
  resourceIdSlug: "{teamId}",
  resourceIdSegmentFormats: {
    teamId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/team/index.ts
var BitbucketTeamAri = class _BitbucketTeamAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._teamId = opts.resourceIdSegmentValues.teamId;
  }
  get teamId() {
    return this._teamId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketTeamAriStaticOpts.qualifier,
      platformQualifier: bitbucketTeamAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketTeamAriStaticOpts.resourceOwner,
      resourceType: bitbucketTeamAriStaticOpts.resourceType,
      resourceId: `${opts.teamId}`,
      resourceIdSegmentValues: {
        teamId: opts.teamId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketTeamAriStaticOpts);
    return new _BitbucketTeamAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketTeamAriStaticOpts);
    return new _BitbucketTeamAri(opts);
  }
  getVariables() {
    return {
      teamId: this.teamId
    };
  }
};

export {
  BitbucketTeamAri
};
