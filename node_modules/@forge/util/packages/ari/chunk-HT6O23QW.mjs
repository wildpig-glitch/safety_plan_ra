import {
  JiraPlanCrossProjectScenarioVersionAriResourceOwner,
  JiraPlanCrossProjectScenarioVersionAriResourceType
} from "./chunk-JU34D5ZO.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/plan-cross-project-scenario-version/manifest.ts
var jiraPlanCrossProjectScenarioVersionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPlanCrossProjectScenarioVersionAriResourceOwner,
  resourceType: JiraPlanCrossProjectScenarioVersionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{crossProjectScenarioVersionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    crossProjectScenarioVersionId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/plan-cross-project-scenario-version/index.ts
var JiraPlanCrossProjectScenarioVersionAri = class _JiraPlanCrossProjectScenarioVersionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._crossProjectScenarioVersionId = opts.resourceIdSegmentValues.crossProjectScenarioVersionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get crossProjectScenarioVersionId() {
    return this._crossProjectScenarioVersionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPlanCrossProjectScenarioVersionAriStaticOpts.qualifier,
      platformQualifier: jiraPlanCrossProjectScenarioVersionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPlanCrossProjectScenarioVersionAriStaticOpts.resourceOwner,
      resourceType: jiraPlanCrossProjectScenarioVersionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.crossProjectScenarioVersionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        crossProjectScenarioVersionId: opts.crossProjectScenarioVersionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPlanCrossProjectScenarioVersionAriStaticOpts);
    return new _JiraPlanCrossProjectScenarioVersionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPlanCrossProjectScenarioVersionAriStaticOpts);
    return new _JiraPlanCrossProjectScenarioVersionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      crossProjectScenarioVersionId: this.crossProjectScenarioVersionId
    };
  }
};

export {
  JiraPlanCrossProjectScenarioVersionAri
};
