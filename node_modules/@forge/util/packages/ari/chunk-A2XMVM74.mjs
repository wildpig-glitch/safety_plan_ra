import {
  JiraSoftwareViewConfigAriResourceOwner,
  JiraSoftwareViewConfigAriResourceType
} from "./chunk-ZOFOPGOV.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira-software/view-config/manifest.ts
var jiraSoftwareViewConfigAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareViewConfigAriResourceOwner,
  resourceType: JiraSoftwareViewConfigAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{viewType}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    viewType: /(board|backlog|timeline)/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/view-config/index.ts
var JiraSoftwareViewConfigAri = class _JiraSoftwareViewConfigAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._viewType = opts.resourceIdSegmentValues.viewType;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get viewType() {
    return this._viewType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareViewConfigAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareViewConfigAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareViewConfigAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareViewConfigAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.viewType}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        viewType: opts.viewType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareViewConfigAriStaticOpts);
    return new _JiraSoftwareViewConfigAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareViewConfigAriStaticOpts);
    return new _JiraSoftwareViewConfigAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      viewType: this.viewType
    };
  }
};

export {
  JiraSoftwareViewConfigAri
};
