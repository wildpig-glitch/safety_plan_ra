import {
  JiraServicedeskCalendarEventAriResourceOwner,
  JiraServicedeskCalendarEventAriResourceType
} from "./chunk-SMZUBZEM.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira-servicedesk/calendar-event/manifest.ts
var jiraServicedeskCalendarEventAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskCalendarEventAriResourceOwner,
  resourceType: JiraServicedeskCalendarEventAriResourceType,
  resourceIdSlug: "activation/{activationId}/{calendarEventId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    calendarEventId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/calendar-event/index.ts
var JiraServicedeskCalendarEventAri = class _JiraServicedeskCalendarEventAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._calendarEventId = opts.resourceIdSegmentValues.calendarEventId;
  }
  get activationId() {
    return this._activationId;
  }
  get calendarEventId() {
    return this._calendarEventId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskCalendarEventAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskCalendarEventAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskCalendarEventAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskCalendarEventAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.calendarEventId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        calendarEventId: opts.calendarEventId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskCalendarEventAriStaticOpts);
    return new _JiraServicedeskCalendarEventAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskCalendarEventAriStaticOpts);
    return new _JiraServicedeskCalendarEventAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      calendarEventId: this.calendarEventId
    };
  }
};

export {
  JiraServicedeskCalendarEventAri
};
