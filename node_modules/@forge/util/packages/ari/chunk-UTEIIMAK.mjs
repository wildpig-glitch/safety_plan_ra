import {
  JiraWorkflowSchemeAriResourceOwner,
  JiraWorkflowSchemeAriResourceType
} from "./chunk-GF5WTUWI.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/workflow-scheme/manifest.ts
var jiraWorkflowSchemeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraWorkflowSchemeAriResourceOwner,
  resourceType: JiraWorkflowSchemeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{workflowSchemeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    workflowSchemeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/workflow-scheme/index.ts
var JiraWorkflowSchemeAri = class _JiraWorkflowSchemeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._workflowSchemeId = opts.resourceIdSegmentValues.workflowSchemeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get workflowSchemeId() {
    return this._workflowSchemeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraWorkflowSchemeAriStaticOpts.qualifier,
      platformQualifier: jiraWorkflowSchemeAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraWorkflowSchemeAriStaticOpts.resourceOwner,
      resourceType: jiraWorkflowSchemeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.workflowSchemeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        workflowSchemeId: opts.workflowSchemeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraWorkflowSchemeAriStaticOpts);
    return new _JiraWorkflowSchemeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraWorkflowSchemeAriStaticOpts);
    return new _JiraWorkflowSchemeAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      workflowSchemeId: this.workflowSchemeId
    };
  }
};

export {
  JiraWorkflowSchemeAri
};
