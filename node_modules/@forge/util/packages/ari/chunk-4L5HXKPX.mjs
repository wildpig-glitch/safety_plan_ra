import {
  AutomationRuleAriResourceOwner,
  AutomationRuleAriResourceType
} from "./chunk-U7AZ64SA.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/automation/rule/manifest.ts
var automationRuleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AutomationRuleAriResourceOwner,
  resourceType: AutomationRuleAriResourceType,
  resourceIdSlug: "{ruleId}",
  resourceIdSegmentFormats: {
    ruleId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/automation/rule/index.ts
var AutomationRuleAri = class _AutomationRuleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._ruleId = opts.resourceIdSegmentValues.ruleId;
  }
  get ruleId() {
    return this._ruleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: automationRuleAriStaticOpts.qualifier,
      platformQualifier: automationRuleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: automationRuleAriStaticOpts.resourceOwner,
      resourceType: automationRuleAriStaticOpts.resourceType,
      resourceId: `${opts.ruleId}`,
      resourceIdSegmentValues: {
        ruleId: opts.ruleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, automationRuleAriStaticOpts);
    return new _AutomationRuleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, automationRuleAriStaticOpts);
    return new _AutomationRuleAri(opts);
  }
  getVariables() {
    return {
      ruleId: this.ruleId
    };
  }
};

export {
  AutomationRuleAri
};
