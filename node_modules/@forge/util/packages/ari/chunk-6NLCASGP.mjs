import {
  TrelloListAriResourceOwner,
  TrelloListAriResourceType
} from "./chunk-TVSKQH7F.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/trello/list/manifest.ts
var trelloListAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloListAriResourceOwner,
  resourceType: TrelloListAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{listId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    listId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/list/index.ts
var TrelloListAri = class _TrelloListAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._listId = opts.resourceIdSegmentValues.listId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get listId() {
    return this._listId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloListAriStaticOpts.qualifier,
      platformQualifier: trelloListAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloListAriStaticOpts.resourceOwner,
      resourceType: trelloListAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.listId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        listId: opts.listId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloListAriStaticOpts);
    return new _TrelloListAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloListAriStaticOpts);
    return new _TrelloListAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      listId: this.listId
    };
  }
};

export {
  TrelloListAri
};
