import {
  JiraVersionApproverAriResourceOwner,
  JiraVersionApproverAriResourceType
} from "./chunk-CLH2DEO3.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/version-approver/manifest.ts
var jiraVersionApproverAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraVersionApproverAriResourceOwner,
  resourceType: JiraVersionApproverAriResourceType,
  resourceIdSlug: "activation/{activationId}/{versionId}/{approverId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    versionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    approverId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/version-approver/index.ts
var JiraVersionApproverAri = class _JiraVersionApproverAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._versionId = opts.resourceIdSegmentValues.versionId, this._approverId = opts.resourceIdSegmentValues.approverId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get versionId() {
    return this._versionId;
  }
  get approverId() {
    return this._approverId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraVersionApproverAriStaticOpts.qualifier,
      platformQualifier: jiraVersionApproverAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraVersionApproverAriStaticOpts.resourceOwner,
      resourceType: jiraVersionApproverAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.versionId}/${opts.approverId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        versionId: opts.versionId,
        approverId: opts.approverId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraVersionApproverAriStaticOpts);
    return new _JiraVersionApproverAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraVersionApproverAriStaticOpts);
    return new _JiraVersionApproverAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      versionId: this.versionId,
      approverId: this.approverId
    };
  }
};

export {
  JiraVersionApproverAri
};
