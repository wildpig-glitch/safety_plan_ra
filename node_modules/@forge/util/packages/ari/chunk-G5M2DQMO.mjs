import {
  HelpHelpDeskAriResourceOwner,
  HelpHelpDeskAriResourceType
} from "./chunk-EQROJBZ3.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/help/help-desk/manifest.ts
var helpHelpDeskAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: HelpHelpDeskAriResourceOwner,
  resourceType: HelpHelpDeskAriResourceType,
  resourceIdSlug: "{activationId}/{helpDeskId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    helpDeskId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/help/help-desk/index.ts
var HelpHelpDeskAri = class _HelpHelpDeskAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._helpDeskId = opts.resourceIdSegmentValues.helpDeskId;
  }
  get activationId() {
    return this._activationId;
  }
  get helpDeskId() {
    return this._helpDeskId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: helpHelpDeskAriStaticOpts.qualifier,
      platformQualifier: helpHelpDeskAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: helpHelpDeskAriStaticOpts.resourceOwner,
      resourceType: helpHelpDeskAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.helpDeskId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        helpDeskId: opts.helpDeskId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, helpHelpDeskAriStaticOpts);
    return new _HelpHelpDeskAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, helpHelpDeskAriStaticOpts);
    return new _HelpHelpDeskAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      helpDeskId: this.helpDeskId
    };
  }
};

export {
  HelpHelpDeskAri
};
