/// <reference types="jest" />

export declare const AccountLoginType: "account-login";

export declare const AccountSettingsType: "account-settings";

export declare const AdminAnnouncementBannerType: "admin-announcement-banner";

export declare const AlertRecipientLinkType: "alert-recipient-link";

export declare const AlertType: "alert";

declare class AnalyticsUserAri extends RegisteredAri {
    private constructor();
    private readonly _anonUserId;
    get anonUserId(): string;
    static create(opts: AnalyticsUserAriOpts): AnalyticsUserAri;
    static parse(maybeAri: string): AnalyticsUserAri;
    getVariables(): {
        anonUserId: string;
    };
}
export { AnalyticsUserAri }
export { AnalyticsUserAri as AnalyticsUserAri_alias_1 }
export { AnalyticsUserAri as AnalyticsUserAri_alias_2 }

export declare interface AnalyticsUserAriOpts {
    anonUserId: string;
}

declare const AnalyticsUserAriResourceOwner = "analytics";
export { AnalyticsUserAriResourceOwner }
export { AnalyticsUserAriResourceOwner as AnalyticsUserAriResourceOwner_alias_1 }

declare const AnalyticsUserAriResourceType = "user";
export { AnalyticsUserAriResourceType }
export { AnalyticsUserAriResourceType as AnalyticsUserAriResourceType_alias_1 }

export declare const analyticsUserAriStaticOpts: AriStaticProperties;

export declare const AnnouncementBannerType: "announcement-banner";

export declare const AnswerType: "answer";

declare class AnyAri extends Ari {
    private constructor();
    static create(ariOpts: AriCreateOpts, ariStaticOpts?: AriStaticProperties): AnyAri;
    static parse(maybeAri: string, ariStaticOpts?: AriStaticProperties): AnyAri;
    static check(maybeAri: any): boolean;
    asAnyAri(): this;
}
export { AnyAri }
export { AnyAri as AnyAri_alias_1 }

export declare const ApiRequestMetricType: "api-request-metric";

export declare const ApiType: "api";

export declare const AppEnvironmentVersionType: "app-environment-version";

declare class ApprovalDeskDecisionTableAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _workflowId;
    private readonly _decisionTableId;
    get workspaceId(): string;
    get workflowId(): string;
    get decisionTableId(): string;
    static create(opts: ApprovalDeskDecisionTableAriOpts): ApprovalDeskDecisionTableAri;
    static parse(maybeAri: string): ApprovalDeskDecisionTableAri;
    getVariables(): {
        workspaceId: string;
        workflowId: string;
        decisionTableId: string;
    };
}
export { ApprovalDeskDecisionTableAri }
export { ApprovalDeskDecisionTableAri as ApprovalDeskDecisionTableAri_alias_1 }
export { ApprovalDeskDecisionTableAri as ApprovalDeskDecisionTableAri_alias_2 }

export declare interface ApprovalDeskDecisionTableAriOpts {
    workspaceId: string;
    workflowId: string;
    decisionTableId: string;
}

declare const ApprovalDeskDecisionTableAriResourceOwner = "approval-desk";
export { ApprovalDeskDecisionTableAriResourceOwner }
export { ApprovalDeskDecisionTableAriResourceOwner as ApprovalDeskDecisionTableAriResourceOwner_alias_1 }

declare const ApprovalDeskDecisionTableAriResourceType = "decision-table";
export { ApprovalDeskDecisionTableAriResourceType }
export { ApprovalDeskDecisionTableAriResourceType as ApprovalDeskDecisionTableAriResourceType_alias_1 }

export declare const approvalDeskDecisionTableAriStaticOpts: AriStaticProperties;

declare class ApprovalDeskRoleAri extends RegisteredAri {
    private constructor();
    private readonly _scope;
    private readonly _roleId;
    get scope(): string;
    get roleId(): string;
    static create(opts: ApprovalDeskRoleAriOpts): ApprovalDeskRoleAri;
    static parse(maybeAri: string): ApprovalDeskRoleAri;
    getVariables(): {
        scope: string;
        roleId: string;
    };
}
export { ApprovalDeskRoleAri }
export { ApprovalDeskRoleAri as ApprovalDeskRoleAri_alias_1 }
export { ApprovalDeskRoleAri as ApprovalDeskRoleAri_alias_2 }

export declare interface ApprovalDeskRoleAriOpts {
    scope: string;
    roleId: string;
}

declare const ApprovalDeskRoleAriResourceOwner = "approval-desk";
export { ApprovalDeskRoleAriResourceOwner }
export { ApprovalDeskRoleAriResourceOwner as ApprovalDeskRoleAriResourceOwner_alias_1 }

declare const ApprovalDeskRoleAriResourceType = "role";
export { ApprovalDeskRoleAriResourceType }
export { ApprovalDeskRoleAriResourceType as ApprovalDeskRoleAriResourceType_alias_1 }

export declare const approvalDeskRoleAriStaticOpts: AriStaticProperties;

declare class ApprovalDeskWorkflowAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _workflowId;
    get workspaceId(): string;
    get workflowId(): string;
    static create(opts: ApprovalDeskWorkflowAriOpts): ApprovalDeskWorkflowAri;
    static parse(maybeAri: string): ApprovalDeskWorkflowAri;
    getVariables(): {
        workspaceId: string;
        workflowId: string;
    };
}
export { ApprovalDeskWorkflowAri }
export { ApprovalDeskWorkflowAri as ApprovalDeskWorkflowAri_alias_1 }
export { ApprovalDeskWorkflowAri as ApprovalDeskWorkflowAri_alias_2 }

export declare interface ApprovalDeskWorkflowAriOpts {
    workspaceId: string;
    workflowId: string;
}

declare const ApprovalDeskWorkflowAriResourceOwner = "approval-desk";
export { ApprovalDeskWorkflowAriResourceOwner }
export { ApprovalDeskWorkflowAriResourceOwner as ApprovalDeskWorkflowAriResourceOwner_alias_1 }

declare const ApprovalDeskWorkflowAriResourceType = "workflow";
export { ApprovalDeskWorkflowAriResourceType }
export { ApprovalDeskWorkflowAriResourceType as ApprovalDeskWorkflowAriResourceType_alias_1 }

export declare const approvalDeskWorkflowAriStaticOpts: AriStaticProperties;

declare class ApprovalDeskWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    get workspaceId(): string;
    static create(opts: ApprovalDeskWorkspaceAriOpts): ApprovalDeskWorkspaceAri;
    static parse(maybeAri: string): ApprovalDeskWorkspaceAri;
    getVariables(): {
        workspaceId: string;
    };
}
export { ApprovalDeskWorkspaceAri }
export { ApprovalDeskWorkspaceAri as ApprovalDeskWorkspaceAri_alias_1 }
export { ApprovalDeskWorkspaceAri as ApprovalDeskWorkspaceAri_alias_2 }

export declare interface ApprovalDeskWorkspaceAriOpts {
    workspaceId: string;
}

declare const ApprovalDeskWorkspaceAriResourceOwner = "approval-desk";
export { ApprovalDeskWorkspaceAriResourceOwner }
export { ApprovalDeskWorkspaceAriResourceOwner as ApprovalDeskWorkspaceAriResourceOwner_alias_1 }

declare const ApprovalDeskWorkspaceAriResourceType = "workspace";
export { ApprovalDeskWorkspaceAriResourceType }
export { ApprovalDeskWorkspaceAriResourceType as ApprovalDeskWorkspaceAriResourceType_alias_1 }

export declare const approvalDeskWorkspaceAriStaticOpts: AriStaticProperties;

export declare const ApprovalType: "approval";

export declare const AppType: "app";

declare abstract class Ari implements AriOpts {
    protected static create: (ariOpts: any, ariStaticOpts?: AriStaticProperties) => Ari;
    protected static parse: (maybeAri: string) => Ari;
    protected static check: (maybeAri: any) => boolean;
    private readonly _ati;
    private readonly _cloudId;
    private readonly _resourceId;
    protected constructor(opts: AriDerivedProperties);
    get platformQualifier(): PlatformQualifier;
    get cloudId(): CloudId;
    get resourceOwner(): string;
    get resourceType(): string;
    get resourceId(): string;
    get ati(): Ati;
    abstract asAnyAri(): AnyAri;
    equals(other: Ari): boolean;
    toString(): string;
    toJSON(): string;
    toOpts(): AriOpts;
}
export { Ari }
export { Ari as Ari_alias_1 }

export declare interface AriCreateOpts {
    platformQualifier?: PlatformQualifier;
    cloudId?: string | undefined;
    resourceOwner: ResourceOwner_alias_1 | UnknownResourceOwner;
    resourceType: ResourceType_alias_1 | UnknownResourceType;
    resourceId: ResourceId;
}

export declare interface AriDerivedProperties {
    qualifier: AriQualifier;
    platformQualifier: PlatformQualifier;
    cloudId: CloudId;
    resourceOwner: ResourceOwner_alias_1 | UnknownResourceOwner;
    resourceType: ResourceType_alias_1 | UnknownResourceType;
    resourceId: ResourceId;
    resourceIdSegmentValues: Record<string, ResourceId>;
}

export declare interface AriOpts {
    platformQualifier: PlatformQualifier;
    cloudId: string | undefined;
    resourceOwner: ResourceOwner_alias_1 | UnknownResourceOwner;
    resourceType: ResourceType_alias_1 | UnknownResourceType;
    resourceId: ResourceId;
}

declare class AriParser extends BaseParser {
    static fromString(maybeAri: string, ariProperties?: AriStaticProperties): AriDerivedProperties;
    static fromOpts(maybeAriOpts: Partial<Record<keyof AriDerivedProperties, any>>, ariProperties?: AriStaticProperties): AriDerivedProperties;
    private static ariSegmentValuesFromSlug;
}
export { AriParser }
export { AriParser as AriParser_alias_1 }

export declare type AriQualifier = 'ari';

export declare interface AriStaticProperties {
    qualifier: AriQualifier;
    platformQualifier: PlatformQualifier;
    cloudId: RegExp;
    resourceOwner: ResourceOwner_alias_1 | UnknownResourceOwner;
    resourceType: ResourceType_alias_1 | UnknownResourceType;
    resourceIdSlug: string;
    resourceIdSegmentFormats: Record<string, RegExp>;
}

declare class Arm implements ArmOpts {
    private readonly _platformQualifier;
    private readonly _cloudIdMatcher;
    private readonly _resourceOwnerMatcher;
    private readonly _resourceTypeMatcher;
    private readonly _resourceIdMatcher;
    static create(armOpts: ArmCreateOpts): Arm;
    static parse(maybeArm: string): Arm;
    private constructor();
    get platformQualifier(): PlatformQualifier;
    get cloudIdMatcher(): string | undefined;
    get resourceOwnerMatcher(): string;
    get resourceTypeMatcher(): string;
    get resourceIdMatcher(): string;
    match(ari: Ari): boolean;
    equals(other: Arm): boolean;
    toString(): string;
    toJSON(): string;
    toOpts(): ArmOpts;
}
export { Arm }
export { Arm as Arm_alias_1 }

export declare interface ArmCreateOpts {
    platformQualifier?: PlatformQualifier;
    cloudIdMatcher?: string;
    resourceOwnerMatcher: string;
    resourceTypeMatcher: string;
    resourceIdMatcher: string;
}

export declare interface ArmOpts {
    platformQualifier: PlatformQualifier;
    cloudIdMatcher: string | undefined;
    resourceOwnerMatcher: string;
    resourceTypeMatcher: string;
    resourceIdMatcher: string;
}

export declare class ArmParser extends BaseParser {
    static fromString(maybeArm: string): ArmOpts;
    static fromOpts(maybeArmOpts: Record<keyof ArmStaticOpts, any>): ArmOpts;
}

export declare type ArmQualifier = 'arm';

export declare interface ArmStaticOpts {
    qualifier: ArmQualifier;
    platformQualifier: PlatformQualifier;
    cloudIdMatcher: string | undefined;
    resourceOwnerMatcher: string;
    resourceTypeMatcher: string;
    resourceIdMatcher: string;
}

export declare const ArticleType: "article";

export declare const AssistantAnswerType: "assistant-answer";

declare class Ati implements AtiOpts {
    private readonly _platformQualifier;
    private readonly _resourceOwner;
    private readonly _resourceType;
    private constructor();
    get platformQualifier(): PlatformQualifier;
    get resourceOwner(): ResourceOwner_alias_1 | UnknownResourceOwner;
    get resourceType(): ResourceType_alias_1 | UnknownResourceType;
    static create(opts: AtiCreateOpts): Ati;
    static parse(maybeAti: string, atiOpts?: AtiStaticProperties): Ati;
    toString(): string;
    toJSON(): string;
    toOpts(): AtiOpts;
}
export { Ati }
export { Ati as Ati_alias_1 }

export declare interface AtiCreateOpts {
    platformQualifier?: PlatformQualifier;
    resourceOwner: ResourceOwner_alias_1 | UnknownResourceOwner;
    resourceType: ResourceType_alias_1 | UnknownResourceType;
}

export declare interface AtiDerivedProperties {
    qualifier: AtiQualifier;
    platformQualifier: PlatformQualifier;
    resourceOwner: ResourceOwner_alias_1 | UnknownResourceOwner;
    resourceType: ResourceType_alias_1 | UnknownResourceType;
}

export declare interface AtiOpts {
    platformQualifier: PlatformQualifier;
    resourceOwner: ResourceOwner_alias_1 | UnknownResourceOwner;
    resourceType: ResourceType_alias_1 | UnknownResourceType;
}

declare class AtiParser extends BaseParser {
    static fromString(inputStr: string, atiOpts?: AtiStaticProperties): AtiOpts;
    static fromOpts(maybeAtiOpts: Record<keyof AtiDerivedProperties, unknown>, atiOpts?: AtiStaticProperties): AtiOpts;
}
export { AtiParser }
export { AtiParser as AtiParser_alias_1 }

export declare type AtiQualifier = 'ati';

export declare interface AtiStaticProperties {
    qualifier: AtiQualifier;
    platformQualifier: PlatformQualifier;
    resourceOwner: ResourceOwner_alias_1 | UnknownResourceOwner;
    resourceType: ResourceType_alias_1 | UnknownResourceType;
}

declare class AtlashubIdAri extends RegisteredAri {
    private constructor();
    private readonly _id;
    get id(): string;
    static create(opts: AtlashubIdAriOpts): AtlashubIdAri;
    static parse(maybeAri: string): AtlashubIdAri;
    getVariables(): {
        id: string;
    };
}
export { AtlashubIdAri }
export { AtlashubIdAri as AtlashubIdAri_alias_1 }
export { AtlashubIdAri as AtlashubIdAri_alias_2 }

export declare interface AtlashubIdAriOpts {
    id: string;
}

declare const AtlashubIdAriResourceOwner = "atlashub";
export { AtlashubIdAriResourceOwner }
export { AtlashubIdAriResourceOwner as AtlashubIdAriResourceOwner_alias_1 }

declare const AtlashubIdAriResourceType = "id";
export { AtlashubIdAriResourceType }
export { AtlashubIdAriResourceType as AtlashubIdAriResourceType_alias_1 }

export declare const atlashubIdAriStaticOpts: AriStaticProperties;

declare class AtlashubSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: AtlashubSiteAriOpts): AtlashubSiteAri;
    static parse(maybeAri: string): AtlashubSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { AtlashubSiteAri }
export { AtlashubSiteAri as AtlashubSiteAri_alias_1 }
export { AtlashubSiteAri as AtlashubSiteAri_alias_2 }

export declare interface AtlashubSiteAriOpts {
    siteId: string;
}

declare const AtlashubSiteAriResourceOwner = "atlashub";
export { AtlashubSiteAriResourceOwner }
export { AtlashubSiteAriResourceOwner as AtlashubSiteAriResourceOwner_alias_1 }

declare const AtlashubSiteAriResourceType = "site";
export { AtlashubSiteAriResourceType }
export { AtlashubSiteAriResourceType as AtlashubSiteAriResourceType_alias_1 }

export declare const atlashubSiteAriStaticOpts: AriStaticProperties;

export declare const AttachmentType: "attachment";

export declare const AttributeType: "attribute";

export declare const AuthPolicyType: "auth-policy";

declare class AutomationRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleId;
    get roleId(): string;
    static create(opts: AutomationRoleAriOpts): AutomationRoleAri;
    static parse(maybeAri: string): AutomationRoleAri;
    getVariables(): {
        roleId: string;
    };
}
export { AutomationRoleAri }
export { AutomationRoleAri as AutomationRoleAri_alias_1 }
export { AutomationRoleAri as AutomationRoleAri_alias_2 }

export declare interface AutomationRoleAriOpts {
    roleId: string;
}

declare const AutomationRoleAriResourceOwner = "automation";
export { AutomationRoleAriResourceOwner }
export { AutomationRoleAriResourceOwner as AutomationRoleAriResourceOwner_alias_1 }

declare const AutomationRoleAriResourceType = "role";
export { AutomationRoleAriResourceType }
export { AutomationRoleAriResourceType as AutomationRoleAriResourceType_alias_1 }

export declare const automationRoleAriStaticOpts: AriStaticProperties;

declare class AutomationRuleAri extends RegisteredAri {
    private constructor();
    private readonly _ruleId;
    get ruleId(): string;
    static create(opts: AutomationRuleAriOpts): AutomationRuleAri;
    static parse(maybeAri: string): AutomationRuleAri;
    getVariables(): {
        ruleId: string;
    };
}
export { AutomationRuleAri }
export { AutomationRuleAri as AutomationRuleAri_alias_1 }
export { AutomationRuleAri as AutomationRuleAri_alias_2 }

export declare interface AutomationRuleAriOpts {
    ruleId: string;
}

declare const AutomationRuleAriResourceOwner = "automation";
export { AutomationRuleAriResourceOwner }
export { AutomationRuleAriResourceOwner as AutomationRuleAriResourceOwner_alias_1 }

declare const AutomationRuleAriResourceType = "rule";
export { AutomationRuleAriResourceType }
export { AutomationRuleAriResourceType as AutomationRuleAriResourceType_alias_1 }

export declare const automationRuleAriStaticOpts: AriStaticProperties;

export declare const AvailableFieldsType: "available-fields";

declare class AvocadoAnswerAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _answerId;
    get siteId(): string;
    get workspaceId(): string;
    get answerId(): string;
    static create(opts: AvocadoAnswerAriOpts): AvocadoAnswerAri;
    static parse(maybeAri: string): AvocadoAnswerAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        answerId: string;
    };
}
export { AvocadoAnswerAri }
export { AvocadoAnswerAri as AvocadoAnswerAri_alias_1 }
export { AvocadoAnswerAri as AvocadoAnswerAri_alias_2 }

export declare interface AvocadoAnswerAriOpts {
    siteId: string;
    workspaceId: string;
    answerId: string;
}

declare const AvocadoAnswerAriResourceOwner = "avocado";
export { AvocadoAnswerAriResourceOwner }
export { AvocadoAnswerAriResourceOwner as AvocadoAnswerAriResourceOwner_alias_1 }

declare const AvocadoAnswerAriResourceType = "answer";
export { AvocadoAnswerAriResourceType }
export { AvocadoAnswerAriResourceType as AvocadoAnswerAriResourceType_alias_1 }

export declare const avocadoAnswerAriStaticOpts: AriStaticProperties;

declare class AvocadoQuestionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _questionId;
    get siteId(): string;
    get workspaceId(): string;
    get questionId(): string;
    static create(opts: AvocadoQuestionAriOpts): AvocadoQuestionAri;
    static parse(maybeAri: string): AvocadoQuestionAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        questionId: string;
    };
}
export { AvocadoQuestionAri }
export { AvocadoQuestionAri as AvocadoQuestionAri_alias_1 }
export { AvocadoQuestionAri as AvocadoQuestionAri_alias_2 }

export declare interface AvocadoQuestionAriOpts {
    siteId: string;
    workspaceId: string;
    questionId: string;
}

declare const AvocadoQuestionAriResourceOwner = "avocado";
export { AvocadoQuestionAriResourceOwner }
export { AvocadoQuestionAriResourceOwner as AvocadoQuestionAriResourceOwner_alias_1 }

declare const AvocadoQuestionAriResourceType = "question";
export { AvocadoQuestionAriResourceType }
export { AvocadoQuestionAriResourceType as AvocadoQuestionAriResourceType_alias_1 }

export declare const avocadoQuestionAriStaticOpts: AriStaticProperties;

declare class AvocadoRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleType;
    get roleType(): string;
    static create(opts: AvocadoRoleAriOpts): AvocadoRoleAri;
    static parse(maybeAri: string): AvocadoRoleAri;
    getVariables(): {
        roleType: string;
    };
}
export { AvocadoRoleAri }
export { AvocadoRoleAri as AvocadoRoleAri_alias_1 }
export { AvocadoRoleAri as AvocadoRoleAri_alias_2 }

export declare interface AvocadoRoleAriOpts {
    roleType: string;
}

declare const AvocadoRoleAriResourceOwner = "avocado";
export { AvocadoRoleAriResourceOwner }
export { AvocadoRoleAriResourceOwner as AvocadoRoleAriResourceOwner_alias_1 }

declare const AvocadoRoleAriResourceType = "role";
export { AvocadoRoleAriResourceType }
export { AvocadoRoleAriResourceType as AvocadoRoleAriResourceType_alias_1 }

export declare const avocadoRoleAriStaticOpts: AriStaticProperties;

declare class AvocadoSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: AvocadoSiteAriOpts): AvocadoSiteAri;
    static parse(maybeAri: string): AvocadoSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { AvocadoSiteAri }
export { AvocadoSiteAri as AvocadoSiteAri_alias_1 }
export { AvocadoSiteAri as AvocadoSiteAri_alias_2 }

export declare interface AvocadoSiteAriOpts {
    siteId: string;
}

declare const AvocadoSiteAriResourceOwner = "avocado";
export { AvocadoSiteAriResourceOwner }
export { AvocadoSiteAriResourceOwner as AvocadoSiteAriResourceOwner_alias_1 }

declare const AvocadoSiteAriResourceType = "site";
export { AvocadoSiteAriResourceType }
export { AvocadoSiteAriResourceType as AvocadoSiteAriResourceType_alias_1 }

export declare const avocadoSiteAriStaticOpts: AriStaticProperties;

declare class AvocadoUserAri extends RegisteredAri {
    private constructor();
    private readonly _userId;
    get userId(): string;
    static create(opts: AvocadoUserAriOpts): AvocadoUserAri;
    static parse(maybeAri: string): AvocadoUserAri;
    getVariables(): {
        userId: string;
    };
}
export { AvocadoUserAri }
export { AvocadoUserAri as AvocadoUserAri_alias_1 }
export { AvocadoUserAri as AvocadoUserAri_alias_2 }

export declare interface AvocadoUserAriOpts {
    userId: string;
}

declare const AvocadoUserAriResourceOwner = "avocado";
export { AvocadoUserAriResourceOwner }
export { AvocadoUserAriResourceOwner as AvocadoUserAriResourceOwner_alias_1 }

declare const AvocadoUserAriResourceType = "user";
export { AvocadoUserAriResourceType }
export { AvocadoUserAriResourceType as AvocadoUserAriResourceType_alias_1 }

export declare const avocadoUserAriStaticOpts: AriStaticProperties;

declare class AvpDashboardAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _dashboardId;
    get siteId(): string;
    get activationId(): string;
    get dashboardId(): string;
    static create(opts: AvpDashboardAriOpts): AvpDashboardAri;
    static parse(maybeAri: string): AvpDashboardAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        dashboardId: string;
    };
}
export { AvpDashboardAri }
export { AvpDashboardAri as AvpDashboardAri_alias_1 }
export { AvpDashboardAri as AvpDashboardAri_alias_2 }

export declare interface AvpDashboardAriOpts {
    siteId: string;
    activationId: string;
    dashboardId: string;
}

declare const AvpDashboardAriResourceOwner = "avp";
export { AvpDashboardAriResourceOwner }
export { AvpDashboardAriResourceOwner as AvpDashboardAriResourceOwner_alias_1 }

declare const AvpDashboardAriResourceType = "dashboard";
export { AvpDashboardAriResourceType }
export { AvpDashboardAriResourceType as AvpDashboardAriResourceType_alias_1 }

export declare const avpDashboardAriStaticOpts: AriStaticProperties;

declare class AvpDatasourceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _datasourceId;
    get siteId(): string;
    get activationId(): string;
    get datasourceId(): string;
    static create(opts: AvpDatasourceAriOpts): AvpDatasourceAri;
    static parse(maybeAri: string): AvpDatasourceAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        datasourceId: string;
    };
}
export { AvpDatasourceAri }
export { AvpDatasourceAri as AvpDatasourceAri_alias_1 }
export { AvpDatasourceAri as AvpDatasourceAri_alias_2 }

export declare interface AvpDatasourceAriOpts {
    siteId: string;
    activationId: string;
    datasourceId: string;
}

declare const AvpDatasourceAriResourceOwner = "avp";
export { AvpDatasourceAriResourceOwner }
export { AvpDatasourceAriResourceOwner as AvpDatasourceAriResourceOwner_alias_1 }

declare const AvpDatasourceAriResourceType = "datasource";
export { AvpDatasourceAriResourceType }
export { AvpDatasourceAriResourceType as AvpDatasourceAriResourceType_alias_1 }

export declare const avpDatasourceAriStaticOpts: AriStaticProperties;

declare class AvpRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleId;
    get roleId(): string;
    static create(opts: AvpRoleAriOpts): AvpRoleAri;
    static parse(maybeAri: string): AvpRoleAri;
    getVariables(): {
        roleId: string;
    };
}
export { AvpRoleAri }
export { AvpRoleAri as AvpRoleAri_alias_1 }
export { AvpRoleAri as AvpRoleAri_alias_2 }

export declare interface AvpRoleAriOpts {
    roleId: string;
}

declare const AvpRoleAriResourceOwner = "avp";
export { AvpRoleAriResourceOwner }
export { AvpRoleAriResourceOwner as AvpRoleAriResourceOwner_alias_1 }

declare const AvpRoleAriResourceType = "role";
export { AvpRoleAriResourceType }
export { AvpRoleAriResourceType as AvpRoleAriResourceType_alias_1 }

export declare const avpRoleAriStaticOpts: AriStaticProperties;

declare class AvpSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: AvpSiteAriOpts): AvpSiteAri;
    static parse(maybeAri: string): AvpSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { AvpSiteAri }
export { AvpSiteAri as AvpSiteAri_alias_1 }
export { AvpSiteAri as AvpSiteAri_alias_2 }

export declare interface AvpSiteAriOpts {
    siteId: string;
}

declare const AvpSiteAriResourceOwner = "avp";
export { AvpSiteAriResourceOwner }
export { AvpSiteAriResourceOwner as AvpSiteAriResourceOwner_alias_1 }

declare const AvpSiteAriResourceType = "site";
export { AvpSiteAriResourceType }
export { AvpSiteAriResourceType as AvpSiteAriResourceType_alias_1 }

export declare const avpSiteAriStaticOpts: AriStaticProperties;

export declare class BaseParser {
    static getIdentifierSegments(inputStr: string, numberOfSegmentsRequired: number): string[];
}

declare class BeaconAlertAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _alertId;
    get siteId(): string;
    get workspaceId(): string;
    get alertId(): string;
    static create(opts: BeaconAlertAriOpts): BeaconAlertAri;
    static parse(maybeAri: string): BeaconAlertAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        alertId: string;
    };
}
export { BeaconAlertAri }
export { BeaconAlertAri as BeaconAlertAri_alias_1 }
export { BeaconAlertAri as BeaconAlertAri_alias_2 }

export declare interface BeaconAlertAriOpts {
    siteId: string;
    workspaceId: string;
    alertId: string;
}

declare const BeaconAlertAriResourceOwner = "beacon";
export { BeaconAlertAriResourceOwner }
export { BeaconAlertAriResourceOwner as BeaconAlertAriResourceOwner_alias_1 }

declare const BeaconAlertAriResourceType = "alert";
export { BeaconAlertAriResourceType }
export { BeaconAlertAriResourceType as BeaconAlertAriResourceType_alias_1 }

export declare const beaconAlertAriStaticOpts: AriStaticProperties;

declare class BeaconCustomDetectionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _customDetectionId;
    get siteId(): string;
    get workspaceId(): string;
    get customDetectionId(): string;
    static create(opts: BeaconCustomDetectionAriOpts): BeaconCustomDetectionAri;
    static parse(maybeAri: string): BeaconCustomDetectionAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        customDetectionId: string;
    };
}
export { BeaconCustomDetectionAri }
export { BeaconCustomDetectionAri as BeaconCustomDetectionAri_alias_1 }
export { BeaconCustomDetectionAri as BeaconCustomDetectionAri_alias_2 }

export declare interface BeaconCustomDetectionAriOpts {
    siteId: string;
    workspaceId: string;
    customDetectionId: string;
}

declare const BeaconCustomDetectionAriResourceOwner = "beacon";
export { BeaconCustomDetectionAriResourceOwner }
export { BeaconCustomDetectionAriResourceOwner as BeaconCustomDetectionAriResourceOwner_alias_1 }

declare const BeaconCustomDetectionAriResourceType = "custom-detection";
export { BeaconCustomDetectionAriResourceType }
export { BeaconCustomDetectionAriResourceType as BeaconCustomDetectionAriResourceType_alias_1 }

export declare const beaconCustomDetectionAriStaticOpts: AriStaticProperties;

declare class BeaconDetectionAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _detectionId;
    get workspaceId(): string;
    get detectionId(): string;
    static create(opts: BeaconDetectionAriOpts): BeaconDetectionAri;
    static parse(maybeAri: string): BeaconDetectionAri;
    getVariables(): {
        workspaceId: string;
        detectionId: string;
    };
}
export { BeaconDetectionAri }
export { BeaconDetectionAri as BeaconDetectionAri_alias_1 }
export { BeaconDetectionAri as BeaconDetectionAri_alias_2 }

export declare interface BeaconDetectionAriOpts {
    workspaceId: string;
    detectionId: string;
}

declare const BeaconDetectionAriResourceOwner = "beacon";
export { BeaconDetectionAriResourceOwner }
export { BeaconDetectionAriResourceOwner as BeaconDetectionAriResourceOwner_alias_1 }

declare const BeaconDetectionAriResourceType = "detection";
export { BeaconDetectionAriResourceType }
export { BeaconDetectionAriResourceType as BeaconDetectionAriResourceType_alias_1 }

export declare const beaconDetectionAriStaticOpts: AriStaticProperties;

declare class BeaconDetectionSettingAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _detectionType;
    private readonly _detectionId;
    private readonly _settingId;
    get siteId(): string;
    get workspaceId(): string;
    get detectionType(): string;
    get detectionId(): string;
    get settingId(): string;
    static create(opts: BeaconDetectionSettingAriOpts): BeaconDetectionSettingAri;
    static parse(maybeAri: string): BeaconDetectionSettingAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        detectionType: string;
        detectionId: string;
        settingId: string;
    };
}
export { BeaconDetectionSettingAri }
export { BeaconDetectionSettingAri as BeaconDetectionSettingAri_alias_1 }
export { BeaconDetectionSettingAri as BeaconDetectionSettingAri_alias_2 }

export declare interface BeaconDetectionSettingAriOpts {
    siteId: string;
    workspaceId: string;
    detectionType: string;
    detectionId: string;
    settingId: string;
}

declare const BeaconDetectionSettingAriResourceOwner = "beacon";
export { BeaconDetectionSettingAriResourceOwner }
export { BeaconDetectionSettingAriResourceOwner as BeaconDetectionSettingAriResourceOwner_alias_1 }

declare const BeaconDetectionSettingAriResourceType = "detection-setting";
export { BeaconDetectionSettingAriResourceType }
export { BeaconDetectionSettingAriResourceType as BeaconDetectionSettingAriResourceType_alias_1 }

export declare const beaconDetectionSettingAriStaticOpts: AriStaticProperties;

declare class BeaconRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleType;
    get roleType(): string;
    static create(opts: BeaconRoleAriOpts): BeaconRoleAri;
    static parse(maybeAri: string): BeaconRoleAri;
    getVariables(): {
        roleType: string;
    };
}
export { BeaconRoleAri }
export { BeaconRoleAri as BeaconRoleAri_alias_1 }
export { BeaconRoleAri as BeaconRoleAri_alias_2 }

export declare interface BeaconRoleAriOpts {
    roleType: string;
}

declare const BeaconRoleAriResourceOwner = "beacon";
export { BeaconRoleAriResourceOwner }
export { BeaconRoleAriResourceOwner as BeaconRoleAriResourceOwner_alias_1 }

declare const BeaconRoleAriResourceType = "role";
export { BeaconRoleAriResourceType }
export { BeaconRoleAriResourceType as BeaconRoleAriResourceType_alias_1 }

export declare const beaconRoleAriStaticOpts: AriStaticProperties;

declare class BeaconSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: BeaconSiteAriOpts): BeaconSiteAri;
    static parse(maybeAri: string): BeaconSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { BeaconSiteAri }
export { BeaconSiteAri as BeaconSiteAri_alias_1 }
export { BeaconSiteAri as BeaconSiteAri_alias_2 }

export declare interface BeaconSiteAriOpts {
    siteId: string;
}

declare const BeaconSiteAriResourceOwner = "beacon";
export { BeaconSiteAriResourceOwner }
export { BeaconSiteAriResourceOwner as BeaconSiteAriResourceOwner_alias_1 }

declare const BeaconSiteAriResourceType = "site";
export { BeaconSiteAriResourceType }
export { BeaconSiteAriResourceType as BeaconSiteAriResourceType_alias_1 }

export declare const beaconSiteAriStaticOpts: AriStaticProperties;

declare class BeaconSubscriptionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _subscriptionId;
    get siteId(): string;
    get workspaceId(): string;
    get subscriptionId(): string;
    static create(opts: BeaconSubscriptionAriOpts): BeaconSubscriptionAri;
    static parse(maybeAri: string): BeaconSubscriptionAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        subscriptionId: string;
    };
}
export { BeaconSubscriptionAri }
export { BeaconSubscriptionAri as BeaconSubscriptionAri_alias_1 }
export { BeaconSubscriptionAri as BeaconSubscriptionAri_alias_2 }

export declare interface BeaconSubscriptionAriOpts {
    siteId: string;
    workspaceId: string;
    subscriptionId: string;
}

declare const BeaconSubscriptionAriResourceOwner = "beacon";
export { BeaconSubscriptionAriResourceOwner }
export { BeaconSubscriptionAriResourceOwner as BeaconSubscriptionAriResourceOwner_alias_1 }

declare const BeaconSubscriptionAriResourceType = "subscription";
export { BeaconSubscriptionAriResourceType }
export { BeaconSubscriptionAriResourceType as BeaconSubscriptionAriResourceType_alias_1 }

export declare const beaconSubscriptionAriStaticOpts: AriStaticProperties;

declare class BeaconWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    get siteId(): string;
    get workspaceId(): string;
    static create(opts: BeaconWorkspaceAriOpts): BeaconWorkspaceAri;
    static parse(maybeAri: string): BeaconWorkspaceAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
    };
}
export { BeaconWorkspaceAri }
export { BeaconWorkspaceAri as BeaconWorkspaceAri_alias_1 }
export { BeaconWorkspaceAri as BeaconWorkspaceAri_alias_2 }

export declare interface BeaconWorkspaceAriOpts {
    siteId: string;
    workspaceId: string;
}

declare const BeaconWorkspaceAriResourceOwner = "beacon";
export { BeaconWorkspaceAriResourceOwner }
export { BeaconWorkspaceAriResourceOwner as BeaconWorkspaceAriResourceOwner_alias_1 }

declare const BeaconWorkspaceAriResourceType = "workspace";
export { BeaconWorkspaceAriResourceType }
export { BeaconWorkspaceAriResourceType as BeaconWorkspaceAriResourceType_alias_1 }

export declare const beaconWorkspaceAriStaticOpts: AriStaticProperties;

declare interface Benchmark {
    p50: number;
    p90: number;
    p95: number;
    p99: number;
    p995: number;
}

declare class BitbucketAppAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _appId;
    get workspaceId(): string;
    get appId(): string;
    static create(opts: BitbucketAppAriOpts): BitbucketAppAri;
    static parse(maybeAri: string): BitbucketAppAri;
    getVariables(): {
        workspaceId: string;
        appId: string;
    };
}
export { BitbucketAppAri }
export { BitbucketAppAri as BitbucketAppAri_alias_1 }
export { BitbucketAppAri as BitbucketAppAri_alias_2 }

export declare interface BitbucketAppAriOpts {
    workspaceId: string;
    appId: string;
}

declare const BitbucketAppAriResourceOwner = "bitbucket";
export { BitbucketAppAriResourceOwner }
export { BitbucketAppAriResourceOwner as BitbucketAppAriResourceOwner_alias_1 }

declare const BitbucketAppAriResourceType = "app";
export { BitbucketAppAriResourceType }
export { BitbucketAppAriResourceType as BitbucketAppAriResourceType_alias_1 }

export declare const bitbucketAppAriStaticOpts: AriStaticProperties;

declare class BitbucketOauthConsumerAri extends RegisteredAri {
    private constructor();
    private readonly _clientId;
    get clientId(): string;
    static create(opts: BitbucketOauthConsumerAriOpts): BitbucketOauthConsumerAri;
    static parse(maybeAri: string): BitbucketOauthConsumerAri;
    getVariables(): {
        clientId: string;
    };
}
export { BitbucketOauthConsumerAri }
export { BitbucketOauthConsumerAri as BitbucketOauthConsumerAri_alias_1 }
export { BitbucketOauthConsumerAri as BitbucketOauthConsumerAri_alias_2 }

export declare interface BitbucketOauthConsumerAriOpts {
    clientId: string;
}

declare const BitbucketOauthConsumerAriResourceOwner = "bitbucket";
export { BitbucketOauthConsumerAriResourceOwner }
export { BitbucketOauthConsumerAriResourceOwner as BitbucketOauthConsumerAriResourceOwner_alias_1 }

declare const BitbucketOauthConsumerAriResourceType = "oauth-consumer";
export { BitbucketOauthConsumerAriResourceType }
export { BitbucketOauthConsumerAriResourceType as BitbucketOauthConsumerAriResourceType_alias_1 }

export declare const bitbucketOauthConsumerAriStaticOpts: AriStaticProperties;

declare class BitbucketProjectAri extends RegisteredAri {
    private constructor();
    private readonly _projectId;
    get projectId(): string;
    static create(opts: BitbucketProjectAriOpts): BitbucketProjectAri;
    static parse(maybeAri: string): BitbucketProjectAri;
    getVariables(): {
        projectId: string;
    };
}
export { BitbucketProjectAri }
export { BitbucketProjectAri as BitbucketProjectAri_alias_1 }
export { BitbucketProjectAri as BitbucketProjectAri_alias_2 }

export declare interface BitbucketProjectAriOpts {
    projectId: string;
}

declare const BitbucketProjectAriResourceOwner = "bitbucket";
export { BitbucketProjectAriResourceOwner }
export { BitbucketProjectAriResourceOwner as BitbucketProjectAriResourceOwner_alias_1 }

declare const BitbucketProjectAriResourceType = "project";
export { BitbucketProjectAriResourceType }
export { BitbucketProjectAriResourceType as BitbucketProjectAriResourceType_alias_1 }

export declare const bitbucketProjectAriStaticOpts: AriStaticProperties;

declare class BitbucketPullrequestAri extends RegisteredAri {
    private constructor();
    private readonly _pullRequestId;
    get pullRequestId(): string;
    static create(opts: BitbucketPullrequestAriOpts): BitbucketPullrequestAri;
    static parse(maybeAri: string): BitbucketPullrequestAri;
    getVariables(): {
        pullRequestId: string;
    };
}
export { BitbucketPullrequestAri }
export { BitbucketPullrequestAri as BitbucketPullrequestAri_alias_1 }
export { BitbucketPullrequestAri as BitbucketPullrequestAri_alias_2 }

export declare interface BitbucketPullrequestAriOpts {
    pullRequestId: string;
}

declare const BitbucketPullrequestAriResourceOwner = "bitbucket";
export { BitbucketPullrequestAriResourceOwner }
export { BitbucketPullrequestAriResourceOwner as BitbucketPullrequestAriResourceOwner_alias_1 }

declare const BitbucketPullrequestAriResourceType = "pullrequest";
export { BitbucketPullrequestAriResourceType }
export { BitbucketPullrequestAriResourceType as BitbucketPullrequestAriResourceType_alias_1 }

export declare const bitbucketPullrequestAriStaticOpts: AriStaticProperties;

declare class BitbucketRepositoryAri extends RegisteredAri {
    private constructor();
    private readonly _repositoryId;
    get repositoryId(): string;
    static create(opts: BitbucketRepositoryAriOpts): BitbucketRepositoryAri;
    static parse(maybeAri: string): BitbucketRepositoryAri;
    getVariables(): {
        repositoryId: string;
    };
}
export { BitbucketRepositoryAri }
export { BitbucketRepositoryAri as BitbucketRepositoryAri_alias_1 }
export { BitbucketRepositoryAri as BitbucketRepositoryAri_alias_2 }

export declare interface BitbucketRepositoryAriOpts {
    repositoryId: string;
}

declare const BitbucketRepositoryAriResourceOwner = "bitbucket";
export { BitbucketRepositoryAriResourceOwner }
export { BitbucketRepositoryAriResourceOwner as BitbucketRepositoryAriResourceOwner_alias_1 }

declare const BitbucketRepositoryAriResourceType = "repository";
export { BitbucketRepositoryAriResourceType }
export { BitbucketRepositoryAriResourceType as BitbucketRepositoryAriResourceType_alias_1 }

export declare const bitbucketRepositoryAriStaticOpts: AriStaticProperties;

declare class BitbucketRepositoryTransferAri extends RegisteredAri {
    private constructor();
    private readonly _transferId;
    get transferId(): string;
    static create(opts: BitbucketRepositoryTransferAriOpts): BitbucketRepositoryTransferAri;
    static parse(maybeAri: string): BitbucketRepositoryTransferAri;
    getVariables(): {
        transferId: string;
    };
}
export { BitbucketRepositoryTransferAri }
export { BitbucketRepositoryTransferAri as BitbucketRepositoryTransferAri_alias_1 }
export { BitbucketRepositoryTransferAri as BitbucketRepositoryTransferAri_alias_2 }

export declare interface BitbucketRepositoryTransferAriOpts {
    transferId: string;
}

declare const BitbucketRepositoryTransferAriResourceOwner = "bitbucket";
export { BitbucketRepositoryTransferAriResourceOwner }
export { BitbucketRepositoryTransferAriResourceOwner as BitbucketRepositoryTransferAriResourceOwner_alias_1 }

declare const BitbucketRepositoryTransferAriResourceType = "repository-transfer";
export { BitbucketRepositoryTransferAriResourceType }
export { BitbucketRepositoryTransferAriResourceType as BitbucketRepositoryTransferAriResourceType_alias_1 }

export declare const bitbucketRepositoryTransferAriStaticOpts: AriStaticProperties;

declare class BitbucketSiteAri extends RegisteredAri {
    private constructor();
    static create(opts: BitbucketSiteAriOpts): BitbucketSiteAri;
    static parse(maybeAri: string): BitbucketSiteAri;
    getVariables(): {};
}
export { BitbucketSiteAri }
export { BitbucketSiteAri as BitbucketSiteAri_alias_1 }
export { BitbucketSiteAri as BitbucketSiteAri_alias_2 }

export declare interface BitbucketSiteAriOpts {
}

declare const BitbucketSiteAriResourceOwner = "bitbucket";
export { BitbucketSiteAriResourceOwner }
export { BitbucketSiteAriResourceOwner as BitbucketSiteAriResourceOwner_alias_1 }

declare const BitbucketSiteAriResourceType = "site";
export { BitbucketSiteAriResourceType }
export { BitbucketSiteAriResourceType as BitbucketSiteAriResourceType_alias_1 }

export declare const bitbucketSiteAriStaticOpts: AriStaticProperties;

declare class BitbucketTeamAri extends RegisteredAri {
    private constructor();
    private readonly _teamId;
    get teamId(): string;
    static create(opts: BitbucketTeamAriOpts): BitbucketTeamAri;
    static parse(maybeAri: string): BitbucketTeamAri;
    getVariables(): {
        teamId: string;
    };
}
export { BitbucketTeamAri }
export { BitbucketTeamAri as BitbucketTeamAri_alias_1 }
export { BitbucketTeamAri as BitbucketTeamAri_alias_2 }

export declare interface BitbucketTeamAriOpts {
    teamId: string;
}

declare const BitbucketTeamAriResourceOwner = "bitbucket";
export { BitbucketTeamAriResourceOwner }
export { BitbucketTeamAriResourceOwner as BitbucketTeamAriResourceOwner_alias_1 }

declare const BitbucketTeamAriResourceType = "team";
export { BitbucketTeamAriResourceType }
export { BitbucketTeamAriResourceType as BitbucketTeamAriResourceType_alias_1 }

export declare const bitbucketTeamAriStaticOpts: AriStaticProperties;

declare class BitbucketWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    get workspaceId(): string;
    static create(opts: BitbucketWorkspaceAriOpts): BitbucketWorkspaceAri;
    static parse(maybeAri: string): BitbucketWorkspaceAri;
    getVariables(): {
        workspaceId: string;
    };
}
export { BitbucketWorkspaceAri }
export { BitbucketWorkspaceAri as BitbucketWorkspaceAri_alias_1 }
export { BitbucketWorkspaceAri as BitbucketWorkspaceAri_alias_2 }

export declare interface BitbucketWorkspaceAriOpts {
    workspaceId: string;
}

declare const BitbucketWorkspaceAriResourceOwner = "bitbucket";
export { BitbucketWorkspaceAriResourceOwner }
export { BitbucketWorkspaceAriResourceOwner as BitbucketWorkspaceAriResourceOwner_alias_1 }

declare const BitbucketWorkspaceAriResourceType = "workspace";
export { BitbucketWorkspaceAriResourceType }
export { BitbucketWorkspaceAriResourceType as BitbucketWorkspaceAriResourceType_alias_1 }

export declare const bitbucketWorkspaceAriStaticOpts: AriStaticProperties;

export declare const BlogpostType: "blogpost";

export declare const BoardFeatureType: "board-feature";

export declare const BoardIssueListType: "board-issue-list";

export declare const BoardType: "board";

export declare const BranchHistoryType: "branch-history";

export declare const BranchType: "branch";

declare class BrieRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleTypeId;
    get roleTypeId(): string;
    static create(opts: BrieRoleAriOpts): BrieRoleAri;
    static parse(maybeAri: string): BrieRoleAri;
    getVariables(): {
        roleTypeId: string;
    };
}
export { BrieRoleAri }
export { BrieRoleAri as BrieRoleAri_alias_1 }
export { BrieRoleAri as BrieRoleAri_alias_2 }

export declare interface BrieRoleAriOpts {
    roleTypeId: string;
}

declare const BrieRoleAriResourceOwner = "brie";
export { BrieRoleAriResourceOwner }
export { BrieRoleAriResourceOwner as BrieRoleAriResourceOwner_alias_1 }

declare const BrieRoleAriResourceType = "role";
export { BrieRoleAriResourceType }
export { BrieRoleAriResourceType as BrieRoleAriResourceType_alias_1 }

export declare const brieRoleAriStaticOpts: AriStaticProperties;

declare class BrieSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: BrieSiteAriOpts): BrieSiteAri;
    static parse(maybeAri: string): BrieSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { BrieSiteAri }
export { BrieSiteAri as BrieSiteAri_alias_1 }
export { BrieSiteAri as BrieSiteAri_alias_2 }

export declare interface BrieSiteAriOpts {
    siteId: string;
}

declare const BrieSiteAriResourceOwner = "brie";
export { BrieSiteAriResourceOwner }
export { BrieSiteAriResourceOwner as BrieSiteAriResourceOwner_alias_1 }

declare const BrieSiteAriResourceType = "site";
export { BrieSiteAriResourceType }
export { BrieSiteAriResourceType as BrieSiteAriResourceType_alias_1 }

export declare const brieSiteAriStaticOpts: AriStaticProperties;

export declare const BuildHistoryType: "build-history";

export declare const BuildType: "build";

export declare const BulkOperationTaskType: "bulk-operation-task";

export declare const CalendarEventType: "calendar-event";

export declare const CalibrationType: "calibration";

export declare const CallRoutingType: "call-routing";

export declare const CannedResponseType: "canned-response";

declare class CanvasBoardAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _boardId;
    get siteId(): string;
    get boardId(): string;
    static create(opts: CanvasBoardAriOpts): CanvasBoardAri;
    static parse(maybeAri: string): CanvasBoardAri;
    getVariables(): {
        siteId: string;
        boardId: string;
    };
}
export { CanvasBoardAri }
export { CanvasBoardAri as CanvasBoardAri_alias_1 }
export { CanvasBoardAri as CanvasBoardAri_alias_2 }

export declare interface CanvasBoardAriOpts {
    siteId: string;
    boardId: string;
}

declare const CanvasBoardAriResourceOwner = "canvas";
export { CanvasBoardAriResourceOwner }
export { CanvasBoardAriResourceOwner as CanvasBoardAriResourceOwner_alias_1 }

declare const CanvasBoardAriResourceType = "board";
export { CanvasBoardAriResourceType }
export { CanvasBoardAriResourceType as CanvasBoardAriResourceType_alias_1 }

export declare const canvasBoardAriStaticOpts: AriStaticProperties;

declare class CanvasDatabaseAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _databaseId;
    get siteId(): string;
    get databaseId(): string;
    static create(opts: CanvasDatabaseAriOpts): CanvasDatabaseAri;
    static parse(maybeAri: string): CanvasDatabaseAri;
    getVariables(): {
        siteId: string;
        databaseId: string;
    };
}
export { CanvasDatabaseAri }
export { CanvasDatabaseAri as CanvasDatabaseAri_alias_1 }
export { CanvasDatabaseAri as CanvasDatabaseAri_alias_2 }

export declare interface CanvasDatabaseAriOpts {
    siteId: string;
    databaseId: string;
}

declare const CanvasDatabaseAriResourceOwner = "canvas";
export { CanvasDatabaseAriResourceOwner }
export { CanvasDatabaseAriResourceOwner as CanvasDatabaseAriResourceOwner_alias_1 }

declare const CanvasDatabaseAriResourceType = "database";
export { CanvasDatabaseAriResourceType }
export { CanvasDatabaseAriResourceType as CanvasDatabaseAriResourceType_alias_1 }

export declare const canvasDatabaseAriStaticOpts: AriStaticProperties;

declare class CanvasSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: CanvasSiteAriOpts): CanvasSiteAri;
    static parse(maybeAri: string): CanvasSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { CanvasSiteAri }
export { CanvasSiteAri as CanvasSiteAri_alias_1 }
export { CanvasSiteAri as CanvasSiteAri_alias_2 }

export declare interface CanvasSiteAriOpts {
    siteId: string;
}

declare const CanvasSiteAriResourceOwner = "canvas";
export { CanvasSiteAriResourceOwner }
export { CanvasSiteAriResourceOwner as CanvasSiteAriResourceOwner_alias_1 }

declare const CanvasSiteAriResourceType = "site";
export { CanvasSiteAriResourceType }
export { CanvasSiteAriResourceType as CanvasSiteAriResourceType_alias_1 }

export declare const canvasSiteAriStaticOpts: AriStaticProperties;

declare class CanvasWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    get siteId(): string;
    get workspaceId(): string;
    static create(opts: CanvasWorkspaceAriOpts): CanvasWorkspaceAri;
    static parse(maybeAri: string): CanvasWorkspaceAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
    };
}
export { CanvasWorkspaceAri }
export { CanvasWorkspaceAri as CanvasWorkspaceAri_alias_1 }
export { CanvasWorkspaceAri as CanvasWorkspaceAri_alias_2 }

export declare interface CanvasWorkspaceAriOpts {
    siteId: string;
    workspaceId: string;
}

declare const CanvasWorkspaceAriResourceOwner = "canvas";
export { CanvasWorkspaceAriResourceOwner }
export { CanvasWorkspaceAriResourceOwner as CanvasWorkspaceAriResourceOwner_alias_1 }

declare const CanvasWorkspaceAriResourceType = "workspace";
export { CanvasWorkspaceAriResourceType }
export { CanvasWorkspaceAriResourceType as CanvasWorkspaceAriResourceType_alias_1 }

export declare const canvasWorkspaceAriStaticOpts: AriStaticProperties;

export declare const CardColorType: "card-color";

export declare const CardLayoutType: "card-layout";

export declare const CardParentType: "card-parent";

export declare const CardType: "card";

export declare const CatalogAccountType: "catalog-account";

export declare const ChangeType: "change";

export declare const ChannelType: "channel";

export declare const CheckType: "check";

export declare const ClassificationTagType: "classification-tag";

export declare const ClientType: "client";

export declare type CloudId = string | undefined;

declare class CmdbAttributeAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _attributeId;
    get workspaceId(): string;
    get attributeId(): string;
    static create(opts: CmdbAttributeAriOpts): CmdbAttributeAri;
    static parse(maybeAri: string): CmdbAttributeAri;
    getVariables(): {
        workspaceId: string;
        attributeId: string;
    };
}
export { CmdbAttributeAri }
export { CmdbAttributeAri as CmdbAttributeAri_alias_1 }
export { CmdbAttributeAri as CmdbAttributeAri_alias_2 }

export declare interface CmdbAttributeAriOpts {
    workspaceId: string;
    attributeId: string;
}

declare const CmdbAttributeAriResourceOwner = "cmdb";
export { CmdbAttributeAriResourceOwner }
export { CmdbAttributeAriResourceOwner as CmdbAttributeAriResourceOwner_alias_1 }

declare const CmdbAttributeAriResourceType = "attribute";
export { CmdbAttributeAriResourceType }
export { CmdbAttributeAriResourceType as CmdbAttributeAriResourceType_alias_1 }

export declare const cmdbAttributeAriStaticOpts: AriStaticProperties;

declare class CmdbImportConfigurationAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _importConfigId;
    get workspaceId(): string;
    get importConfigId(): string;
    static create(opts: CmdbImportConfigurationAriOpts): CmdbImportConfigurationAri;
    static parse(maybeAri: string): CmdbImportConfigurationAri;
    getVariables(): {
        workspaceId: string;
        importConfigId: string;
    };
}
export { CmdbImportConfigurationAri }
export { CmdbImportConfigurationAri as CmdbImportConfigurationAri_alias_1 }
export { CmdbImportConfigurationAri as CmdbImportConfigurationAri_alias_2 }

export declare interface CmdbImportConfigurationAriOpts {
    workspaceId: string;
    importConfigId: string;
}

declare const CmdbImportConfigurationAriResourceOwner = "cmdb";
export { CmdbImportConfigurationAriResourceOwner }
export { CmdbImportConfigurationAriResourceOwner as CmdbImportConfigurationAriResourceOwner_alias_1 }

declare const CmdbImportConfigurationAriResourceType = "import-configuration";
export { CmdbImportConfigurationAriResourceType }
export { CmdbImportConfigurationAriResourceType as CmdbImportConfigurationAriResourceType_alias_1 }

export declare const cmdbImportConfigurationAriStaticOpts: AriStaticProperties;

declare class CmdbObjectAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _objectId;
    get workspaceId(): string;
    get objectId(): string;
    static create(opts: CmdbObjectAriOpts): CmdbObjectAri;
    static parse(maybeAri: string): CmdbObjectAri;
    getVariables(): {
        workspaceId: string;
        objectId: string;
    };
}
export { CmdbObjectAri }
export { CmdbObjectAri as CmdbObjectAri_alias_1 }
export { CmdbObjectAri as CmdbObjectAri_alias_2 }

export declare interface CmdbObjectAriOpts {
    workspaceId: string;
    objectId: string;
}

declare const CmdbObjectAriResourceOwner = "cmdb";
export { CmdbObjectAriResourceOwner }
export { CmdbObjectAriResourceOwner as CmdbObjectAriResourceOwner_alias_1 }

declare const CmdbObjectAriResourceType = "object";
export { CmdbObjectAriResourceType }
export { CmdbObjectAriResourceType as CmdbObjectAriResourceType_alias_1 }

export declare const cmdbObjectAriStaticOpts: AriStaticProperties;

declare class CmdbRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleGroup;
    private readonly _roleType;
    get roleGroup(): string;
    get roleType(): string;
    static create(opts: CmdbRoleAriOpts): CmdbRoleAri;
    static parse(maybeAri: string): CmdbRoleAri;
    getVariables(): {
        roleGroup: string;
        roleType: string;
    };
}
export { CmdbRoleAri }
export { CmdbRoleAri as CmdbRoleAri_alias_1 }
export { CmdbRoleAri as CmdbRoleAri_alias_2 }

export declare interface CmdbRoleAriOpts {
    roleGroup: string;
    roleType: string;
}

declare const CmdbRoleAriResourceOwner = "cmdb";
export { CmdbRoleAriResourceOwner }
export { CmdbRoleAriResourceOwner as CmdbRoleAriResourceOwner_alias_1 }

declare const CmdbRoleAriResourceType = "role";
export { CmdbRoleAriResourceType }
export { CmdbRoleAriResourceType as CmdbRoleAriResourceType_alias_1 }

export declare const cmdbRoleAriStaticOpts: AriStaticProperties;

declare class CmdbSchemaAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _schemaId;
    get workspaceId(): string;
    get schemaId(): string;
    static create(opts: CmdbSchemaAriOpts): CmdbSchemaAri;
    static parse(maybeAri: string): CmdbSchemaAri;
    getVariables(): {
        workspaceId: string;
        schemaId: string;
    };
}
export { CmdbSchemaAri }
export { CmdbSchemaAri as CmdbSchemaAri_alias_1 }
export { CmdbSchemaAri as CmdbSchemaAri_alias_2 }

export declare interface CmdbSchemaAriOpts {
    workspaceId: string;
    schemaId: string;
}

declare const CmdbSchemaAriResourceOwner = "cmdb";
export { CmdbSchemaAriResourceOwner }
export { CmdbSchemaAriResourceOwner as CmdbSchemaAriResourceOwner_alias_1 }

declare const CmdbSchemaAriResourceType = "schema";
export { CmdbSchemaAriResourceType }
export { CmdbSchemaAriResourceType as CmdbSchemaAriResourceType_alias_1 }

export declare const cmdbSchemaAriStaticOpts: AriStaticProperties;

declare class CmdbTypeAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _typeId;
    get workspaceId(): string;
    get typeId(): string;
    static create(opts: CmdbTypeAriOpts): CmdbTypeAri;
    static parse(maybeAri: string): CmdbTypeAri;
    getVariables(): {
        workspaceId: string;
        typeId: string;
    };
}
export { CmdbTypeAri }
export { CmdbTypeAri as CmdbTypeAri_alias_1 }
export { CmdbTypeAri as CmdbTypeAri_alias_2 }

export declare interface CmdbTypeAriOpts {
    workspaceId: string;
    typeId: string;
}

declare const CmdbTypeAriResourceOwner = "cmdb";
export { CmdbTypeAriResourceOwner }
export { CmdbTypeAriResourceOwner as CmdbTypeAriResourceOwner_alias_1 }

declare const CmdbTypeAriResourceType = "type";
export { CmdbTypeAriResourceType }
export { CmdbTypeAriResourceType as CmdbTypeAriResourceType_alias_1 }

export declare const cmdbTypeAriStaticOpts: AriStaticProperties;

declare class CmdbWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    get workspaceId(): string;
    static create(opts: CmdbWorkspaceAriOpts): CmdbWorkspaceAri;
    static parse(maybeAri: string): CmdbWorkspaceAri;
    getVariables(): {
        workspaceId: string;
    };
}
export { CmdbWorkspaceAri }
export { CmdbWorkspaceAri as CmdbWorkspaceAri_alias_1 }
export { CmdbWorkspaceAri as CmdbWorkspaceAri_alias_2 }

export declare interface CmdbWorkspaceAriOpts {
    workspaceId: string;
}

declare const CmdbWorkspaceAriResourceOwner = "cmdb";
export { CmdbWorkspaceAriResourceOwner }
export { CmdbWorkspaceAriResourceOwner as CmdbWorkspaceAriResourceOwner_alias_1 }

declare const CmdbWorkspaceAriResourceType = "workspace";
export { CmdbWorkspaceAriResourceType }
export { CmdbWorkspaceAriResourceType as CmdbWorkspaceAriResourceType_alias_1 }

export declare const cmdbWorkspaceAriStaticOpts: AriStaticProperties;

export declare const ColumnType: "column";

export declare const CommentType: "comment";

declare class CommerceCatalogAccountAri extends RegisteredAri {
    private constructor();
    private readonly _catalogAccountId;
    get catalogAccountId(): string;
    static create(opts: CommerceCatalogAccountAriOpts): CommerceCatalogAccountAri;
    static parse(maybeAri: string): CommerceCatalogAccountAri;
    getVariables(): {
        catalogAccountId: string;
    };
}
export { CommerceCatalogAccountAri }
export { CommerceCatalogAccountAri as CommerceCatalogAccountAri_alias_1 }
export { CommerceCatalogAccountAri as CommerceCatalogAccountAri_alias_2 }

export declare interface CommerceCatalogAccountAriOpts {
    catalogAccountId: string;
}

declare const CommerceCatalogAccountAriResourceOwner = "commerce";
export { CommerceCatalogAccountAriResourceOwner }
export { CommerceCatalogAccountAriResourceOwner as CommerceCatalogAccountAriResourceOwner_alias_1 }

declare const CommerceCatalogAccountAriResourceType = "catalog-account";
export { CommerceCatalogAccountAriResourceType }
export { CommerceCatalogAccountAriResourceType as CommerceCatalogAccountAriResourceType_alias_1 }

export declare const commerceCatalogAccountAriStaticOpts: AriStaticProperties;

declare class CommerceChangeAri extends RegisteredAri {
    private constructor();
    private readonly _changeUuid;
    get changeUuid(): string;
    static create(opts: CommerceChangeAriOpts): CommerceChangeAri;
    static parse(maybeAri: string): CommerceChangeAri;
    getVariables(): {
        changeUuid: string;
    };
}
export { CommerceChangeAri }
export { CommerceChangeAri as CommerceChangeAri_alias_1 }
export { CommerceChangeAri as CommerceChangeAri_alias_2 }

export declare interface CommerceChangeAriOpts {
    changeUuid: string;
}

declare const CommerceChangeAriResourceOwner = "commerce";
export { CommerceChangeAriResourceOwner }
export { CommerceChangeAriResourceOwner as CommerceChangeAriResourceOwner_alias_1 }

declare const CommerceChangeAriResourceType = "change";
export { CommerceChangeAriResourceType }
export { CommerceChangeAriResourceType as CommerceChangeAriResourceType_alias_1 }

export declare const commerceChangeAriStaticOpts: AriStaticProperties;

declare class CommerceEntitlementAri extends RegisteredAri {
    private constructor();
    private readonly _entitlementId;
    get entitlementId(): string;
    static create(opts: CommerceEntitlementAriOpts): CommerceEntitlementAri;
    static parse(maybeAri: string): CommerceEntitlementAri;
    getVariables(): {
        entitlementId: string;
    };
}
export { CommerceEntitlementAri }
export { CommerceEntitlementAri as CommerceEntitlementAri_alias_1 }
export { CommerceEntitlementAri as CommerceEntitlementAri_alias_2 }

export declare interface CommerceEntitlementAriOpts {
    entitlementId: string;
}

declare const CommerceEntitlementAriResourceOwner = "commerce";
export { CommerceEntitlementAriResourceOwner }
export { CommerceEntitlementAriResourceOwner as CommerceEntitlementAriResourceOwner_alias_1 }

declare const CommerceEntitlementAriResourceType = "entitlement";
export { CommerceEntitlementAriResourceType }
export { CommerceEntitlementAriResourceType as CommerceEntitlementAriResourceType_alias_1 }

export declare const commerceEntitlementAriStaticOpts: AriStaticProperties;

declare class CommerceEntitlementTemplateAri extends RegisteredAri {
    private constructor();
    private readonly _entitlementTemplateId;
    get entitlementTemplateId(): string;
    static create(opts: CommerceEntitlementTemplateAriOpts): CommerceEntitlementTemplateAri;
    static parse(maybeAri: string): CommerceEntitlementTemplateAri;
    getVariables(): {
        entitlementTemplateId: string;
    };
}
export { CommerceEntitlementTemplateAri }
export { CommerceEntitlementTemplateAri as CommerceEntitlementTemplateAri_alias_1 }
export { CommerceEntitlementTemplateAri as CommerceEntitlementTemplateAri_alias_2 }

export declare interface CommerceEntitlementTemplateAriOpts {
    entitlementTemplateId: string;
}

declare const CommerceEntitlementTemplateAriResourceOwner = "commerce";
export { CommerceEntitlementTemplateAriResourceOwner }
export { CommerceEntitlementTemplateAriResourceOwner as CommerceEntitlementTemplateAriResourceOwner_alias_1 }

declare const CommerceEntitlementTemplateAriResourceType = "entitlement-template";
export { CommerceEntitlementTemplateAriResourceType }
export { CommerceEntitlementTemplateAriResourceType as CommerceEntitlementTemplateAriResourceType_alias_1 }

export declare const commerceEntitlementTemplateAriStaticOpts: AriStaticProperties;

declare class CommerceInitiativeAri extends RegisteredAri {
    private constructor();
    private readonly _initiativeUuid;
    get initiativeUuid(): string;
    static create(opts: CommerceInitiativeAriOpts): CommerceInitiativeAri;
    static parse(maybeAri: string): CommerceInitiativeAri;
    getVariables(): {
        initiativeUuid: string;
    };
}
export { CommerceInitiativeAri }
export { CommerceInitiativeAri as CommerceInitiativeAri_alias_1 }
export { CommerceInitiativeAri as CommerceInitiativeAri_alias_2 }

export declare interface CommerceInitiativeAriOpts {
    initiativeUuid: string;
}

declare const CommerceInitiativeAriResourceOwner = "commerce";
export { CommerceInitiativeAriResourceOwner }
export { CommerceInitiativeAriResourceOwner as CommerceInitiativeAriResourceOwner_alias_1 }

declare const CommerceInitiativeAriResourceType = "initiative";
export { CommerceInitiativeAriResourceType }
export { CommerceInitiativeAriResourceType as CommerceInitiativeAriResourceType_alias_1 }

export declare const commerceInitiativeAriStaticOpts: AriStaticProperties;

declare class CommerceInvoiceGroupAri extends RegisteredAri {
    private constructor();
    private readonly _txaId;
    private readonly _invoiceGroupId;
    get txaId(): string;
    get invoiceGroupId(): string;
    static create(opts: CommerceInvoiceGroupAriOpts): CommerceInvoiceGroupAri;
    static parse(maybeAri: string): CommerceInvoiceGroupAri;
    getVariables(): {
        txaId: string;
        invoiceGroupId: string;
    };
}
export { CommerceInvoiceGroupAri }
export { CommerceInvoiceGroupAri as CommerceInvoiceGroupAri_alias_1 }
export { CommerceInvoiceGroupAri as CommerceInvoiceGroupAri_alias_2 }

export declare interface CommerceInvoiceGroupAriOpts {
    txaId: string;
    invoiceGroupId: string;
}

declare const CommerceInvoiceGroupAriResourceOwner = "commerce";
export { CommerceInvoiceGroupAriResourceOwner }
export { CommerceInvoiceGroupAriResourceOwner as CommerceInvoiceGroupAriResourceOwner_alias_1 }

declare const CommerceInvoiceGroupAriResourceType = "invoice-group";
export { CommerceInvoiceGroupAriResourceType }
export { CommerceInvoiceGroupAriResourceType as CommerceInvoiceGroupAriResourceType_alias_1 }

export declare const commerceInvoiceGroupAriStaticOpts: AriStaticProperties;

declare class CommerceOfferingAri extends RegisteredAri {
    private constructor();
    private readonly _offeringId;
    get offeringId(): string;
    static create(opts: CommerceOfferingAriOpts): CommerceOfferingAri;
    static parse(maybeAri: string): CommerceOfferingAri;
    getVariables(): {
        offeringId: string;
    };
}
export { CommerceOfferingAri }
export { CommerceOfferingAri as CommerceOfferingAri_alias_1 }
export { CommerceOfferingAri as CommerceOfferingAri_alias_2 }

export declare interface CommerceOfferingAriOpts {
    offeringId: string;
}

declare const CommerceOfferingAriResourceOwner = "commerce";
export { CommerceOfferingAriResourceOwner }
export { CommerceOfferingAriResourceOwner as CommerceOfferingAriResourceOwner_alias_1 }

declare const CommerceOfferingAriResourceType = "offering";
export { CommerceOfferingAriResourceType }
export { CommerceOfferingAriResourceType as CommerceOfferingAriResourceType_alias_1 }

export declare const commerceOfferingAriStaticOpts: AriStaticProperties;

declare class CommerceOfferingRelationshipTemplateAri extends RegisteredAri {
    private constructor();
    private readonly _offeringRelationshipTemplateId;
    get offeringRelationshipTemplateId(): string;
    static create(opts: CommerceOfferingRelationshipTemplateAriOpts): CommerceOfferingRelationshipTemplateAri;
    static parse(maybeAri: string): CommerceOfferingRelationshipTemplateAri;
    getVariables(): {
        offeringRelationshipTemplateId: string;
    };
}
export { CommerceOfferingRelationshipTemplateAri }
export { CommerceOfferingRelationshipTemplateAri as CommerceOfferingRelationshipTemplateAri_alias_1 }
export { CommerceOfferingRelationshipTemplateAri as CommerceOfferingRelationshipTemplateAri_alias_2 }

export declare interface CommerceOfferingRelationshipTemplateAriOpts {
    offeringRelationshipTemplateId: string;
}

declare const CommerceOfferingRelationshipTemplateAriResourceOwner = "commerce";
export { CommerceOfferingRelationshipTemplateAriResourceOwner }
export { CommerceOfferingRelationshipTemplateAriResourceOwner as CommerceOfferingRelationshipTemplateAriResourceOwner_alias_1 }

declare const CommerceOfferingRelationshipTemplateAriResourceType = "offering-relationship-template";
export { CommerceOfferingRelationshipTemplateAriResourceType }
export { CommerceOfferingRelationshipTemplateAriResourceType as CommerceOfferingRelationshipTemplateAriResourceType_alias_1 }

export declare const commerceOfferingRelationshipTemplateAriStaticOpts: AriStaticProperties;

declare class CommerceOrderAri extends RegisteredAri {
    private constructor();
    private readonly _txaId;
    private readonly _orderId;
    get txaId(): string;
    get orderId(): string;
    static create(opts: CommerceOrderAriOpts): CommerceOrderAri;
    static parse(maybeAri: string): CommerceOrderAri;
    getVariables(): {
        txaId: string;
        orderId: string;
    };
}
export { CommerceOrderAri }
export { CommerceOrderAri as CommerceOrderAri_alias_1 }
export { CommerceOrderAri as CommerceOrderAri_alias_2 }

export declare interface CommerceOrderAriOpts {
    txaId: string;
    orderId: string;
}

declare const CommerceOrderAriResourceOwner = "commerce";
export { CommerceOrderAriResourceOwner }
export { CommerceOrderAriResourceOwner as CommerceOrderAriResourceOwner_alias_1 }

declare const CommerceOrderAriResourceType = "order";
export { CommerceOrderAriResourceType }
export { CommerceOrderAriResourceType as CommerceOrderAriResourceType_alias_1 }

export declare const commerceOrderAriStaticOpts: AriStaticProperties;

declare class CommercePaymentMethodAri extends RegisteredAri {
    private constructor();
    private readonly _txaId;
    private readonly _paymentMethodId;
    get txaId(): string;
    get paymentMethodId(): string;
    static create(opts: CommercePaymentMethodAriOpts): CommercePaymentMethodAri;
    static parse(maybeAri: string): CommercePaymentMethodAri;
    getVariables(): {
        txaId: string;
        paymentMethodId: string;
    };
}
export { CommercePaymentMethodAri }
export { CommercePaymentMethodAri as CommercePaymentMethodAri_alias_1 }
export { CommercePaymentMethodAri as CommercePaymentMethodAri_alias_2 }

export declare interface CommercePaymentMethodAriOpts {
    txaId: string;
    paymentMethodId: string;
}

declare const CommercePaymentMethodAriResourceOwner = "commerce";
export { CommercePaymentMethodAriResourceOwner }
export { CommercePaymentMethodAriResourceOwner as CommercePaymentMethodAriResourceOwner_alias_1 }

declare const CommercePaymentMethodAriResourceType = "payment-method";
export { CommercePaymentMethodAriResourceType }
export { CommercePaymentMethodAriResourceType as CommercePaymentMethodAriResourceType_alias_1 }

export declare const commercePaymentMethodAriStaticOpts: AriStaticProperties;

declare class CommercePricingPlanAri extends RegisteredAri {
    private constructor();
    private readonly _pricingPlanId;
    get pricingPlanId(): string;
    static create(opts: CommercePricingPlanAriOpts): CommercePricingPlanAri;
    static parse(maybeAri: string): CommercePricingPlanAri;
    getVariables(): {
        pricingPlanId: string;
    };
}
export { CommercePricingPlanAri }
export { CommercePricingPlanAri as CommercePricingPlanAri_alias_1 }
export { CommercePricingPlanAri as CommercePricingPlanAri_alias_2 }

export declare interface CommercePricingPlanAriOpts {
    pricingPlanId: string;
}

declare const CommercePricingPlanAriResourceOwner = "commerce";
export { CommercePricingPlanAriResourceOwner }
export { CommercePricingPlanAriResourceOwner as CommercePricingPlanAriResourceOwner_alias_1 }

declare const CommercePricingPlanAriResourceType = "pricing-plan";
export { CommercePricingPlanAriResourceType }
export { CommercePricingPlanAriResourceType as CommercePricingPlanAriResourceType_alias_1 }

export declare const commercePricingPlanAriStaticOpts: AriStaticProperties;

declare class CommerceProductAri extends RegisteredAri {
    private constructor();
    private readonly _productId;
    get productId(): string;
    static create(opts: CommerceProductAriOpts): CommerceProductAri;
    static parse(maybeAri: string): CommerceProductAri;
    getVariables(): {
        productId: string;
    };
}
export { CommerceProductAri }
export { CommerceProductAri as CommerceProductAri_alias_1 }
export { CommerceProductAri as CommerceProductAri_alias_2 }

export declare interface CommerceProductAriOpts {
    productId: string;
}

declare const CommerceProductAriResourceOwner = "commerce";
export { CommerceProductAriResourceOwner }
export { CommerceProductAriResourceOwner as CommerceProductAriResourceOwner_alias_1 }

declare const CommerceProductAriResourceType = "product";
export { CommerceProductAriResourceType }
export { CommerceProductAriResourceType as CommerceProductAriResourceType_alias_1 }

export declare const commerceProductAriStaticOpts: AriStaticProperties;

declare class CommercePromotionAri extends RegisteredAri {
    private constructor();
    private readonly _promotionId;
    get promotionId(): string;
    static create(opts: CommercePromotionAriOpts): CommercePromotionAri;
    static parse(maybeAri: string): CommercePromotionAri;
    getVariables(): {
        promotionId: string;
    };
}
export { CommercePromotionAri }
export { CommercePromotionAri as CommercePromotionAri_alias_1 }
export { CommercePromotionAri as CommercePromotionAri_alias_2 }

export declare interface CommercePromotionAriOpts {
    promotionId: string;
}

declare const CommercePromotionAriResourceOwner = "commerce";
export { CommercePromotionAriResourceOwner }
export { CommercePromotionAriResourceOwner as CommercePromotionAriResourceOwner_alias_1 }

declare const CommercePromotionAriResourceType = "promotion";
export { CommercePromotionAriResourceType }
export { CommercePromotionAriResourceType as CommercePromotionAriResourceType_alias_1 }

export declare const commercePromotionAriStaticOpts: AriStaticProperties;

declare class CommerceQuoteAri extends RegisteredAri {
    private constructor();
    private readonly _txaId;
    private readonly _quoteId;
    get txaId(): string;
    get quoteId(): string;
    static create(opts: CommerceQuoteAriOpts): CommerceQuoteAri;
    static parse(maybeAri: string): CommerceQuoteAri;
    getVariables(): {
        txaId: string;
        quoteId: string;
    };
}
export { CommerceQuoteAri }
export { CommerceQuoteAri as CommerceQuoteAri_alias_1 }
export { CommerceQuoteAri as CommerceQuoteAri_alias_2 }

export declare interface CommerceQuoteAriOpts {
    txaId: string;
    quoteId: string;
}

declare const CommerceQuoteAriResourceOwner = "commerce";
export { CommerceQuoteAriResourceOwner }
export { CommerceQuoteAriResourceOwner as CommerceQuoteAriResourceOwner_alias_1 }

declare const CommerceQuoteAriResourceType = "quote";
export { CommerceQuoteAriResourceType }
export { CommerceQuoteAriResourceType as CommerceQuoteAriResourceType_alias_1 }

export declare const commerceQuoteAriStaticOpts: AriStaticProperties;

declare class CommerceRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleId;
    get roleId(): string;
    static create(opts: CommerceRoleAriOpts): CommerceRoleAri;
    static parse(maybeAri: string): CommerceRoleAri;
    getVariables(): {
        roleId: string;
    };
}
export { CommerceRoleAri }
export { CommerceRoleAri as CommerceRoleAri_alias_1 }
export { CommerceRoleAri as CommerceRoleAri_alias_2 }

export declare interface CommerceRoleAriOpts {
    roleId: string;
}

declare const CommerceRoleAriResourceOwner = "commerce";
export { CommerceRoleAriResourceOwner }
export { CommerceRoleAriResourceOwner as CommerceRoleAriResourceOwner_alias_1 }

declare const CommerceRoleAriResourceType = "role";
export { CommerceRoleAriResourceType }
export { CommerceRoleAriResourceType as CommerceRoleAriResourceType_alias_1 }

export declare const commerceRoleAriStaticOpts: AriStaticProperties;

declare class CommerceShipToPartyAri extends RegisteredAri {
    private constructor();
    private readonly _txaId;
    private readonly _shipToPartyId;
    get txaId(): string;
    get shipToPartyId(): string;
    static create(opts: CommerceShipToPartyAriOpts): CommerceShipToPartyAri;
    static parse(maybeAri: string): CommerceShipToPartyAri;
    getVariables(): {
        txaId: string;
        shipToPartyId: string;
    };
}
export { CommerceShipToPartyAri }
export { CommerceShipToPartyAri as CommerceShipToPartyAri_alias_1 }
export { CommerceShipToPartyAri as CommerceShipToPartyAri_alias_2 }

export declare interface CommerceShipToPartyAriOpts {
    txaId: string;
    shipToPartyId: string;
}

declare const CommerceShipToPartyAriResourceOwner = "commerce";
export { CommerceShipToPartyAriResourceOwner }
export { CommerceShipToPartyAriResourceOwner as CommerceShipToPartyAriResourceOwner_alias_1 }

declare const CommerceShipToPartyAriResourceType = "ship-to-party";
export { CommerceShipToPartyAriResourceType }
export { CommerceShipToPartyAriResourceType as CommerceShipToPartyAriResourceType_alias_1 }

export declare const commerceShipToPartyAriStaticOpts: AriStaticProperties;

declare class CommerceTransactionAccountAri extends RegisteredAri {
    private constructor();
    private readonly _txaId;
    get txaId(): string;
    static create(opts: CommerceTransactionAccountAriOpts): CommerceTransactionAccountAri;
    static parse(maybeAri: string): CommerceTransactionAccountAri;
    getVariables(): {
        txaId: string;
    };
}
export { CommerceTransactionAccountAri }
export { CommerceTransactionAccountAri as CommerceTransactionAccountAri_alias_1 }
export { CommerceTransactionAccountAri as CommerceTransactionAccountAri_alias_2 }

export declare interface CommerceTransactionAccountAriOpts {
    txaId: string;
}

declare const CommerceTransactionAccountAriResourceOwner = "commerce";
export { CommerceTransactionAccountAriResourceOwner }
export { CommerceTransactionAccountAriResourceOwner as CommerceTransactionAccountAriResourceOwner_alias_1 }

declare const CommerceTransactionAccountAriResourceType = "transaction-account";
export { CommerceTransactionAccountAriResourceType }
export { CommerceTransactionAccountAriResourceType as CommerceTransactionAccountAriResourceType_alias_1 }

export declare const commerceTransactionAccountAriStaticOpts: AriStaticProperties;

declare class CommerceWorkbenchResourceAri extends RegisteredAri {
    private constructor();
    private readonly _resourceName;
    get resourceName(): string;
    static create(opts: CommerceWorkbenchResourceAriOpts): CommerceWorkbenchResourceAri;
    static parse(maybeAri: string): CommerceWorkbenchResourceAri;
    getVariables(): {
        resourceName: string;
    };
}
export { CommerceWorkbenchResourceAri }
export { CommerceWorkbenchResourceAri as CommerceWorkbenchResourceAri_alias_1 }
export { CommerceWorkbenchResourceAri as CommerceWorkbenchResourceAri_alias_2 }

export declare interface CommerceWorkbenchResourceAriOpts {
    resourceName: string;
}

declare const CommerceWorkbenchResourceAriResourceOwner = "commerce";
export { CommerceWorkbenchResourceAriResourceOwner }
export { CommerceWorkbenchResourceAriResourceOwner as CommerceWorkbenchResourceAriResourceOwner_alias_1 }

declare const CommerceWorkbenchResourceAriResourceType = "workbench-resource";
export { CommerceWorkbenchResourceAriResourceType }
export { CommerceWorkbenchResourceAriResourceType as CommerceWorkbenchResourceAriResourceType_alias_1 }

export declare const commerceWorkbenchResourceAriStaticOpts: AriStaticProperties;

export declare const CommitType: "commit";

declare class CompassAssistantAnswerAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _answerId;
    get siteId(): string;
    get workspaceId(): string;
    get answerId(): string;
    static create(opts: CompassAssistantAnswerAriOpts): CompassAssistantAnswerAri;
    static parse(maybeAri: string): CompassAssistantAnswerAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        answerId: string;
    };
}
export { CompassAssistantAnswerAri }
export { CompassAssistantAnswerAri as CompassAssistantAnswerAri_alias_1 }
export { CompassAssistantAnswerAri as CompassAssistantAnswerAri_alias_2 }

export declare interface CompassAssistantAnswerAriOpts {
    siteId: string;
    workspaceId: string;
    answerId: string;
}

declare const CompassAssistantAnswerAriResourceOwner = "compass";
export { CompassAssistantAnswerAriResourceOwner }
export { CompassAssistantAnswerAriResourceOwner as CompassAssistantAnswerAriResourceOwner_alias_1 }

declare const CompassAssistantAnswerAriResourceType = "assistant-answer";
export { CompassAssistantAnswerAriResourceType }
export { CompassAssistantAnswerAriResourceType as CompassAssistantAnswerAriResourceType_alias_1 }

export declare const compassAssistantAnswerAriStaticOpts: AriStaticProperties;

declare class CompassComponentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _componentId;
    get siteId(): string;
    get workspaceId(): string;
    get componentId(): string;
    static create(opts: CompassComponentAriOpts): CompassComponentAri;
    static parse(maybeAri: string): CompassComponentAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        componentId: string;
    };
}
export { CompassComponentAri }
export { CompassComponentAri as CompassComponentAri_alias_1 }
export { CompassComponentAri as CompassComponentAri_alias_2 }

export declare interface CompassComponentAriOpts {
    siteId: string;
    workspaceId: string;
    componentId: string;
}

declare const CompassComponentAriResourceOwner = "compass";
export { CompassComponentAriResourceOwner }
export { CompassComponentAriResourceOwner as CompassComponentAriResourceOwner_alias_1 }

declare const CompassComponentAriResourceType = "component";
export { CompassComponentAriResourceType }
export { CompassComponentAriResourceType as CompassComponentAriResourceType_alias_1 }

export declare const compassComponentAriStaticOpts: AriStaticProperties;

declare class CompassComponentLabelAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _labelId;
    get siteId(): string;
    get workspaceId(): string;
    get labelId(): string;
    static create(opts: CompassComponentLabelAriOpts): CompassComponentLabelAri;
    static parse(maybeAri: string): CompassComponentLabelAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        labelId: string;
    };
}
export { CompassComponentLabelAri }
export { CompassComponentLabelAri as CompassComponentLabelAri_alias_1 }
export { CompassComponentLabelAri as CompassComponentLabelAri_alias_2 }

export declare interface CompassComponentLabelAriOpts {
    siteId: string;
    workspaceId: string;
    labelId: string;
}

declare const CompassComponentLabelAriResourceOwner = "compass";
export { CompassComponentLabelAriResourceOwner }
export { CompassComponentLabelAriResourceOwner as CompassComponentLabelAriResourceOwner_alias_1 }

declare const CompassComponentLabelAriResourceType = "component-label";
export { CompassComponentLabelAriResourceType }
export { CompassComponentLabelAriResourceType as CompassComponentLabelAriResourceType_alias_1 }

export declare const compassComponentLabelAriStaticOpts: AriStaticProperties;

declare class CompassComponentLinkAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _componentId;
    private readonly _componentLinkId;
    get siteId(): string;
    get workspaceId(): string;
    get componentId(): string;
    get componentLinkId(): string;
    static create(opts: CompassComponentLinkAriOpts): CompassComponentLinkAri;
    static parse(maybeAri: string): CompassComponentLinkAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        componentId: string;
        componentLinkId: string;
    };
}
export { CompassComponentLinkAri }
export { CompassComponentLinkAri as CompassComponentLinkAri_alias_1 }
export { CompassComponentLinkAri as CompassComponentLinkAri_alias_2 }

export declare interface CompassComponentLinkAriOpts {
    siteId: string;
    workspaceId: string;
    componentId: string;
    componentLinkId: string;
}

declare const CompassComponentLinkAriResourceOwner = "compass";
export { CompassComponentLinkAriResourceOwner }
export { CompassComponentLinkAriResourceOwner as CompassComponentLinkAriResourceOwner_alias_1 }

declare const CompassComponentLinkAriResourceType = "component-link";
export { CompassComponentLinkAriResourceType }
export { CompassComponentLinkAriResourceType as CompassComponentLinkAriResourceType_alias_1 }

export declare const compassComponentLinkAriStaticOpts: AriStaticProperties;

declare class CompassCustomFieldDefinitionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _definitionId;
    get siteId(): string;
    get workspaceId(): string;
    get definitionId(): string;
    static create(opts: CompassCustomFieldDefinitionAriOpts): CompassCustomFieldDefinitionAri;
    static parse(maybeAri: string): CompassCustomFieldDefinitionAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        definitionId: string;
    };
}
export { CompassCustomFieldDefinitionAri }
export { CompassCustomFieldDefinitionAri as CompassCustomFieldDefinitionAri_alias_1 }
export { CompassCustomFieldDefinitionAri as CompassCustomFieldDefinitionAri_alias_2 }

export declare interface CompassCustomFieldDefinitionAriOpts {
    siteId: string;
    workspaceId: string;
    definitionId: string;
}

declare const CompassCustomFieldDefinitionAriResourceOwner = "compass";
export { CompassCustomFieldDefinitionAriResourceOwner }
export { CompassCustomFieldDefinitionAriResourceOwner as CompassCustomFieldDefinitionAriResourceOwner_alias_1 }

declare const CompassCustomFieldDefinitionAriResourceType = "custom-field-definition";
export { CompassCustomFieldDefinitionAriResourceType }
export { CompassCustomFieldDefinitionAriResourceType as CompassCustomFieldDefinitionAriResourceType_alias_1 }

export declare const compassCustomFieldDefinitionAriStaticOpts: AriStaticProperties;

declare class CompassDocumentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _documentId;
    get siteId(): string;
    get workspaceId(): string;
    get documentId(): string;
    static create(opts: CompassDocumentAriOpts): CompassDocumentAri;
    static parse(maybeAri: string): CompassDocumentAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        documentId: string;
    };
}
export { CompassDocumentAri }
export { CompassDocumentAri as CompassDocumentAri_alias_1 }
export { CompassDocumentAri as CompassDocumentAri_alias_2 }

export declare interface CompassDocumentAriOpts {
    siteId: string;
    workspaceId: string;
    documentId: string;
}

declare const CompassDocumentAriResourceOwner = "compass";
export { CompassDocumentAriResourceOwner }
export { CompassDocumentAriResourceOwner as CompassDocumentAriResourceOwner_alias_1 }

declare const CompassDocumentAriResourceType = "document";
export { CompassDocumentAriResourceType }
export { CompassDocumentAriResourceType as CompassDocumentAriResourceType_alias_1 }

export declare const compassDocumentAriStaticOpts: AriStaticProperties;

declare class CompassDocumentationCategoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _documentationCategoryId;
    get siteId(): string;
    get workspaceId(): string;
    get documentationCategoryId(): string;
    static create(opts: CompassDocumentationCategoryAriOpts): CompassDocumentationCategoryAri;
    static parse(maybeAri: string): CompassDocumentationCategoryAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        documentationCategoryId: string;
    };
}
export { CompassDocumentationCategoryAri }
export { CompassDocumentationCategoryAri as CompassDocumentationCategoryAri_alias_1 }
export { CompassDocumentationCategoryAri as CompassDocumentationCategoryAri_alias_2 }

export declare interface CompassDocumentationCategoryAriOpts {
    siteId: string;
    workspaceId: string;
    documentationCategoryId: string;
}

declare const CompassDocumentationCategoryAriResourceOwner = "compass";
export { CompassDocumentationCategoryAriResourceOwner }
export { CompassDocumentationCategoryAriResourceOwner as CompassDocumentationCategoryAriResourceOwner_alias_1 }

declare const CompassDocumentationCategoryAriResourceType = "documentation-category";
export { CompassDocumentationCategoryAriResourceType }
export { CompassDocumentationCategoryAriResourceType as CompassDocumentationCategoryAriResourceType_alias_1 }

export declare const compassDocumentationCategoryAriStaticOpts: AriStaticProperties;

declare class CompassEventSourceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _eventSourceId;
    get siteId(): string;
    get workspaceId(): string;
    get eventSourceId(): string;
    static create(opts: CompassEventSourceAriOpts): CompassEventSourceAri;
    static parse(maybeAri: string): CompassEventSourceAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        eventSourceId: string;
    };
}
export { CompassEventSourceAri }
export { CompassEventSourceAri as CompassEventSourceAri_alias_1 }
export { CompassEventSourceAri as CompassEventSourceAri_alias_2 }

export declare interface CompassEventSourceAriOpts {
    siteId: string;
    workspaceId: string;
    eventSourceId: string;
}

declare const CompassEventSourceAriResourceOwner = "compass";
export { CompassEventSourceAriResourceOwner }
export { CompassEventSourceAriResourceOwner as CompassEventSourceAriResourceOwner_alias_1 }

declare const CompassEventSourceAriResourceType = "event-source";
export { CompassEventSourceAriResourceType }
export { CompassEventSourceAriResourceType as CompassEventSourceAriResourceType_alias_1 }

export declare const compassEventSourceAriStaticOpts: AriStaticProperties;

declare class CompassIncomingWebhookAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _incomingWebhookId;
    get siteId(): string;
    get workspaceId(): string;
    get incomingWebhookId(): string;
    static create(opts: CompassIncomingWebhookAriOpts): CompassIncomingWebhookAri;
    static parse(maybeAri: string): CompassIncomingWebhookAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        incomingWebhookId: string;
    };
}
export { CompassIncomingWebhookAri }
export { CompassIncomingWebhookAri as CompassIncomingWebhookAri_alias_1 }
export { CompassIncomingWebhookAri as CompassIncomingWebhookAri_alias_2 }

export declare interface CompassIncomingWebhookAriOpts {
    siteId: string;
    workspaceId: string;
    incomingWebhookId: string;
}

declare const CompassIncomingWebhookAriResourceOwner = "compass";
export { CompassIncomingWebhookAriResourceOwner }
export { CompassIncomingWebhookAriResourceOwner as CompassIncomingWebhookAriResourceOwner_alias_1 }

declare const CompassIncomingWebhookAriResourceType = "incoming-webhook";
export { CompassIncomingWebhookAriResourceType }
export { CompassIncomingWebhookAriResourceType as CompassIncomingWebhookAriResourceType_alias_1 }

export declare const compassIncomingWebhookAriStaticOpts: AriStaticProperties;

declare class CompassMetricDefinitionAri extends RegisteredAri {
    private constructor();
    private readonly _optionalSiteId;
    private readonly _containerId;
    private readonly _definitionId;
    get optionalSiteId(): string;
    get containerId(): string;
    get definitionId(): string;
    static create(opts: CompassMetricDefinitionAriOpts): CompassMetricDefinitionAri;
    static parse(maybeAri: string): CompassMetricDefinitionAri;
    getVariables(): {
        optionalSiteId: string;
        containerId: string;
        definitionId: string;
    };
}
export { CompassMetricDefinitionAri }
export { CompassMetricDefinitionAri as CompassMetricDefinitionAri_alias_1 }
export { CompassMetricDefinitionAri as CompassMetricDefinitionAri_alias_2 }

export declare interface CompassMetricDefinitionAriOpts {
    optionalSiteId?: string;
    containerId: string;
    definitionId: string;
}

declare const CompassMetricDefinitionAriResourceOwner = "compass";
export { CompassMetricDefinitionAriResourceOwner }
export { CompassMetricDefinitionAriResourceOwner as CompassMetricDefinitionAriResourceOwner_alias_1 }

declare const CompassMetricDefinitionAriResourceType = "metric-definition";
export { CompassMetricDefinitionAriResourceType }
export { CompassMetricDefinitionAriResourceType as CompassMetricDefinitionAriResourceType_alias_1 }

export declare const compassMetricDefinitionAriStaticOpts: AriStaticProperties;

declare class CompassMetricSourceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _metricSourceId;
    get siteId(): string;
    get workspaceId(): string;
    get metricSourceId(): string;
    static create(opts: CompassMetricSourceAriOpts): CompassMetricSourceAri;
    static parse(maybeAri: string): CompassMetricSourceAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        metricSourceId: string;
    };
}
export { CompassMetricSourceAri }
export { CompassMetricSourceAri as CompassMetricSourceAri_alias_1 }
export { CompassMetricSourceAri as CompassMetricSourceAri_alias_2 }

export declare interface CompassMetricSourceAriOpts {
    siteId: string;
    workspaceId: string;
    metricSourceId: string;
}

declare const CompassMetricSourceAriResourceOwner = "compass";
export { CompassMetricSourceAriResourceOwner }
export { CompassMetricSourceAriResourceOwner as CompassMetricSourceAriResourceOwner_alias_1 }

declare const CompassMetricSourceAriResourceType = "metric-source";
export { CompassMetricSourceAriResourceType }
export { CompassMetricSourceAriResourceType as CompassMetricSourceAriResourceType_alias_1 }

export declare const compassMetricSourceAriStaticOpts: AriStaticProperties;

declare class CompassRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleType;
    get roleType(): string;
    static create(opts: CompassRoleAriOpts): CompassRoleAri;
    static parse(maybeAri: string): CompassRoleAri;
    getVariables(): {
        roleType: string;
    };
}
export { CompassRoleAri }
export { CompassRoleAri as CompassRoleAri_alias_1 }
export { CompassRoleAri as CompassRoleAri_alias_2 }

export declare interface CompassRoleAriOpts {
    roleType: string;
}

declare const CompassRoleAriResourceOwner = "compass";
export { CompassRoleAriResourceOwner }
export { CompassRoleAriResourceOwner as CompassRoleAriResourceOwner_alias_1 }

declare const CompassRoleAriResourceType = "role";
export { CompassRoleAriResourceType }
export { CompassRoleAriResourceType as CompassRoleAriResourceType_alias_1 }

export declare const compassRoleAriStaticOpts: AriStaticProperties;

declare class CompassScorecardAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _scorecardId;
    get siteId(): string;
    get workspaceId(): string;
    get scorecardId(): string;
    static create(opts: CompassScorecardAriOpts): CompassScorecardAri;
    static parse(maybeAri: string): CompassScorecardAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        scorecardId: string;
    };
}
export { CompassScorecardAri }
export { CompassScorecardAri as CompassScorecardAri_alias_1 }
export { CompassScorecardAri as CompassScorecardAri_alias_2 }

export declare interface CompassScorecardAriOpts {
    siteId: string;
    workspaceId: string;
    scorecardId: string;
}

declare const CompassScorecardAriResourceOwner = "compass";
export { CompassScorecardAriResourceOwner }
export { CompassScorecardAriResourceOwner as CompassScorecardAriResourceOwner_alias_1 }

declare const CompassScorecardAriResourceType = "scorecard";
export { CompassScorecardAriResourceType }
export { CompassScorecardAriResourceType as CompassScorecardAriResourceType_alias_1 }

export declare const compassScorecardAriStaticOpts: AriStaticProperties;

declare class CompassSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: CompassSiteAriOpts): CompassSiteAri;
    static parse(maybeAri: string): CompassSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { CompassSiteAri }
export { CompassSiteAri as CompassSiteAri_alias_1 }
export { CompassSiteAri as CompassSiteAri_alias_2 }

export declare interface CompassSiteAriOpts {
    siteId: string;
}

declare const CompassSiteAriResourceOwner = "compass";
export { CompassSiteAriResourceOwner }
export { CompassSiteAriResourceOwner as CompassSiteAriResourceOwner_alias_1 }

declare const CompassSiteAriResourceType = "site";
export { CompassSiteAriResourceType }
export { CompassSiteAriResourceType as CompassSiteAriResourceType_alias_1 }

export declare const compassSiteAriStaticOpts: AriStaticProperties;

declare class CompassUserDefinedParameterAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _userDefinedParameterId;
    get siteId(): string;
    get workspaceId(): string;
    get userDefinedParameterId(): string;
    static create(opts: CompassUserDefinedParameterAriOpts): CompassUserDefinedParameterAri;
    static parse(maybeAri: string): CompassUserDefinedParameterAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        userDefinedParameterId: string;
    };
}
export { CompassUserDefinedParameterAri }
export { CompassUserDefinedParameterAri as CompassUserDefinedParameterAri_alias_1 }
export { CompassUserDefinedParameterAri as CompassUserDefinedParameterAri_alias_2 }

export declare interface CompassUserDefinedParameterAriOpts {
    siteId: string;
    workspaceId: string;
    userDefinedParameterId: string;
}

declare const CompassUserDefinedParameterAriResourceOwner = "compass";
export { CompassUserDefinedParameterAriResourceOwner }
export { CompassUserDefinedParameterAriResourceOwner as CompassUserDefinedParameterAriResourceOwner_alias_1 }

declare const CompassUserDefinedParameterAriResourceType = "user-defined-parameter";
export { CompassUserDefinedParameterAriResourceType }
export { CompassUserDefinedParameterAriResourceType as CompassUserDefinedParameterAriResourceType_alias_1 }

export declare const compassUserDefinedParameterAriStaticOpts: AriStaticProperties;

declare class CompassWebhookAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _webhookId;
    get siteId(): string;
    get workspaceId(): string;
    get webhookId(): string;
    static create(opts: CompassWebhookAriOpts): CompassWebhookAri;
    static parse(maybeAri: string): CompassWebhookAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        webhookId: string;
    };
}
export { CompassWebhookAri }
export { CompassWebhookAri as CompassWebhookAri_alias_1 }
export { CompassWebhookAri as CompassWebhookAri_alias_2 }

export declare interface CompassWebhookAriOpts {
    siteId: string;
    workspaceId: string;
    webhookId: string;
}

declare const CompassWebhookAriResourceOwner = "compass";
export { CompassWebhookAriResourceOwner }
export { CompassWebhookAriResourceOwner as CompassWebhookAriResourceOwner_alias_1 }

declare const CompassWebhookAriResourceType = "webhook";
export { CompassWebhookAriResourceType }
export { CompassWebhookAriResourceType as CompassWebhookAriResourceType_alias_1 }

export declare const compassWebhookAriStaticOpts: AriStaticProperties;

declare class CompassWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    get siteId(): string;
    get workspaceId(): string;
    static create(opts: CompassWorkspaceAriOpts): CompassWorkspaceAri;
    static parse(maybeAri: string): CompassWorkspaceAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
    };
}
export { CompassWorkspaceAri }
export { CompassWorkspaceAri as CompassWorkspaceAri_alias_1 }
export { CompassWorkspaceAri as CompassWorkspaceAri_alias_2 }

export declare interface CompassWorkspaceAriOpts {
    siteId: string;
    workspaceId: string;
}

declare const CompassWorkspaceAriResourceOwner = "compass";
export { CompassWorkspaceAriResourceOwner }
export { CompassWorkspaceAriResourceOwner as CompassWorkspaceAriResourceOwner_alias_1 }

declare const CompassWorkspaceAriResourceType = "workspace";
export { CompassWorkspaceAriResourceType }
export { CompassWorkspaceAriResourceType as CompassWorkspaceAriResourceType_alias_1 }

export declare const compassWorkspaceAriStaticOpts: AriStaticProperties;

export declare const ComponentLabelType: "component-label";

export declare const ComponentLinkType: "component-link";

export declare const ComponentType: "component";

export declare const ConfigurationType: "configuration";

declare class ConfluenceAdminAnnouncementBannerAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _bannerId;
    get siteId(): string;
    get activationId(): string;
    get bannerId(): string;
    static create(opts: ConfluenceAdminAnnouncementBannerAriOpts): ConfluenceAdminAnnouncementBannerAri;
    static parse(maybeAri: string): ConfluenceAdminAnnouncementBannerAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        bannerId: string;
    };
}
export { ConfluenceAdminAnnouncementBannerAri }
export { ConfluenceAdminAnnouncementBannerAri as ConfluenceAdminAnnouncementBannerAri_alias_1 }
export { ConfluenceAdminAnnouncementBannerAri as ConfluenceAdminAnnouncementBannerAri_alias_2 }

export declare interface ConfluenceAdminAnnouncementBannerAriOpts {
    siteId: string;
    activationId: string;
    bannerId: string;
}

declare const ConfluenceAdminAnnouncementBannerAriResourceOwner = "confluence";
export { ConfluenceAdminAnnouncementBannerAriResourceOwner }
export { ConfluenceAdminAnnouncementBannerAriResourceOwner as ConfluenceAdminAnnouncementBannerAriResourceOwner_alias_1 }

declare const ConfluenceAdminAnnouncementBannerAriResourceType = "admin-announcement-banner";
export { ConfluenceAdminAnnouncementBannerAriResourceType }
export { ConfluenceAdminAnnouncementBannerAriResourceType as ConfluenceAdminAnnouncementBannerAriResourceType_alias_1 }

export declare const confluenceAdminAnnouncementBannerAriStaticOpts: AriStaticProperties;

declare class ConfluenceAttachmentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _attachmentId;
    get siteId(): string;
    get attachmentId(): string;
    static create(opts: ConfluenceAttachmentAriOpts): ConfluenceAttachmentAri;
    static parse(maybeAri: string): ConfluenceAttachmentAri;
    getVariables(): {
        siteId: string;
        attachmentId: string;
    };
}
export { ConfluenceAttachmentAri }
export { ConfluenceAttachmentAri as ConfluenceAttachmentAri_alias_1 }
export { ConfluenceAttachmentAri as ConfluenceAttachmentAri_alias_2 }

export declare interface ConfluenceAttachmentAriOpts {
    siteId: string;
    attachmentId: string;
}

declare const ConfluenceAttachmentAriResourceOwner = "confluence";
export { ConfluenceAttachmentAriResourceOwner }
export { ConfluenceAttachmentAriResourceOwner as ConfluenceAttachmentAriResourceOwner_alias_1 }

declare const ConfluenceAttachmentAriResourceType = "attachment";
export { ConfluenceAttachmentAriResourceType }
export { ConfluenceAttachmentAriResourceType as ConfluenceAttachmentAriResourceType_alias_1 }

export declare const confluenceAttachmentAriStaticOpts: AriStaticProperties;

declare class ConfluenceBlogpostAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _blogpostId;
    get siteId(): string;
    get blogpostId(): string;
    static create(opts: ConfluenceBlogpostAriOpts): ConfluenceBlogpostAri;
    static parse(maybeAri: string): ConfluenceBlogpostAri;
    getVariables(): {
        siteId: string;
        blogpostId: string;
    };
}
export { ConfluenceBlogpostAri }
export { ConfluenceBlogpostAri as ConfluenceBlogpostAri_alias_1 }
export { ConfluenceBlogpostAri as ConfluenceBlogpostAri_alias_2 }

export declare interface ConfluenceBlogpostAriOpts {
    siteId: string;
    blogpostId: string;
}

declare const ConfluenceBlogpostAriResourceOwner = "confluence";
export { ConfluenceBlogpostAriResourceOwner }
export { ConfluenceBlogpostAriResourceOwner as ConfluenceBlogpostAriResourceOwner_alias_1 }

declare const ConfluenceBlogpostAriResourceType = "blogpost";
export { ConfluenceBlogpostAriResourceType }
export { ConfluenceBlogpostAriResourceType as ConfluenceBlogpostAriResourceType_alias_1 }

export declare const confluenceBlogpostAriStaticOpts: AriStaticProperties;

declare class ConfluenceCommentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _commentId;
    get siteId(): string;
    get commentId(): string;
    static create(opts: ConfluenceCommentAriOpts): ConfluenceCommentAri;
    static parse(maybeAri: string): ConfluenceCommentAri;
    getVariables(): {
        siteId: string;
        commentId: string;
    };
}
export { ConfluenceCommentAri }
export { ConfluenceCommentAri as ConfluenceCommentAri_alias_1 }
export { ConfluenceCommentAri as ConfluenceCommentAri_alias_2 }

export declare interface ConfluenceCommentAriOpts {
    siteId: string;
    commentId: string;
}

declare const ConfluenceCommentAriResourceOwner = "confluence";
export { ConfluenceCommentAriResourceOwner }
export { ConfluenceCommentAriResourceOwner as ConfluenceCommentAriResourceOwner_alias_1 }

declare const ConfluenceCommentAriResourceType = "comment";
export { ConfluenceCommentAriResourceType }
export { ConfluenceCommentAriResourceType as ConfluenceCommentAriResourceType_alias_1 }

export declare const confluenceCommentAriStaticOpts: AriStaticProperties;

declare class ConfluenceContentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _contentId;
    get siteId(): string;
    get contentId(): string;
    static create(opts: ConfluenceContentAriOpts): ConfluenceContentAri;
    static parse(maybeAri: string): ConfluenceContentAri;
    getVariables(): {
        siteId: string;
        contentId: string;
    };
}
export { ConfluenceContentAri }
export { ConfluenceContentAri as ConfluenceContentAri_alias_1 }
export { ConfluenceContentAri as ConfluenceContentAri_alias_2 }

export declare interface ConfluenceContentAriOpts {
    siteId: string;
    contentId: string;
}

declare const ConfluenceContentAriResourceOwner = "confluence";
export { ConfluenceContentAriResourceOwner }
export { ConfluenceContentAriResourceOwner as ConfluenceContentAriResourceOwner_alias_1 }

declare const ConfluenceContentAriResourceType = "content";
export { ConfluenceContentAriResourceType }
export { ConfluenceContentAriResourceType as ConfluenceContentAriResourceType_alias_1 }

export declare const confluenceContentAriStaticOpts: AriStaticProperties;

declare class ConfluenceDatabaseAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _databaseId;
    get siteId(): string;
    get activationId(): string;
    get databaseId(): string;
    static create(opts: ConfluenceDatabaseAriOpts): ConfluenceDatabaseAri;
    static parse(maybeAri: string): ConfluenceDatabaseAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        databaseId: string;
    };
}
export { ConfluenceDatabaseAri }
export { ConfluenceDatabaseAri as ConfluenceDatabaseAri_alias_1 }
export { ConfluenceDatabaseAri as ConfluenceDatabaseAri_alias_2 }

export declare interface ConfluenceDatabaseAriOpts {
    siteId: string;
    activationId: string;
    databaseId: string;
}

declare const ConfluenceDatabaseAriResourceOwner = "confluence";
export { ConfluenceDatabaseAriResourceOwner }
export { ConfluenceDatabaseAriResourceOwner as ConfluenceDatabaseAriResourceOwner_alias_1 }

declare const ConfluenceDatabaseAriResourceType = "database";
export { ConfluenceDatabaseAriResourceType }
export { ConfluenceDatabaseAriResourceType as ConfluenceDatabaseAriResourceType_alias_1 }

export declare const confluenceDatabaseAriStaticOpts: AriStaticProperties;

declare class ConfluenceEmbedAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _embedId;
    get siteId(): string;
    get activationId(): string;
    get embedId(): string;
    static create(opts: ConfluenceEmbedAriOpts): ConfluenceEmbedAri;
    static parse(maybeAri: string): ConfluenceEmbedAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        embedId: string;
    };
}
export { ConfluenceEmbedAri }
export { ConfluenceEmbedAri as ConfluenceEmbedAri_alias_1 }
export { ConfluenceEmbedAri as ConfluenceEmbedAri_alias_2 }

export declare interface ConfluenceEmbedAriOpts {
    siteId: string;
    activationId: string;
    embedId: string;
}

declare const ConfluenceEmbedAriResourceOwner = "confluence";
export { ConfluenceEmbedAriResourceOwner }
export { ConfluenceEmbedAriResourceOwner as ConfluenceEmbedAriResourceOwner_alias_1 }

declare const ConfluenceEmbedAriResourceType = "embed";
export { ConfluenceEmbedAriResourceType }
export { ConfluenceEmbedAriResourceType as ConfluenceEmbedAriResourceType_alias_1 }

export declare const confluenceEmbedAriStaticOpts: AriStaticProperties;

declare class ConfluenceEventAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _eventType;
    private readonly _activationId;
    private readonly _eventId;
    get siteId(): string;
    get eventType(): string;
    get activationId(): string;
    get eventId(): string;
    static create(opts: ConfluenceEventAriOpts): ConfluenceEventAri;
    static parse(maybeAri: string): ConfluenceEventAri;
    getVariables(): {
        siteId: string;
        eventType: string;
        activationId: string;
        eventId: string;
    };
}
export { ConfluenceEventAri }
export { ConfluenceEventAri as ConfluenceEventAri_alias_1 }
export { ConfluenceEventAri as ConfluenceEventAri_alias_2 }

export declare interface ConfluenceEventAriOpts {
    siteId: string;
    eventType: string;
    activationId: string;
    eventId: string;
}

declare const ConfluenceEventAriResourceOwner = "confluence";
export { ConfluenceEventAriResourceOwner }
export { ConfluenceEventAriResourceOwner as ConfluenceEventAriResourceOwner_alias_1 }

declare const ConfluenceEventAriResourceType = "event";
export { ConfluenceEventAriResourceType }
export { ConfluenceEventAriResourceType as ConfluenceEventAriResourceType_alias_1 }

export declare const confluenceEventAriStaticOpts: AriStaticProperties;

declare class ConfluenceFolderAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _folderId;
    get siteId(): string;
    get activationId(): string;
    get folderId(): string;
    static create(opts: ConfluenceFolderAriOpts): ConfluenceFolderAri;
    static parse(maybeAri: string): ConfluenceFolderAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        folderId: string;
    };
}
export { ConfluenceFolderAri }
export { ConfluenceFolderAri as ConfluenceFolderAri_alias_1 }
export { ConfluenceFolderAri as ConfluenceFolderAri_alias_2 }

export declare interface ConfluenceFolderAriOpts {
    siteId: string;
    activationId: string;
    folderId: string;
}

declare const ConfluenceFolderAriResourceOwner = "confluence";
export { ConfluenceFolderAriResourceOwner }
export { ConfluenceFolderAriResourceOwner as ConfluenceFolderAriResourceOwner_alias_1 }

declare const ConfluenceFolderAriResourceType = "folder";
export { ConfluenceFolderAriResourceType }
export { ConfluenceFolderAriResourceType as ConfluenceFolderAriResourceType_alias_1 }

export declare const confluenceFolderAriStaticOpts: AriStaticProperties;

declare class ConfluenceLongRunningTaskAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _taskId;
    get siteId(): string;
    get activationId(): string;
    get taskId(): string;
    static create(opts: ConfluenceLongRunningTaskAriOpts): ConfluenceLongRunningTaskAri;
    static parse(maybeAri: string): ConfluenceLongRunningTaskAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        taskId: string;
    };
}
export { ConfluenceLongRunningTaskAri }
export { ConfluenceLongRunningTaskAri as ConfluenceLongRunningTaskAri_alias_1 }
export { ConfluenceLongRunningTaskAri as ConfluenceLongRunningTaskAri_alias_2 }

export declare interface ConfluenceLongRunningTaskAriOpts {
    siteId: string;
    activationId: string;
    taskId: string;
}

declare const ConfluenceLongRunningTaskAriResourceOwner = "confluence";
export { ConfluenceLongRunningTaskAriResourceOwner }
export { ConfluenceLongRunningTaskAriResourceOwner as ConfluenceLongRunningTaskAriResourceOwner_alias_1 }

declare const ConfluenceLongRunningTaskAriResourceType = "long-running-task";
export { ConfluenceLongRunningTaskAriResourceType }
export { ConfluenceLongRunningTaskAriResourceType as ConfluenceLongRunningTaskAriResourceType_alias_1 }

export declare const confluenceLongRunningTaskAriStaticOpts: AriStaticProperties;

declare class ConfluenceNoteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _noteId;
    get siteId(): string;
    get activationId(): string;
    get noteId(): string;
    static create(opts: ConfluenceNoteAriOpts): ConfluenceNoteAri;
    static parse(maybeAri: string): ConfluenceNoteAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        noteId: string;
    };
}
export { ConfluenceNoteAri }
export { ConfluenceNoteAri as ConfluenceNoteAri_alias_1 }
export { ConfluenceNoteAri as ConfluenceNoteAri_alias_2 }

export declare interface ConfluenceNoteAriOpts {
    siteId: string;
    activationId: string;
    noteId: string;
}

declare const ConfluenceNoteAriResourceOwner = "confluence";
export { ConfluenceNoteAriResourceOwner }
export { ConfluenceNoteAriResourceOwner as ConfluenceNoteAriResourceOwner_alias_1 }

declare const ConfluenceNoteAriResourceType = "note";
export { ConfluenceNoteAriResourceType }
export { ConfluenceNoteAriResourceType as ConfluenceNoteAriResourceType_alias_1 }

export declare const confluenceNoteAriStaticOpts: AriStaticProperties;

declare class ConfluencePageAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _pageId;
    get siteId(): string;
    get pageId(): string;
    static create(opts: ConfluencePageAriOpts): ConfluencePageAri;
    static parse(maybeAri: string): ConfluencePageAri;
    getVariables(): {
        siteId: string;
        pageId: string;
    };
}
export { ConfluencePageAri }
export { ConfluencePageAri as ConfluencePageAri_alias_1 }
export { ConfluencePageAri as ConfluencePageAri_alias_2 }

export declare interface ConfluencePageAriOpts {
    siteId: string;
    pageId: string;
}

declare const ConfluencePageAriResourceOwner = "confluence";
export { ConfluencePageAriResourceOwner }
export { ConfluencePageAriResourceOwner as ConfluencePageAriResourceOwner_alias_1 }

declare const ConfluencePageAriResourceType = "page";
export { ConfluencePageAriResourceType }
export { ConfluencePageAriResourceType as ConfluencePageAriResourceType_alias_1 }

export declare const confluencePageAriStaticOpts: AriStaticProperties;

declare class ConfluencePublicLinkAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _publicLinkId;
    get siteId(): string;
    get activationId(): string;
    get publicLinkId(): string;
    static create(opts: ConfluencePublicLinkAriOpts): ConfluencePublicLinkAri;
    static parse(maybeAri: string): ConfluencePublicLinkAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        publicLinkId: string;
    };
}
export { ConfluencePublicLinkAri }
export { ConfluencePublicLinkAri as ConfluencePublicLinkAri_alias_1 }
export { ConfluencePublicLinkAri as ConfluencePublicLinkAri_alias_2 }

export declare interface ConfluencePublicLinkAriOpts {
    siteId: string;
    activationId: string;
    publicLinkId: string;
}

declare const ConfluencePublicLinkAriResourceOwner = "confluence";
export { ConfluencePublicLinkAriResourceOwner }
export { ConfluencePublicLinkAriResourceOwner as ConfluencePublicLinkAriResourceOwner_alias_1 }

declare const ConfluencePublicLinkAriResourceType = "public-link";
export { ConfluencePublicLinkAriResourceType }
export { ConfluencePublicLinkAriResourceType as ConfluencePublicLinkAriResourceType_alias_1 }

export declare const confluencePublicLinkAriStaticOpts: AriStaticProperties;

declare class ConfluenceRoleAri extends RegisteredAri {
    private constructor();
    private readonly _optionalSiteId;
    private readonly _roleId;
    get optionalSiteId(): string;
    get roleId(): string;
    static create(opts: ConfluenceRoleAriOpts): ConfluenceRoleAri;
    static parse(maybeAri: string): ConfluenceRoleAri;
    getVariables(): {
        optionalSiteId: string;
        roleId: string;
    };
}
export { ConfluenceRoleAri }
export { ConfluenceRoleAri as ConfluenceRoleAri_alias_1 }
export { ConfluenceRoleAri as ConfluenceRoleAri_alias_2 }

export declare interface ConfluenceRoleAriOpts {
    optionalSiteId?: string;
    roleId: string;
}

declare const ConfluenceRoleAriResourceOwner = "confluence";
export { ConfluenceRoleAriResourceOwner }
export { ConfluenceRoleAriResourceOwner as ConfluenceRoleAriResourceOwner_alias_1 }

declare const ConfluenceRoleAriResourceType = "role";
export { ConfluenceRoleAriResourceType }
export { ConfluenceRoleAriResourceType as ConfluenceRoleAriResourceType_alias_1 }

export declare const confluenceRoleAriStaticOpts: AriStaticProperties;

declare class ConfluenceSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: ConfluenceSiteAriOpts): ConfluenceSiteAri;
    static parse(maybeAri: string): ConfluenceSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { ConfluenceSiteAri }
export { ConfluenceSiteAri as ConfluenceSiteAri_alias_1 }
export { ConfluenceSiteAri as ConfluenceSiteAri_alias_2 }

export declare interface ConfluenceSiteAriOpts {
    siteId: string;
}

declare const ConfluenceSiteAriResourceOwner = "confluence";
export { ConfluenceSiteAriResourceOwner }
export { ConfluenceSiteAriResourceOwner as ConfluenceSiteAriResourceOwner_alias_1 }

declare const ConfluenceSiteAriResourceType = "site";
export { ConfluenceSiteAriResourceType }
export { ConfluenceSiteAriResourceType as ConfluenceSiteAriResourceType_alias_1 }

export declare const confluenceSiteAriStaticOpts: AriStaticProperties;

declare class ConfluenceSpaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _spaceId;
    get siteId(): string;
    get spaceId(): string;
    static create(opts: ConfluenceSpaceAriOpts): ConfluenceSpaceAri;
    static parse(maybeAri: string): ConfluenceSpaceAri;
    getVariables(): {
        siteId: string;
        spaceId: string;
    };
}
export { ConfluenceSpaceAri }
export { ConfluenceSpaceAri as ConfluenceSpaceAri_alias_1 }
export { ConfluenceSpaceAri as ConfluenceSpaceAri_alias_2 }

export declare interface ConfluenceSpaceAriOpts {
    siteId: string;
    spaceId: string;
}

declare const ConfluenceSpaceAriResourceOwner = "confluence";
export { ConfluenceSpaceAriResourceOwner }
export { ConfluenceSpaceAriResourceOwner as ConfluenceSpaceAriResourceOwner_alias_1 }

declare const ConfluenceSpaceAriResourceType = "space";
export { ConfluenceSpaceAriResourceType }
export { ConfluenceSpaceAriResourceType as ConfluenceSpaceAriResourceType_alias_1 }

export declare const confluenceSpaceAriStaticOpts: AriStaticProperties;

declare class ConfluenceTaskAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _taskId;
    get siteId(): string;
    get taskId(): string;
    static create(opts: ConfluenceTaskAriOpts): ConfluenceTaskAri;
    static parse(maybeAri: string): ConfluenceTaskAri;
    getVariables(): {
        siteId: string;
        taskId: string;
    };
}
export { ConfluenceTaskAri }
export { ConfluenceTaskAri as ConfluenceTaskAri_alias_1 }
export { ConfluenceTaskAri as ConfluenceTaskAri_alias_2 }

export declare interface ConfluenceTaskAriOpts {
    siteId: string;
    taskId: string;
}

declare const ConfluenceTaskAriResourceOwner = "confluence";
export { ConfluenceTaskAriResourceOwner }
export { ConfluenceTaskAriResourceOwner as ConfluenceTaskAriResourceOwner_alias_1 }

declare const ConfluenceTaskAriResourceType = "task";
export { ConfluenceTaskAriResourceType }
export { ConfluenceTaskAriResourceType as ConfluenceTaskAriResourceType_alias_1 }

export declare const confluenceTaskAriStaticOpts: AriStaticProperties;

declare class ConfluenceTeamCalendarAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _calendarId;
    get siteId(): string;
    get activationId(): string;
    get calendarId(): string;
    static create(opts: ConfluenceTeamCalendarAriOpts): ConfluenceTeamCalendarAri;
    static parse(maybeAri: string): ConfluenceTeamCalendarAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        calendarId: string;
    };
}
export { ConfluenceTeamCalendarAri }
export { ConfluenceTeamCalendarAri as ConfluenceTeamCalendarAri_alias_1 }
export { ConfluenceTeamCalendarAri as ConfluenceTeamCalendarAri_alias_2 }

export declare interface ConfluenceTeamCalendarAriOpts {
    siteId: string;
    activationId: string;
    calendarId: string;
}

declare const ConfluenceTeamCalendarAriResourceOwner = "confluence";
export { ConfluenceTeamCalendarAriResourceOwner }
export { ConfluenceTeamCalendarAriResourceOwner as ConfluenceTeamCalendarAriResourceOwner_alias_1 }

declare const ConfluenceTeamCalendarAriResourceType = "team-calendar";
export { ConfluenceTeamCalendarAriResourceType }
export { ConfluenceTeamCalendarAriResourceType as ConfluenceTeamCalendarAriResourceType_alias_1 }

export declare const confluenceTeamCalendarAriStaticOpts: AriStaticProperties;

declare class ConfluenceUserPropertyAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _userPropertyId;
    get siteId(): string;
    get userPropertyId(): string;
    static create(opts: ConfluenceUserPropertyAriOpts): ConfluenceUserPropertyAri;
    static parse(maybeAri: string): ConfluenceUserPropertyAri;
    getVariables(): {
        siteId: string;
        userPropertyId: string;
    };
}
export { ConfluenceUserPropertyAri }
export { ConfluenceUserPropertyAri as ConfluenceUserPropertyAri_alias_1 }
export { ConfluenceUserPropertyAri as ConfluenceUserPropertyAri_alias_2 }

export declare interface ConfluenceUserPropertyAriOpts {
    siteId: string;
    userPropertyId: string;
}

declare const ConfluenceUserPropertyAriResourceOwner = "confluence";
export { ConfluenceUserPropertyAriResourceOwner }
export { ConfluenceUserPropertyAriResourceOwner as ConfluenceUserPropertyAriResourceOwner_alias_1 }

declare const ConfluenceUserPropertyAriResourceType = "user-property";
export { ConfluenceUserPropertyAriResourceType }
export { ConfluenceUserPropertyAriResourceType as ConfluenceUserPropertyAriResourceType_alias_1 }

export declare const confluenceUserPropertyAriStaticOpts: AriStaticProperties;

declare class ConfluenceWhiteboardAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _whiteboardId;
    get siteId(): string;
    get whiteboardId(): string;
    static create(opts: ConfluenceWhiteboardAriOpts): ConfluenceWhiteboardAri;
    static parse(maybeAri: string): ConfluenceWhiteboardAri;
    getVariables(): {
        siteId: string;
        whiteboardId: string;
    };
}
export { ConfluenceWhiteboardAri }
export { ConfluenceWhiteboardAri as ConfluenceWhiteboardAri_alias_1 }
export { ConfluenceWhiteboardAri as ConfluenceWhiteboardAri_alias_2 }

export declare interface ConfluenceWhiteboardAriOpts {
    siteId: string;
    whiteboardId: string;
}

declare const ConfluenceWhiteboardAriResourceOwner = "confluence";
export { ConfluenceWhiteboardAriResourceOwner }
export { ConfluenceWhiteboardAriResourceOwner as ConfluenceWhiteboardAriResourceOwner_alias_1 }

declare const ConfluenceWhiteboardAriResourceType = "whiteboard";
export { ConfluenceWhiteboardAriResourceType }
export { ConfluenceWhiteboardAriResourceType as ConfluenceWhiteboardAriResourceType_alias_1 }

export declare const confluenceWhiteboardAriStaticOpts: AriStaticProperties;

declare class ConfluenceWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    get siteId(): string;
    get activationId(): string;
    static create(opts: ConfluenceWorkspaceAriOpts): ConfluenceWorkspaceAri;
    static parse(maybeAri: string): ConfluenceWorkspaceAri;
    getVariables(): {
        siteId: string;
        activationId: string;
    };
}
export { ConfluenceWorkspaceAri }
export { ConfluenceWorkspaceAri as ConfluenceWorkspaceAri_alias_1 }
export { ConfluenceWorkspaceAri as ConfluenceWorkspaceAri_alias_2 }

export declare interface ConfluenceWorkspaceAriOpts {
    siteId: string;
    activationId: string;
}

declare const ConfluenceWorkspaceAriResourceOwner = "confluence";
export { ConfluenceWorkspaceAriResourceOwner }
export { ConfluenceWorkspaceAriResourceOwner as ConfluenceWorkspaceAriResourceOwner_alias_1 }

declare const ConfluenceWorkspaceAriResourceType = "workspace";
export { ConfluenceWorkspaceAriResourceType }
export { ConfluenceWorkspaceAriResourceType as ConfluenceWorkspaceAriResourceType_alias_1 }

export declare const confluenceWorkspaceAriStaticOpts: AriStaticProperties;

export declare const ConnectAppType: "connect-app";

declare class ConnectionRegistryLinkAri extends RegisteredAri {
    private constructor();
    private readonly _linkId;
    get linkId(): string;
    static create(opts: ConnectionRegistryLinkAriOpts): ConnectionRegistryLinkAri;
    static parse(maybeAri: string): ConnectionRegistryLinkAri;
    getVariables(): {
        linkId: string;
    };
}
export { ConnectionRegistryLinkAri }
export { ConnectionRegistryLinkAri as ConnectionRegistryLinkAri_alias_1 }
export { ConnectionRegistryLinkAri as ConnectionRegistryLinkAri_alias_2 }

export declare interface ConnectionRegistryLinkAriOpts {
    linkId: string;
}

declare const ConnectionRegistryLinkAriResourceOwner = "connection-registry";
export { ConnectionRegistryLinkAriResourceOwner }
export { ConnectionRegistryLinkAriResourceOwner as ConnectionRegistryLinkAriResourceOwner_alias_1 }

declare const ConnectionRegistryLinkAriResourceType = "link";
export { ConnectionRegistryLinkAriResourceType }
export { ConnectionRegistryLinkAriResourceType as ConnectionRegistryLinkAriResourceType_alias_1 }

export declare const connectionRegistryLinkAriStaticOpts: AriStaticProperties;

export declare const ContainerType: "container";

export declare const ContentType: "content";

declare class ConversationalHelpConversationAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _conversationId;
    get siteId(): string;
    get conversationId(): string;
    static create(opts: ConversationalHelpConversationAriOpts): ConversationalHelpConversationAri;
    static parse(maybeAri: string): ConversationalHelpConversationAri;
    getVariables(): {
        siteId: string;
        conversationId: string;
    };
}
export { ConversationalHelpConversationAri }
export { ConversationalHelpConversationAri as ConversationalHelpConversationAri_alias_1 }
export { ConversationalHelpConversationAri as ConversationalHelpConversationAri_alias_2 }

export declare interface ConversationalHelpConversationAriOpts {
    siteId: string;
    conversationId: string;
}

declare const ConversationalHelpConversationAriResourceOwner = "conversational-help";
export { ConversationalHelpConversationAriResourceOwner }
export { ConversationalHelpConversationAriResourceOwner as ConversationalHelpConversationAriResourceOwner_alias_1 }

declare const ConversationalHelpConversationAriResourceType = "conversation";
export { ConversationalHelpConversationAriResourceType }
export { ConversationalHelpConversationAriResourceType as ConversationalHelpConversationAriResourceType_alias_1 }

export declare const conversationalHelpConversationAriStaticOpts: AriStaticProperties;

declare class ConversationalHelpConversationMessageAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _conversationMessageId;
    get siteId(): string;
    get conversationMessageId(): string;
    static create(opts: ConversationalHelpConversationMessageAriOpts): ConversationalHelpConversationMessageAri;
    static parse(maybeAri: string): ConversationalHelpConversationMessageAri;
    getVariables(): {
        siteId: string;
        conversationMessageId: string;
    };
}
export { ConversationalHelpConversationMessageAri }
export { ConversationalHelpConversationMessageAri as ConversationalHelpConversationMessageAri_alias_1 }
export { ConversationalHelpConversationMessageAri as ConversationalHelpConversationMessageAri_alias_2 }

export declare interface ConversationalHelpConversationMessageAriOpts {
    siteId: string;
    conversationMessageId: string;
}

declare const ConversationalHelpConversationMessageAriResourceOwner = "conversational-help";
export { ConversationalHelpConversationMessageAriResourceOwner }
export { ConversationalHelpConversationMessageAriResourceOwner as ConversationalHelpConversationMessageAriResourceOwner_alias_1 }

declare const ConversationalHelpConversationMessageAriResourceType = "conversation-message";
export { ConversationalHelpConversationMessageAriResourceType }
export { ConversationalHelpConversationMessageAriResourceType as ConversationalHelpConversationMessageAriResourceType_alias_1 }

export declare const conversationalHelpConversationMessageAriStaticOpts: AriStaticProperties;

export declare const ConversationMessageType: "conversation-message";

export declare const ConversationType: "conversation";

export declare const CostCenterType: "cost-center";

export declare const CustomDetectionType: "custom-detection";

export declare const CustomEmojiMetadataType: "custom-emoji-metadata";

export declare const CustomerDirectoryType: "customer-directory";

export declare const CustomerDomainType: "customer-domain";

export declare const CustomerOrganizationType: "customer-organization";

export declare const CustomerType: "customer";

export declare const CustomFieldDefinitionType: "custom-field-definition";

export declare const CustomFilterType: "custom-filter";

export declare const CustomRoleType: "custom-role";

export declare const DashboardType: "dashboard";

export declare const DatabaseType: "database";

declare class DataLakeLakeConnectionAri extends RegisteredAri {
    private constructor();
    private readonly _lakeConnectionId;
    get lakeConnectionId(): string;
    static create(opts: DataLakeLakeConnectionAriOpts): DataLakeLakeConnectionAri;
    static parse(maybeAri: string): DataLakeLakeConnectionAri;
    getVariables(): {
        lakeConnectionId: string;
    };
}
export { DataLakeLakeConnectionAri }
export { DataLakeLakeConnectionAri as DataLakeLakeConnectionAri_alias_1 }
export { DataLakeLakeConnectionAri as DataLakeLakeConnectionAri_alias_2 }

export declare interface DataLakeLakeConnectionAriOpts {
    lakeConnectionId: string;
}

declare const DataLakeLakeConnectionAriResourceOwner = "data-lake";
export { DataLakeLakeConnectionAriResourceOwner }
export { DataLakeLakeConnectionAriResourceOwner as DataLakeLakeConnectionAriResourceOwner_alias_1 }

declare const DataLakeLakeConnectionAriResourceType = "lake-connection";
export { DataLakeLakeConnectionAriResourceType }
export { DataLakeLakeConnectionAriResourceType as DataLakeLakeConnectionAriResourceType_alias_1 }

export declare const dataLakeLakeConnectionAriStaticOpts: AriStaticProperties;

export declare const DatasourceType: "datasource";

export declare const DecisionTableType: "decision-table";

export declare const DeploymentHistoryType: "deployment-history";

export declare const DeploymentServiceLinkType: "deployment-service-link";

export declare const DeploymentType: "deployment";

export declare const DesignHistoryType: "design-history";

export declare const DesignType: "design";

export declare const DetectionSettingType: "detection-setting";

export declare const DetectionType: "detection";

export declare const DevopsComponentType: "devops-component";

declare class DevopsContainerAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _containerId;
    get siteId(): string;
    get containerId(): string;
    static create(opts: DevopsContainerAriOpts): DevopsContainerAri;
    static parse(maybeAri: string): DevopsContainerAri;
    getVariables(): {
        siteId: string;
        containerId: string;
    };
}
export { DevopsContainerAri }
export { DevopsContainerAri as DevopsContainerAri_alias_1 }
export { DevopsContainerAri as DevopsContainerAri_alias_2 }

export declare interface DevopsContainerAriOpts {
    siteId: string;
    containerId: string;
}

declare const DevopsContainerAriResourceOwner = "devops";
export { DevopsContainerAriResourceOwner }
export { DevopsContainerAriResourceOwner as DevopsContainerAriResourceOwner_alias_1 }

declare const DevopsContainerAriResourceType = "container";
export { DevopsContainerAriResourceType }
export { DevopsContainerAriResourceType as DevopsContainerAriResourceType_alias_1 }

export declare const devopsContainerAriStaticOpts: AriStaticProperties;

declare class DevopsNamespaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _namespaceId;
    get siteId(): string;
    get namespaceId(): string;
    static create(opts: DevopsNamespaceAriOpts): DevopsNamespaceAri;
    static parse(maybeAri: string): DevopsNamespaceAri;
    getVariables(): {
        siteId: string;
        namespaceId: string;
    };
}
export { DevopsNamespaceAri }
export { DevopsNamespaceAri as DevopsNamespaceAri_alias_1 }
export { DevopsNamespaceAri as DevopsNamespaceAri_alias_2 }

export declare interface DevopsNamespaceAriOpts {
    siteId: string;
    namespaceId: string;
}

declare const DevopsNamespaceAriResourceOwner = "devops";
export { DevopsNamespaceAriResourceOwner }
export { DevopsNamespaceAriResourceOwner as DevopsNamespaceAriResourceOwner_alias_1 }

declare const DevopsNamespaceAriResourceType = "namespace";
export { DevopsNamespaceAriResourceType }
export { DevopsNamespaceAriResourceType as DevopsNamespaceAriResourceType_alias_1 }

export declare const devopsNamespaceAriStaticOpts: AriStaticProperties;

declare class DevopsProviderAri extends RegisteredAri {
    private constructor();
    private readonly _providerNamespace;
    private readonly _providerAppId;
    get providerNamespace(): string;
    get providerAppId(): string;
    static create(opts: DevopsProviderAriOpts): DevopsProviderAri;
    static parse(maybeAri: string): DevopsProviderAri;
    getVariables(): {
        providerNamespace: string;
        providerAppId: string;
    };
}
export { DevopsProviderAri }
export { DevopsProviderAri as DevopsProviderAri_alias_1 }
export { DevopsProviderAri as DevopsProviderAri_alias_2 }

export declare interface DevopsProviderAriOpts {
    providerNamespace: string;
    providerAppId: string;
}

declare const DevopsProviderAriResourceOwner = "devops";
export { DevopsProviderAriResourceOwner }
export { DevopsProviderAriResourceOwner as DevopsProviderAriResourceOwner_alias_1 }

declare const DevopsProviderAriResourceType = "provider";
export { DevopsProviderAriResourceType }
export { DevopsProviderAriResourceType as DevopsProviderAriResourceType_alias_1 }

export declare const devopsProviderAriStaticOpts: AriStaticProperties;

declare class DevopsRelationshipAri extends RegisteredAri {
    private constructor();
    private readonly _relationshipId;
    get relationshipId(): string;
    static create(opts: DevopsRelationshipAriOpts): DevopsRelationshipAri;
    static parse(maybeAri: string): DevopsRelationshipAri;
    getVariables(): {
        relationshipId: string;
    };
}
export { DevopsRelationshipAri }
export { DevopsRelationshipAri as DevopsRelationshipAri_alias_1 }
export { DevopsRelationshipAri as DevopsRelationshipAri_alias_2 }

export declare interface DevopsRelationshipAriOpts {
    relationshipId: string;
}

declare const DevopsRelationshipAriResourceOwner = "devops";
export { DevopsRelationshipAriResourceOwner }
export { DevopsRelationshipAriResourceOwner as DevopsRelationshipAriResourceOwner_alias_1 }

declare const DevopsRelationshipAriResourceType = "relationship";
export { DevopsRelationshipAriResourceType }
export { DevopsRelationshipAriResourceType as DevopsRelationshipAriResourceType_alias_1 }

export declare const devopsRelationshipAriStaticOpts: AriStaticProperties;

declare class DevopsToolAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _toolId;
    get siteId(): string;
    get toolId(): string;
    static create(opts: DevopsToolAriOpts): DevopsToolAri;
    static parse(maybeAri: string): DevopsToolAri;
    getVariables(): {
        siteId: string;
        toolId: string;
    };
}
export { DevopsToolAri }
export { DevopsToolAri as DevopsToolAri_alias_1 }
export { DevopsToolAri as DevopsToolAri_alias_2 }

export declare interface DevopsToolAriOpts {
    siteId: string;
    toolId: string;
}

declare const DevopsToolAriResourceOwner = "devops";
export { DevopsToolAriResourceOwner }
export { DevopsToolAriResourceOwner as DevopsToolAriResourceOwner_alias_1 }

declare const DevopsToolAriResourceType = "tool";
export { DevopsToolAriResourceType }
export { DevopsToolAriResourceType as DevopsToolAriResourceType_alias_1 }

export declare const devopsToolAriStaticOpts: AriStaticProperties;

export declare const DirectoryType: "directory";

export declare const DocumentationCategoryType: "documentation-category";

export declare const DocumentHistoryType: "document-history";

export declare const DocumentType: "document";

export declare const DomainType: "domain";

declare class EcosystemAppAri extends RegisteredAri {
    private constructor();
    private readonly _appId;
    get appId(): string;
    static create(opts: EcosystemAppAriOpts): EcosystemAppAri;
    static parse(maybeAri: string): EcosystemAppAri;
    getVariables(): {
        appId: string;
    };
}
export { EcosystemAppAri }
export { EcosystemAppAri as EcosystemAppAri_alias_1 }
export { EcosystemAppAri as EcosystemAppAri_alias_2 }

export declare interface EcosystemAppAriOpts {
    appId: string;
}

declare const EcosystemAppAriResourceOwner = "ecosystem";
export { EcosystemAppAriResourceOwner }
export { EcosystemAppAriResourceOwner as EcosystemAppAriResourceOwner_alias_1 }

declare const EcosystemAppAriResourceType = "app";
export { EcosystemAppAriResourceType }
export { EcosystemAppAriResourceType as EcosystemAppAriResourceType_alias_1 }

export declare const ecosystemAppAriStaticOpts: AriStaticProperties;

declare class EcosystemAppEnvironmentVersionAri extends RegisteredAri {
    private constructor();
    private readonly _appId;
    private readonly _environmentId;
    private readonly _versionId;
    get appId(): string;
    get environmentId(): string;
    get versionId(): string;
    static create(opts: EcosystemAppEnvironmentVersionAriOpts): EcosystemAppEnvironmentVersionAri;
    static parse(maybeAri: string): EcosystemAppEnvironmentVersionAri;
    getVariables(): {
        appId: string;
        environmentId: string;
        versionId: string;
    };
}
export { EcosystemAppEnvironmentVersionAri }
export { EcosystemAppEnvironmentVersionAri as EcosystemAppEnvironmentVersionAri_alias_1 }
export { EcosystemAppEnvironmentVersionAri as EcosystemAppEnvironmentVersionAri_alias_2 }

export declare interface EcosystemAppEnvironmentVersionAriOpts {
    appId: string;
    environmentId: string;
    versionId: string;
}

declare const EcosystemAppEnvironmentVersionAriResourceOwner = "ecosystem";
export { EcosystemAppEnvironmentVersionAriResourceOwner }
export { EcosystemAppEnvironmentVersionAriResourceOwner as EcosystemAppEnvironmentVersionAriResourceOwner_alias_1 }

declare const EcosystemAppEnvironmentVersionAriResourceType = "app-environment-version";
export { EcosystemAppEnvironmentVersionAriResourceType }
export { EcosystemAppEnvironmentVersionAriResourceType as EcosystemAppEnvironmentVersionAriResourceType_alias_1 }

export declare const ecosystemAppEnvironmentVersionAriStaticOpts: AriStaticProperties;

declare class EcosystemConnectAppAri extends RegisteredAri {
    private constructor();
    private readonly _appKey;
    get appKey(): string;
    static create(opts: EcosystemConnectAppAriOpts): EcosystemConnectAppAri;
    static parse(maybeAri: string): EcosystemConnectAppAri;
    getVariables(): {
        appKey: string;
    };
}
export { EcosystemConnectAppAri }
export { EcosystemConnectAppAri as EcosystemConnectAppAri_alias_1 }
export { EcosystemConnectAppAri as EcosystemConnectAppAri_alias_2 }

export declare interface EcosystemConnectAppAriOpts {
    appKey: string;
}

declare const EcosystemConnectAppAriResourceOwner = "ecosystem";
export { EcosystemConnectAppAriResourceOwner }
export { EcosystemConnectAppAriResourceOwner as EcosystemConnectAppAriResourceOwner_alias_1 }

declare const EcosystemConnectAppAriResourceType = "connect-app";
export { EcosystemConnectAppAriResourceType }
export { EcosystemConnectAppAriResourceType as EcosystemConnectAppAriResourceType_alias_1 }

export declare const ecosystemConnectAppAriStaticOpts: AriStaticProperties;

declare class EcosystemEnvironmentAri extends RegisteredAri {
    private constructor();
    private readonly _appId;
    private readonly _environmentId;
    get appId(): string;
    get environmentId(): string;
    static create(opts: EcosystemEnvironmentAriOpts): EcosystemEnvironmentAri;
    static parse(maybeAri: string): EcosystemEnvironmentAri;
    getVariables(): {
        appId: string;
        environmentId: string;
    };
}
export { EcosystemEnvironmentAri }
export { EcosystemEnvironmentAri as EcosystemEnvironmentAri_alias_1 }
export { EcosystemEnvironmentAri as EcosystemEnvironmentAri_alias_2 }

export declare interface EcosystemEnvironmentAriOpts {
    appId: string;
    environmentId: string;
}

declare const EcosystemEnvironmentAriResourceOwner = "ecosystem";
export { EcosystemEnvironmentAriResourceOwner }
export { EcosystemEnvironmentAriResourceOwner as EcosystemEnvironmentAriResourceOwner_alias_1 }

declare const EcosystemEnvironmentAriResourceType = "environment";
export { EcosystemEnvironmentAriResourceType }
export { EcosystemEnvironmentAriResourceType as EcosystemEnvironmentAriResourceType_alias_1 }

export declare const ecosystemEnvironmentAriStaticOpts: AriStaticProperties;

declare class EcosystemExtensionAri extends RegisteredAri {
    private constructor();
    private readonly _appId;
    private readonly _environmentId;
    private readonly _groupId;
    private readonly _extensionKey;
    get appId(): string;
    get environmentId(): string;
    get groupId(): string;
    get extensionKey(): string;
    static create(opts: EcosystemExtensionAriOpts): EcosystemExtensionAri;
    static parse(maybeAri: string): EcosystemExtensionAri;
    getVariables(): {
        appId: string;
        environmentId: string;
        groupId: string;
        extensionKey: string;
    };
}
export { EcosystemExtensionAri }
export { EcosystemExtensionAri as EcosystemExtensionAri_alias_1 }
export { EcosystemExtensionAri as EcosystemExtensionAri_alias_2 }

export declare interface EcosystemExtensionAriOpts {
    appId: string;
    environmentId: string;
    groupId: string;
    extensionKey: string;
}

declare const EcosystemExtensionAriResourceOwner = "ecosystem";
export { EcosystemExtensionAriResourceOwner }
export { EcosystemExtensionAriResourceOwner as EcosystemExtensionAriResourceOwner_alias_1 }

declare const EcosystemExtensionAriResourceType = "extension";
export { EcosystemExtensionAriResourceType }
export { EcosystemExtensionAriResourceType as EcosystemExtensionAriResourceType_alias_1 }

export declare const ecosystemExtensionAriStaticOpts: AriStaticProperties;

declare class EcosystemExtensionGroupAri extends RegisteredAri {
    private constructor();
    private readonly _appId;
    private readonly _environmentId;
    private readonly _groupId;
    get appId(): string;
    get environmentId(): string;
    get groupId(): string;
    static create(opts: EcosystemExtensionGroupAriOpts): EcosystemExtensionGroupAri;
    static parse(maybeAri: string): EcosystemExtensionGroupAri;
    getVariables(): {
        appId: string;
        environmentId: string;
        groupId: string;
    };
}
export { EcosystemExtensionGroupAri }
export { EcosystemExtensionGroupAri as EcosystemExtensionGroupAri_alias_1 }
export { EcosystemExtensionGroupAri as EcosystemExtensionGroupAri_alias_2 }

export declare interface EcosystemExtensionGroupAriOpts {
    appId: string;
    environmentId: string;
    groupId: string;
}

declare const EcosystemExtensionGroupAriResourceOwner = "ecosystem";
export { EcosystemExtensionGroupAriResourceOwner }
export { EcosystemExtensionGroupAriResourceOwner as EcosystemExtensionGroupAriResourceOwner_alias_1 }

declare const EcosystemExtensionGroupAriResourceType = "extension-group";
export { EcosystemExtensionGroupAriResourceType }
export { EcosystemExtensionGroupAriResourceType as EcosystemExtensionGroupAriResourceType_alias_1 }

export declare const ecosystemExtensionGroupAriStaticOpts: AriStaticProperties;

declare class EcosystemInstallationAri extends RegisteredAri {
    private constructor();
    private readonly _installationId;
    get installationId(): string;
    static create(opts: EcosystemInstallationAriOpts): EcosystemInstallationAri;
    static parse(maybeAri: string): EcosystemInstallationAri;
    getVariables(): {
        installationId: string;
    };
}
export { EcosystemInstallationAri }
export { EcosystemInstallationAri as EcosystemInstallationAri_alias_1 }
export { EcosystemInstallationAri as EcosystemInstallationAri_alias_2 }

export declare interface EcosystemInstallationAriOpts {
    installationId: string;
}

declare const EcosystemInstallationAriResourceOwner = "ecosystem";
export { EcosystemInstallationAriResourceOwner }
export { EcosystemInstallationAriResourceOwner as EcosystemInstallationAriResourceOwner_alias_1 }

declare const EcosystemInstallationAriResourceType = "installation";
export { EcosystemInstallationAriResourceType }
export { EcosystemInstallationAriResourceType as EcosystemInstallationAriResourceType_alias_1 }

export declare const ecosystemInstallationAriStaticOpts: AriStaticProperties;

declare class ElementsCustomEmojiMetadataAri extends RegisteredAri {
    private constructor();
    private readonly _customEmojiMetadataId;
    get customEmojiMetadataId(): string;
    static create(opts: ElementsCustomEmojiMetadataAriOpts): ElementsCustomEmojiMetadataAri;
    static parse(maybeAri: string): ElementsCustomEmojiMetadataAri;
    getVariables(): {
        customEmojiMetadataId: string;
    };
}
export { ElementsCustomEmojiMetadataAri }
export { ElementsCustomEmojiMetadataAri as ElementsCustomEmojiMetadataAri_alias_1 }
export { ElementsCustomEmojiMetadataAri as ElementsCustomEmojiMetadataAri_alias_2 }

export declare interface ElementsCustomEmojiMetadataAriOpts {
    customEmojiMetadataId: string;
}

declare const ElementsCustomEmojiMetadataAriResourceOwner = "elements";
export { ElementsCustomEmojiMetadataAriResourceOwner }
export { ElementsCustomEmojiMetadataAriResourceOwner as ElementsCustomEmojiMetadataAriResourceOwner_alias_1 }

declare const ElementsCustomEmojiMetadataAriResourceType = "custom-emoji-metadata";
export { ElementsCustomEmojiMetadataAriResourceType }
export { ElementsCustomEmojiMetadataAriResourceType as ElementsCustomEmojiMetadataAriResourceType_alias_1 }

export declare const elementsCustomEmojiMetadataAriStaticOpts: AriStaticProperties;

declare class ElementsWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    get workspaceId(): string;
    static create(opts: ElementsWorkspaceAriOpts): ElementsWorkspaceAri;
    static parse(maybeAri: string): ElementsWorkspaceAri;
    getVariables(): {
        workspaceId: string;
    };
}
export { ElementsWorkspaceAri }
export { ElementsWorkspaceAri as ElementsWorkspaceAri_alias_1 }
export { ElementsWorkspaceAri as ElementsWorkspaceAri_alias_2 }

export declare interface ElementsWorkspaceAriOpts {
    workspaceId: string;
}

declare const ElementsWorkspaceAriResourceOwner = "elements";
export { ElementsWorkspaceAriResourceOwner }
export { ElementsWorkspaceAriResourceOwner as ElementsWorkspaceAriResourceOwner_alias_1 }

declare const ElementsWorkspaceAriResourceType = "workspace";
export { ElementsWorkspaceAriResourceType }
export { ElementsWorkspaceAriResourceType as ElementsWorkspaceAriResourceType_alias_1 }

export declare const elementsWorkspaceAriStaticOpts: AriStaticProperties;

export declare const EmailUuidType: "email-uuid";

export declare const EmbedType: "embed";

export declare const EmployeeHistoryType: "employee-history";

export declare const EmployeeType: "employee";

export declare const EnterpriseType: "enterprise";

export declare const EntitlementTemplateType: "entitlement-template";

export declare const EntitlementType: "entitlement";

export declare const EntityPropertyType: "entity-property";

export declare const EnvironmentType: "environment";

export declare const EpicType: "epic";

export declare const EscalationType: "escalation";

export declare const EventSourceType: "event-source";

export declare const EventType: "event";

export declare const ExtensionGroupType: "extension-group";

export declare const ExtensionType: "extension";

declare class ExusExternalUserAri extends RegisteredAri {
    private constructor();
    private readonly _thirdPartySource;
    private readonly _thirdPartyUserId;
    get thirdPartySource(): string;
    get thirdPartyUserId(): string;
    static create(opts: ExusExternalUserAriOpts): ExusExternalUserAri;
    static parse(maybeAri: string): ExusExternalUserAri;
    getVariables(): {
        thirdPartySource: string;
        thirdPartyUserId: string;
    };
}
export { ExusExternalUserAri }
export { ExusExternalUserAri as ExusExternalUserAri_alias_1 }
export { ExusExternalUserAri as ExusExternalUserAri_alias_2 }

export declare interface ExusExternalUserAriOpts {
    thirdPartySource: string;
    thirdPartyUserId: string;
}

declare const ExusExternalUserAriResourceOwner = "exus-external";
export { ExusExternalUserAriResourceOwner }
export { ExusExternalUserAriResourceOwner as ExusExternalUserAriResourceOwner_alias_1 }

declare const ExusExternalUserAriResourceType = "user";
export { ExusExternalUserAriResourceType }
export { ExusExternalUserAriResourceType as ExusExternalUserAriResourceType_alias_1 }

export declare const exusExternalUserAriStaticOpts: AriStaticProperties;

export declare const FavouriteType: "favourite";

export declare const FeatureFlagHistoryType: "feature-flag-history";

export declare const FeatureFlagType: "feature-flag";

export declare const FeedbackType: "feedback";

declare class FigmaFileAri extends RegisteredAri {
    private constructor();
    private readonly _fileId;
    get fileId(): string;
    static create(opts: FigmaFileAriOpts): FigmaFileAri;
    static parse(maybeAri: string): FigmaFileAri;
    getVariables(): {
        fileId: string;
    };
}
export { FigmaFileAri }
export { FigmaFileAri as FigmaFileAri_alias_1 }
export { FigmaFileAri as FigmaFileAri_alias_2 }

export declare interface FigmaFileAriOpts {
    fileId: string;
}

declare const FigmaFileAriResourceOwner = "figma";
export { FigmaFileAriResourceOwner }
export { FigmaFileAriResourceOwner as FigmaFileAriResourceOwner_alias_1 }

declare const FigmaFileAriResourceType = "file";
export { FigmaFileAriResourceType }
export { FigmaFileAriResourceType as FigmaFileAriResourceType_alias_1 }

export declare const figmaFileAriStaticOpts: AriStaticProperties;

export declare const FileType: "file";

export declare const FilterEmailSubscriptionType: "filter-email-subscription";

export declare const FilterType: "filter";

export declare const FlowEditorType: "flow-editor";

export declare const FocusAreaStatusUpdateType: "focus-area-status-update";

export declare const FocusAreaType: "focus-area";

export declare const FolderType: "folder";

export declare const FormType: "form";

export declare const ForwardDocumentSubscriptionType: "forward-document-subscription";

export declare const ForwardDocumentType: "forward-document";

export declare const GoalType: "goal";

declare class GoogleDocumentAri extends RegisteredAri {
    private constructor();
    private readonly _docId;
    get docId(): string;
    static create(opts: GoogleDocumentAriOpts): GoogleDocumentAri;
    static parse(maybeAri: string): GoogleDocumentAri;
    getVariables(): {
        docId: string;
    };
}
export { GoogleDocumentAri }
export { GoogleDocumentAri as GoogleDocumentAri_alias_1 }
export { GoogleDocumentAri as GoogleDocumentAri_alias_2 }

export declare interface GoogleDocumentAriOpts {
    docId: string;
}

declare const GoogleDocumentAriResourceOwner = "google";
export { GoogleDocumentAriResourceOwner }
export { GoogleDocumentAriResourceOwner as GoogleDocumentAriResourceOwner_alias_1 }

declare const GoogleDocumentAriResourceType = "document";
export { GoogleDocumentAriResourceType }
export { GoogleDocumentAriResourceType as GoogleDocumentAriResourceType_alias_1 }

export declare const googleDocumentAriStaticOpts: AriStaticProperties;

declare class GoogleFormAri extends RegisteredAri {
    private constructor();
    private readonly _docId;
    get docId(): string;
    static create(opts: GoogleFormAriOpts): GoogleFormAri;
    static parse(maybeAri: string): GoogleFormAri;
    getVariables(): {
        docId: string;
    };
}
export { GoogleFormAri }
export { GoogleFormAri as GoogleFormAri_alias_1 }
export { GoogleFormAri as GoogleFormAri_alias_2 }

export declare interface GoogleFormAriOpts {
    docId: string;
}

declare const GoogleFormAriResourceOwner = "google";
export { GoogleFormAriResourceOwner }
export { GoogleFormAriResourceOwner as GoogleFormAriResourceOwner_alias_1 }

declare const GoogleFormAriResourceType = "form";
export { GoogleFormAriResourceType }
export { GoogleFormAriResourceType as GoogleFormAriResourceType_alias_1 }

export declare const googleFormAriStaticOpts: AriStaticProperties;

declare class GooglePresentationAri extends RegisteredAri {
    private constructor();
    private readonly _docId;
    get docId(): string;
    static create(opts: GooglePresentationAriOpts): GooglePresentationAri;
    static parse(maybeAri: string): GooglePresentationAri;
    getVariables(): {
        docId: string;
    };
}
export { GooglePresentationAri }
export { GooglePresentationAri as GooglePresentationAri_alias_1 }
export { GooglePresentationAri as GooglePresentationAri_alias_2 }

export declare interface GooglePresentationAriOpts {
    docId: string;
}

declare const GooglePresentationAriResourceOwner = "google";
export { GooglePresentationAriResourceOwner }
export { GooglePresentationAriResourceOwner as GooglePresentationAriResourceOwner_alias_1 }

declare const GooglePresentationAriResourceType = "presentation";
export { GooglePresentationAriResourceType }
export { GooglePresentationAriResourceType as GooglePresentationAriResourceType_alias_1 }

export declare const googlePresentationAriStaticOpts: AriStaticProperties;

declare class GoogleSpreadsheetAri extends RegisteredAri {
    private constructor();
    private readonly _docId;
    get docId(): string;
    static create(opts: GoogleSpreadsheetAriOpts): GoogleSpreadsheetAri;
    static parse(maybeAri: string): GoogleSpreadsheetAri;
    getVariables(): {
        docId: string;
    };
}
export { GoogleSpreadsheetAri }
export { GoogleSpreadsheetAri as GoogleSpreadsheetAri_alias_1 }
export { GoogleSpreadsheetAri as GoogleSpreadsheetAri_alias_2 }

export declare interface GoogleSpreadsheetAriOpts {
    docId: string;
}

declare const GoogleSpreadsheetAriResourceOwner = "google";
export { GoogleSpreadsheetAriResourceOwner }
export { GoogleSpreadsheetAriResourceOwner as GoogleSpreadsheetAriResourceOwner_alias_1 }

declare const GoogleSpreadsheetAriResourceType = "spreadsheet";
export { GoogleSpreadsheetAriResourceType }
export { GoogleSpreadsheetAriResourceType as GoogleSpreadsheetAriResourceType_alias_1 }

export declare const googleSpreadsheetAriStaticOpts: AriStaticProperties;

declare class GraphBranchAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _branchId;
    get activationId(): string;
    get branchId(): string;
    static create(opts: GraphBranchAriOpts): GraphBranchAri;
    static parse(maybeAri: string): GraphBranchAri;
    getVariables(): {
        activationId: string;
        branchId: string;
    };
}
export { GraphBranchAri }
export { GraphBranchAri as GraphBranchAri_alias_1 }
export { GraphBranchAri as GraphBranchAri_alias_2 }

export declare interface GraphBranchAriOpts {
    activationId: string;
    branchId: string;
}

declare const GraphBranchAriResourceOwner = "graph";
export { GraphBranchAriResourceOwner }
export { GraphBranchAriResourceOwner as GraphBranchAriResourceOwner_alias_1 }

declare const GraphBranchAriResourceType = "branch";
export { GraphBranchAriResourceType }
export { GraphBranchAriResourceType as GraphBranchAriResourceType_alias_1 }

export declare const graphBranchAriStaticOpts: AriStaticProperties;

declare class GraphBranchHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _branchId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get branchId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphBranchHistoryAriOpts): GraphBranchHistoryAri;
    static parse(maybeAri: string): GraphBranchHistoryAri;
    getVariables(): {
        activationId: string;
        branchId: string;
        updateSequenceNumber: string;
    };
}
export { GraphBranchHistoryAri }
export { GraphBranchHistoryAri as GraphBranchHistoryAri_alias_1 }
export { GraphBranchHistoryAri as GraphBranchHistoryAri_alias_2 }

export declare interface GraphBranchHistoryAriOpts {
    activationId: string;
    branchId: string;
    updateSequenceNumber: string;
}

declare const GraphBranchHistoryAriResourceOwner = "graph";
export { GraphBranchHistoryAriResourceOwner }
export { GraphBranchHistoryAriResourceOwner as GraphBranchHistoryAriResourceOwner_alias_1 }

declare const GraphBranchHistoryAriResourceType = "branch-history";
export { GraphBranchHistoryAriResourceType }
export { GraphBranchHistoryAriResourceType as GraphBranchHistoryAriResourceType_alias_1 }

export declare const graphBranchHistoryAriStaticOpts: AriStaticProperties;

declare class GraphBuildAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _buildId;
    get activationId(): string;
    get buildId(): string;
    static create(opts: GraphBuildAriOpts): GraphBuildAri;
    static parse(maybeAri: string): GraphBuildAri;
    getVariables(): {
        activationId: string;
        buildId: string;
    };
}
export { GraphBuildAri }
export { GraphBuildAri as GraphBuildAri_alias_1 }
export { GraphBuildAri as GraphBuildAri_alias_2 }

export declare interface GraphBuildAriOpts {
    activationId: string;
    buildId: string;
}

declare const GraphBuildAriResourceOwner = "graph";
export { GraphBuildAriResourceOwner }
export { GraphBuildAriResourceOwner as GraphBuildAriResourceOwner_alias_1 }

declare const GraphBuildAriResourceType = "build";
export { GraphBuildAriResourceType }
export { GraphBuildAriResourceType as GraphBuildAriResourceType_alias_1 }

export declare const graphBuildAriStaticOpts: AriStaticProperties;

declare class GraphBuildHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _buildId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get buildId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphBuildHistoryAriOpts): GraphBuildHistoryAri;
    static parse(maybeAri: string): GraphBuildHistoryAri;
    getVariables(): {
        activationId: string;
        buildId: string;
        updateSequenceNumber: string;
    };
}
export { GraphBuildHistoryAri }
export { GraphBuildHistoryAri as GraphBuildHistoryAri_alias_1 }
export { GraphBuildHistoryAri as GraphBuildHistoryAri_alias_2 }

export declare interface GraphBuildHistoryAriOpts {
    activationId: string;
    buildId: string;
    updateSequenceNumber: string;
}

declare const GraphBuildHistoryAriResourceOwner = "graph";
export { GraphBuildHistoryAriResourceOwner }
export { GraphBuildHistoryAriResourceOwner as GraphBuildHistoryAriResourceOwner_alias_1 }

declare const GraphBuildHistoryAriResourceType = "build-history";
export { GraphBuildHistoryAriResourceType }
export { GraphBuildHistoryAriResourceType as GraphBuildHistoryAriResourceType_alias_1 }

export declare const graphBuildHistoryAriStaticOpts: AriStaticProperties;

declare class GraphCommitAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _commitId;
    get activationId(): string;
    get commitId(): string;
    static create(opts: GraphCommitAriOpts): GraphCommitAri;
    static parse(maybeAri: string): GraphCommitAri;
    getVariables(): {
        activationId: string;
        commitId: string;
    };
}
export { GraphCommitAri }
export { GraphCommitAri as GraphCommitAri_alias_1 }
export { GraphCommitAri as GraphCommitAri_alias_2 }

export declare interface GraphCommitAriOpts {
    activationId: string;
    commitId: string;
}

declare const GraphCommitAriResourceOwner = "graph";
export { GraphCommitAriResourceOwner }
export { GraphCommitAriResourceOwner as GraphCommitAriResourceOwner_alias_1 }

declare const GraphCommitAriResourceType = "commit";
export { GraphCommitAriResourceType }
export { GraphCommitAriResourceType as GraphCommitAriResourceType_alias_1 }

export declare const graphCommitAriStaticOpts: AriStaticProperties;

declare class GraphContentAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _contentId;
    get activationId(): string;
    get contentId(): string;
    static create(opts: GraphContentAriOpts): GraphContentAri;
    static parse(maybeAri: string): GraphContentAri;
    getVariables(): {
        activationId: string;
        contentId: string;
    };
}
export { GraphContentAri }
export { GraphContentAri as GraphContentAri_alias_1 }
export { GraphContentAri as GraphContentAri_alias_2 }

export declare interface GraphContentAriOpts {
    activationId: string;
    contentId: string;
}

declare const GraphContentAriResourceOwner = "graph";
export { GraphContentAriResourceOwner }
export { GraphContentAriResourceOwner as GraphContentAriResourceOwner_alias_1 }

declare const GraphContentAriResourceType = "content";
export { GraphContentAriResourceType }
export { GraphContentAriResourceType as GraphContentAriResourceType_alias_1 }

export declare const graphContentAriStaticOpts: AriStaticProperties;

declare class GraphDeploymentAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _deploymentId;
    get activationId(): string;
    get deploymentId(): string;
    static create(opts: GraphDeploymentAriOpts): GraphDeploymentAri;
    static parse(maybeAri: string): GraphDeploymentAri;
    getVariables(): {
        activationId: string;
        deploymentId: string;
    };
}
export { GraphDeploymentAri }
export { GraphDeploymentAri as GraphDeploymentAri_alias_1 }
export { GraphDeploymentAri as GraphDeploymentAri_alias_2 }

export declare interface GraphDeploymentAriOpts {
    activationId: string;
    deploymentId: string;
}

declare const GraphDeploymentAriResourceOwner = "graph";
export { GraphDeploymentAriResourceOwner }
export { GraphDeploymentAriResourceOwner as GraphDeploymentAriResourceOwner_alias_1 }

declare const GraphDeploymentAriResourceType = "deployment";
export { GraphDeploymentAriResourceType }
export { GraphDeploymentAriResourceType as GraphDeploymentAriResourceType_alias_1 }

export declare const graphDeploymentAriStaticOpts: AriStaticProperties;

declare class GraphDeploymentHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _deploymentId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get deploymentId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphDeploymentHistoryAriOpts): GraphDeploymentHistoryAri;
    static parse(maybeAri: string): GraphDeploymentHistoryAri;
    getVariables(): {
        activationId: string;
        deploymentId: string;
        updateSequenceNumber: string;
    };
}
export { GraphDeploymentHistoryAri }
export { GraphDeploymentHistoryAri as GraphDeploymentHistoryAri_alias_1 }
export { GraphDeploymentHistoryAri as GraphDeploymentHistoryAri_alias_2 }

export declare interface GraphDeploymentHistoryAriOpts {
    activationId: string;
    deploymentId: string;
    updateSequenceNumber: string;
}

declare const GraphDeploymentHistoryAriResourceOwner = "graph";
export { GraphDeploymentHistoryAriResourceOwner }
export { GraphDeploymentHistoryAriResourceOwner as GraphDeploymentHistoryAriResourceOwner_alias_1 }

declare const GraphDeploymentHistoryAriResourceType = "deployment-history";
export { GraphDeploymentHistoryAriResourceType }
export { GraphDeploymentHistoryAriResourceType as GraphDeploymentHistoryAriResourceType_alias_1 }

export declare const graphDeploymentHistoryAriStaticOpts: AriStaticProperties;

declare class GraphDesignAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _designId;
    get activationId(): string;
    get designId(): string;
    static create(opts: GraphDesignAriOpts): GraphDesignAri;
    static parse(maybeAri: string): GraphDesignAri;
    getVariables(): {
        activationId: string;
        designId: string;
    };
}
export { GraphDesignAri }
export { GraphDesignAri as GraphDesignAri_alias_1 }
export { GraphDesignAri as GraphDesignAri_alias_2 }

export declare interface GraphDesignAriOpts {
    activationId: string;
    designId: string;
}

declare const GraphDesignAriResourceOwner = "graph";
export { GraphDesignAriResourceOwner }
export { GraphDesignAriResourceOwner as GraphDesignAriResourceOwner_alias_1 }

declare const GraphDesignAriResourceType = "design";
export { GraphDesignAriResourceType }
export { GraphDesignAriResourceType as GraphDesignAriResourceType_alias_1 }

export declare const graphDesignAriStaticOpts: AriStaticProperties;

declare class GraphDesignHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _designId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get designId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphDesignHistoryAriOpts): GraphDesignHistoryAri;
    static parse(maybeAri: string): GraphDesignHistoryAri;
    getVariables(): {
        activationId: string;
        designId: string;
        updateSequenceNumber: string;
    };
}
export { GraphDesignHistoryAri }
export { GraphDesignHistoryAri as GraphDesignHistoryAri_alias_1 }
export { GraphDesignHistoryAri as GraphDesignHistoryAri_alias_2 }

export declare interface GraphDesignHistoryAriOpts {
    activationId: string;
    designId: string;
    updateSequenceNumber: string;
}

declare const GraphDesignHistoryAriResourceOwner = "graph";
export { GraphDesignHistoryAriResourceOwner }
export { GraphDesignHistoryAriResourceOwner as GraphDesignHistoryAriResourceOwner_alias_1 }

declare const GraphDesignHistoryAriResourceType = "design-history";
export { GraphDesignHistoryAriResourceType }
export { GraphDesignHistoryAriResourceType as GraphDesignHistoryAriResourceType_alias_1 }

export declare const graphDesignHistoryAriStaticOpts: AriStaticProperties;

declare class GraphDevopsComponentAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _devopsComponentId;
    get activationId(): string;
    get devopsComponentId(): string;
    static create(opts: GraphDevopsComponentAriOpts): GraphDevopsComponentAri;
    static parse(maybeAri: string): GraphDevopsComponentAri;
    getVariables(): {
        activationId: string;
        devopsComponentId: string;
    };
}
export { GraphDevopsComponentAri }
export { GraphDevopsComponentAri as GraphDevopsComponentAri_alias_1 }
export { GraphDevopsComponentAri as GraphDevopsComponentAri_alias_2 }

export declare interface GraphDevopsComponentAriOpts {
    activationId: string;
    devopsComponentId: string;
}

declare const GraphDevopsComponentAriResourceOwner = "graph";
export { GraphDevopsComponentAriResourceOwner }
export { GraphDevopsComponentAriResourceOwner as GraphDevopsComponentAriResourceOwner_alias_1 }

declare const GraphDevopsComponentAriResourceType = "devops-component";
export { GraphDevopsComponentAriResourceType }
export { GraphDevopsComponentAriResourceType as GraphDevopsComponentAriResourceType_alias_1 }

export declare const graphDevopsComponentAriStaticOpts: AriStaticProperties;

declare class GraphDocumentAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _documentId;
    get activationId(): string;
    get documentId(): string;
    static create(opts: GraphDocumentAriOpts): GraphDocumentAri;
    static parse(maybeAri: string): GraphDocumentAri;
    getVariables(): {
        activationId: string;
        documentId: string;
    };
}
export { GraphDocumentAri }
export { GraphDocumentAri as GraphDocumentAri_alias_1 }
export { GraphDocumentAri as GraphDocumentAri_alias_2 }

export declare interface GraphDocumentAriOpts {
    activationId: string;
    documentId: string;
}

declare const GraphDocumentAriResourceOwner = "graph";
export { GraphDocumentAriResourceOwner }
export { GraphDocumentAriResourceOwner as GraphDocumentAriResourceOwner_alias_1 }

declare const GraphDocumentAriResourceType = "document";
export { GraphDocumentAriResourceType }
export { GraphDocumentAriResourceType as GraphDocumentAriResourceType_alias_1 }

export declare const graphDocumentAriStaticOpts: AriStaticProperties;

declare class GraphDocumentHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _documentId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get documentId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphDocumentHistoryAriOpts): GraphDocumentHistoryAri;
    static parse(maybeAri: string): GraphDocumentHistoryAri;
    getVariables(): {
        activationId: string;
        documentId: string;
        updateSequenceNumber: string;
    };
}
export { GraphDocumentHistoryAri }
export { GraphDocumentHistoryAri as GraphDocumentHistoryAri_alias_1 }
export { GraphDocumentHistoryAri as GraphDocumentHistoryAri_alias_2 }

export declare interface GraphDocumentHistoryAriOpts {
    activationId: string;
    documentId: string;
    updateSequenceNumber: string;
}

declare const GraphDocumentHistoryAriResourceOwner = "graph";
export { GraphDocumentHistoryAriResourceOwner }
export { GraphDocumentHistoryAriResourceOwner as GraphDocumentHistoryAriResourceOwner_alias_1 }

declare const GraphDocumentHistoryAriResourceType = "document-history";
export { GraphDocumentHistoryAriResourceType }
export { GraphDocumentHistoryAriResourceType as GraphDocumentHistoryAriResourceType_alias_1 }

export declare const graphDocumentHistoryAriStaticOpts: AriStaticProperties;

declare class GraphEmployeeAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _employeeId;
    get activationId(): string;
    get employeeId(): string;
    static create(opts: GraphEmployeeAriOpts): GraphEmployeeAri;
    static parse(maybeAri: string): GraphEmployeeAri;
    getVariables(): {
        activationId: string;
        employeeId: string;
    };
}
export { GraphEmployeeAri }
export { GraphEmployeeAri as GraphEmployeeAri_alias_1 }
export { GraphEmployeeAri as GraphEmployeeAri_alias_2 }

export declare interface GraphEmployeeAriOpts {
    activationId: string;
    employeeId: string;
}

declare const GraphEmployeeAriResourceOwner = "graph";
export { GraphEmployeeAriResourceOwner }
export { GraphEmployeeAriResourceOwner as GraphEmployeeAriResourceOwner_alias_1 }

declare const GraphEmployeeAriResourceType = "employee";
export { GraphEmployeeAriResourceType }
export { GraphEmployeeAriResourceType as GraphEmployeeAriResourceType_alias_1 }

export declare const graphEmployeeAriStaticOpts: AriStaticProperties;

declare class GraphEmployeeHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _employeeId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get employeeId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphEmployeeHistoryAriOpts): GraphEmployeeHistoryAri;
    static parse(maybeAri: string): GraphEmployeeHistoryAri;
    getVariables(): {
        activationId: string;
        employeeId: string;
        updateSequenceNumber: string;
    };
}
export { GraphEmployeeHistoryAri }
export { GraphEmployeeHistoryAri as GraphEmployeeHistoryAri_alias_1 }
export { GraphEmployeeHistoryAri as GraphEmployeeHistoryAri_alias_2 }

export declare interface GraphEmployeeHistoryAriOpts {
    activationId: string;
    employeeId: string;
    updateSequenceNumber: string;
}

declare const GraphEmployeeHistoryAriResourceOwner = "graph";
export { GraphEmployeeHistoryAriResourceOwner }
export { GraphEmployeeHistoryAriResourceOwner as GraphEmployeeHistoryAriResourceOwner_alias_1 }

declare const GraphEmployeeHistoryAriResourceType = "employee-history";
export { GraphEmployeeHistoryAriResourceType }
export { GraphEmployeeHistoryAriResourceType as GraphEmployeeHistoryAriResourceType_alias_1 }

export declare const graphEmployeeHistoryAriStaticOpts: AriStaticProperties;

declare class GraphFeatureFlagAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _featureFlagId;
    get activationId(): string;
    get featureFlagId(): string;
    static create(opts: GraphFeatureFlagAriOpts): GraphFeatureFlagAri;
    static parse(maybeAri: string): GraphFeatureFlagAri;
    getVariables(): {
        activationId: string;
        featureFlagId: string;
    };
}
export { GraphFeatureFlagAri }
export { GraphFeatureFlagAri as GraphFeatureFlagAri_alias_1 }
export { GraphFeatureFlagAri as GraphFeatureFlagAri_alias_2 }

export declare interface GraphFeatureFlagAriOpts {
    activationId: string;
    featureFlagId: string;
}

declare const GraphFeatureFlagAriResourceOwner = "graph";
export { GraphFeatureFlagAriResourceOwner }
export { GraphFeatureFlagAriResourceOwner as GraphFeatureFlagAriResourceOwner_alias_1 }

declare const GraphFeatureFlagAriResourceType = "feature-flag";
export { GraphFeatureFlagAriResourceType }
export { GraphFeatureFlagAriResourceType as GraphFeatureFlagAriResourceType_alias_1 }

export declare const graphFeatureFlagAriStaticOpts: AriStaticProperties;

declare class GraphFeatureFlagHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _featureFlagId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get featureFlagId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphFeatureFlagHistoryAriOpts): GraphFeatureFlagHistoryAri;
    static parse(maybeAri: string): GraphFeatureFlagHistoryAri;
    getVariables(): {
        activationId: string;
        featureFlagId: string;
        updateSequenceNumber: string;
    };
}
export { GraphFeatureFlagHistoryAri }
export { GraphFeatureFlagHistoryAri as GraphFeatureFlagHistoryAri_alias_1 }
export { GraphFeatureFlagHistoryAri as GraphFeatureFlagHistoryAri_alias_2 }

export declare interface GraphFeatureFlagHistoryAriOpts {
    activationId: string;
    featureFlagId: string;
    updateSequenceNumber: string;
}

declare const GraphFeatureFlagHistoryAriResourceOwner = "graph";
export { GraphFeatureFlagHistoryAriResourceOwner }
export { GraphFeatureFlagHistoryAriResourceOwner as GraphFeatureFlagHistoryAriResourceOwner_alias_1 }

declare const GraphFeatureFlagHistoryAriResourceType = "feature-flag-history";
export { GraphFeatureFlagHistoryAriResourceType }
export { GraphFeatureFlagHistoryAriResourceType as GraphFeatureFlagHistoryAriResourceType_alias_1 }

export declare const graphFeatureFlagHistoryAriStaticOpts: AriStaticProperties;

declare class GraphIncidentAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _incidentId;
    get activationId(): string;
    get incidentId(): string;
    static create(opts: GraphIncidentAriOpts): GraphIncidentAri;
    static parse(maybeAri: string): GraphIncidentAri;
    getVariables(): {
        activationId: string;
        incidentId: string;
    };
}
export { GraphIncidentAri }
export { GraphIncidentAri as GraphIncidentAri_alias_1 }
export { GraphIncidentAri as GraphIncidentAri_alias_2 }

export declare interface GraphIncidentAriOpts {
    activationId: string;
    incidentId: string;
}

declare const GraphIncidentAriResourceOwner = "graph";
export { GraphIncidentAriResourceOwner }
export { GraphIncidentAriResourceOwner as GraphIncidentAriResourceOwner_alias_1 }

declare const GraphIncidentAriResourceType = "incident";
export { GraphIncidentAriResourceType }
export { GraphIncidentAriResourceType as GraphIncidentAriResourceType_alias_1 }

export declare const graphIncidentAriStaticOpts: AriStaticProperties;

declare class GraphIncidentHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _incidentId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get incidentId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphIncidentHistoryAriOpts): GraphIncidentHistoryAri;
    static parse(maybeAri: string): GraphIncidentHistoryAri;
    getVariables(): {
        activationId: string;
        incidentId: string;
        updateSequenceNumber: string;
    };
}
export { GraphIncidentHistoryAri }
export { GraphIncidentHistoryAri as GraphIncidentHistoryAri_alias_1 }
export { GraphIncidentHistoryAri as GraphIncidentHistoryAri_alias_2 }

export declare interface GraphIncidentHistoryAriOpts {
    activationId: string;
    incidentId: string;
    updateSequenceNumber: string;
}

declare const GraphIncidentHistoryAriResourceOwner = "graph";
export { GraphIncidentHistoryAriResourceOwner }
export { GraphIncidentHistoryAriResourceOwner as GraphIncidentHistoryAriResourceOwner_alias_1 }

declare const GraphIncidentHistoryAriResourceType = "incident-history";
export { GraphIncidentHistoryAriResourceType }
export { GraphIncidentHistoryAriResourceType as GraphIncidentHistoryAriResourceType_alias_1 }

export declare const graphIncidentHistoryAriStaticOpts: AriStaticProperties;

declare class GraphJiraProjectAndDevopsToolRelationshipAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _relationshipId;
    get workspaceId(): string;
    get relationshipId(): string;
    static create(opts: GraphJiraProjectAndDevopsToolRelationshipAriOpts): GraphJiraProjectAndDevopsToolRelationshipAri;
    static parse(maybeAri: string): GraphJiraProjectAndDevopsToolRelationshipAri;
    getVariables(): {
        workspaceId: string;
        relationshipId: string;
    };
}
export { GraphJiraProjectAndDevopsToolRelationshipAri }
export { GraphJiraProjectAndDevopsToolRelationshipAri as GraphJiraProjectAndDevopsToolRelationshipAri_alias_1 }
export { GraphJiraProjectAndDevopsToolRelationshipAri as GraphJiraProjectAndDevopsToolRelationshipAri_alias_2 }

export declare interface GraphJiraProjectAndDevopsToolRelationshipAriOpts {
    workspaceId: string;
    relationshipId: string;
}

declare const GraphJiraProjectAndDevopsToolRelationshipAriResourceOwner = "graph";
export { GraphJiraProjectAndDevopsToolRelationshipAriResourceOwner }
export { GraphJiraProjectAndDevopsToolRelationshipAriResourceOwner as GraphJiraProjectAndDevopsToolRelationshipAriResourceOwner_alias_1 }

declare const GraphJiraProjectAndDevopsToolRelationshipAriResourceType = "jira-project-and-devops-tool-relationship";
export { GraphJiraProjectAndDevopsToolRelationshipAriResourceType }
export { GraphJiraProjectAndDevopsToolRelationshipAriResourceType as GraphJiraProjectAndDevopsToolRelationshipAriResourceType_alias_1 }

export declare const graphJiraProjectAndDevopsToolRelationshipAriStaticOpts: AriStaticProperties;

declare class GraphJiraProjectAndDocumentationSpaceRelationshipAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _relationshipId;
    get workspaceId(): string;
    get relationshipId(): string;
    static create(opts: GraphJiraProjectAndDocumentationSpaceRelationshipAriOpts): GraphJiraProjectAndDocumentationSpaceRelationshipAri;
    static parse(maybeAri: string): GraphJiraProjectAndDocumentationSpaceRelationshipAri;
    getVariables(): {
        workspaceId: string;
        relationshipId: string;
    };
}
export { GraphJiraProjectAndDocumentationSpaceRelationshipAri }
export { GraphJiraProjectAndDocumentationSpaceRelationshipAri as GraphJiraProjectAndDocumentationSpaceRelationshipAri_alias_1 }
export { GraphJiraProjectAndDocumentationSpaceRelationshipAri as GraphJiraProjectAndDocumentationSpaceRelationshipAri_alias_2 }

export declare interface GraphJiraProjectAndDocumentationSpaceRelationshipAriOpts {
    workspaceId: string;
    relationshipId: string;
}

declare const GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceOwner = "graph";
export { GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceOwner }
export { GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceOwner as GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceOwner_alias_1 }

declare const GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceType = "jira-project-and-documentation-space-relationship";
export { GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceType }
export { GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceType as GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceType_alias_1 }

export declare const graphJiraProjectAndDocumentationSpaceRelationshipAriStaticOpts: AriStaticProperties;

declare class GraphJiraProjectAndOperationsTeamRelationshipAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _relationshipId;
    get workspaceId(): string;
    get relationshipId(): string;
    static create(opts: GraphJiraProjectAndOperationsTeamRelationshipAriOpts): GraphJiraProjectAndOperationsTeamRelationshipAri;
    static parse(maybeAri: string): GraphJiraProjectAndOperationsTeamRelationshipAri;
    getVariables(): {
        workspaceId: string;
        relationshipId: string;
    };
}
export { GraphJiraProjectAndOperationsTeamRelationshipAri }
export { GraphJiraProjectAndOperationsTeamRelationshipAri as GraphJiraProjectAndOperationsTeamRelationshipAri_alias_1 }
export { GraphJiraProjectAndOperationsTeamRelationshipAri as GraphJiraProjectAndOperationsTeamRelationshipAri_alias_2 }

export declare interface GraphJiraProjectAndOperationsTeamRelationshipAriOpts {
    workspaceId: string;
    relationshipId: string;
}

declare const GraphJiraProjectAndOperationsTeamRelationshipAriResourceOwner = "graph";
export { GraphJiraProjectAndOperationsTeamRelationshipAriResourceOwner }
export { GraphJiraProjectAndOperationsTeamRelationshipAriResourceOwner as GraphJiraProjectAndOperationsTeamRelationshipAriResourceOwner_alias_1 }

declare const GraphJiraProjectAndOperationsTeamRelationshipAriResourceType = "jira-project-and-operations-team-relationship";
export { GraphJiraProjectAndOperationsTeamRelationshipAriResourceType }
export { GraphJiraProjectAndOperationsTeamRelationshipAriResourceType as GraphJiraProjectAndOperationsTeamRelationshipAriResourceType_alias_1 }

export declare const graphJiraProjectAndOperationsTeamRelationshipAriStaticOpts: AriStaticProperties;

declare class GraphJiraProjectAndVcsRepositoryRelationshipAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _relationshipId;
    get workspaceId(): string;
    get relationshipId(): string;
    static create(opts: GraphJiraProjectAndVcsRepositoryRelationshipAriOpts): GraphJiraProjectAndVcsRepositoryRelationshipAri;
    static parse(maybeAri: string): GraphJiraProjectAndVcsRepositoryRelationshipAri;
    getVariables(): {
        workspaceId: string;
        relationshipId: string;
    };
}
export { GraphJiraProjectAndVcsRepositoryRelationshipAri }
export { GraphJiraProjectAndVcsRepositoryRelationshipAri as GraphJiraProjectAndVcsRepositoryRelationshipAri_alias_1 }
export { GraphJiraProjectAndVcsRepositoryRelationshipAri as GraphJiraProjectAndVcsRepositoryRelationshipAri_alias_2 }

export declare interface GraphJiraProjectAndVcsRepositoryRelationshipAriOpts {
    workspaceId: string;
    relationshipId: string;
}

declare const GraphJiraProjectAndVcsRepositoryRelationshipAriResourceOwner = "graph";
export { GraphJiraProjectAndVcsRepositoryRelationshipAriResourceOwner }
export { GraphJiraProjectAndVcsRepositoryRelationshipAriResourceOwner as GraphJiraProjectAndVcsRepositoryRelationshipAriResourceOwner_alias_1 }

declare const GraphJiraProjectAndVcsRepositoryRelationshipAriResourceType = "jira-project-and-vcs-repository-relationship";
export { GraphJiraProjectAndVcsRepositoryRelationshipAriResourceType }
export { GraphJiraProjectAndVcsRepositoryRelationshipAriResourceType as GraphJiraProjectAndVcsRepositoryRelationshipAriResourceType_alias_1 }

export declare const graphJiraProjectAndVcsRepositoryRelationshipAriStaticOpts: AriStaticProperties;

declare class GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _projectId;
    private readonly _activationId;
    private readonly _repositoryId;
    get siteId(): string;
    get projectId(): string;
    get activationId(): string;
    get repositoryId(): string;
    static create(opts: GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriOpts): GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri;
    static parse(maybeAri: string): GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri;
    getVariables(): {
        siteId: string;
        projectId: string;
        activationId: string;
        repositoryId: string;
    };
}
export { GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri }
export { GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri as GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri_alias_1 }
export { GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri as GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri_alias_2 }

export declare interface GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriOpts {
    siteId: string;
    projectId: string;
    activationId: string;
    repositoryId: string;
}

declare const GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceOwner = "graph";
export { GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceOwner }
export { GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceOwner as GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceOwner_alias_1 }

declare const GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceType = "jira-project-and-vcs-repository-relationship-temp-migration";
export { GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceType }
export { GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceType as GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceType_alias_1 }

export declare const graphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriStaticOpts: AriStaticProperties;

declare class GraphOperationsWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _providerAppId;
    private readonly _operationsWorkspaceId;
    get activationId(): string;
    get providerAppId(): string;
    get operationsWorkspaceId(): string;
    static create(opts: GraphOperationsWorkspaceAriOpts): GraphOperationsWorkspaceAri;
    static parse(maybeAri: string): GraphOperationsWorkspaceAri;
    getVariables(): {
        activationId: string;
        providerAppId: string;
        operationsWorkspaceId: string;
    };
}
export { GraphOperationsWorkspaceAri }
export { GraphOperationsWorkspaceAri as GraphOperationsWorkspaceAri_alias_1 }
export { GraphOperationsWorkspaceAri as GraphOperationsWorkspaceAri_alias_2 }

export declare interface GraphOperationsWorkspaceAriOpts {
    activationId: string;
    providerAppId: string;
    operationsWorkspaceId: string;
}

declare const GraphOperationsWorkspaceAriResourceOwner = "graph";
export { GraphOperationsWorkspaceAriResourceOwner }
export { GraphOperationsWorkspaceAriResourceOwner as GraphOperationsWorkspaceAriResourceOwner_alias_1 }

declare const GraphOperationsWorkspaceAriResourceType = "operations-workspace";
export { GraphOperationsWorkspaceAriResourceType }
export { GraphOperationsWorkspaceAriResourceType as GraphOperationsWorkspaceAriResourceType_alias_1 }

export declare const graphOperationsWorkspaceAriStaticOpts: AriStaticProperties;

declare class GraphPostIncidentReviewAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _postIncidentReviewId;
    get activationId(): string;
    get postIncidentReviewId(): string;
    static create(opts: GraphPostIncidentReviewAriOpts): GraphPostIncidentReviewAri;
    static parse(maybeAri: string): GraphPostIncidentReviewAri;
    getVariables(): {
        activationId: string;
        postIncidentReviewId: string;
    };
}
export { GraphPostIncidentReviewAri }
export { GraphPostIncidentReviewAri as GraphPostIncidentReviewAri_alias_1 }
export { GraphPostIncidentReviewAri as GraphPostIncidentReviewAri_alias_2 }

export declare interface GraphPostIncidentReviewAriOpts {
    activationId: string;
    postIncidentReviewId: string;
}

declare const GraphPostIncidentReviewAriResourceOwner = "graph";
export { GraphPostIncidentReviewAriResourceOwner }
export { GraphPostIncidentReviewAriResourceOwner as GraphPostIncidentReviewAriResourceOwner_alias_1 }

declare const GraphPostIncidentReviewAriResourceType = "post-incident-review";
export { GraphPostIncidentReviewAriResourceType }
export { GraphPostIncidentReviewAriResourceType as GraphPostIncidentReviewAriResourceType_alias_1 }

export declare const graphPostIncidentReviewAriStaticOpts: AriStaticProperties;

declare class GraphPostIncidentReviewHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _postIncidentReviewId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get postIncidentReviewId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphPostIncidentReviewHistoryAriOpts): GraphPostIncidentReviewHistoryAri;
    static parse(maybeAri: string): GraphPostIncidentReviewHistoryAri;
    getVariables(): {
        activationId: string;
        postIncidentReviewId: string;
        updateSequenceNumber: string;
    };
}
export { GraphPostIncidentReviewHistoryAri }
export { GraphPostIncidentReviewHistoryAri as GraphPostIncidentReviewHistoryAri_alias_1 }
export { GraphPostIncidentReviewHistoryAri as GraphPostIncidentReviewHistoryAri_alias_2 }

export declare interface GraphPostIncidentReviewHistoryAriOpts {
    activationId: string;
    postIncidentReviewId: string;
    updateSequenceNumber: string;
}

declare const GraphPostIncidentReviewHistoryAriResourceOwner = "graph";
export { GraphPostIncidentReviewHistoryAriResourceOwner }
export { GraphPostIncidentReviewHistoryAriResourceOwner as GraphPostIncidentReviewHistoryAriResourceOwner_alias_1 }

declare const GraphPostIncidentReviewHistoryAriResourceType = "post-incident-review-history";
export { GraphPostIncidentReviewHistoryAriResourceType }
export { GraphPostIncidentReviewHistoryAriResourceType as GraphPostIncidentReviewHistoryAriResourceType_alias_1 }

export declare const graphPostIncidentReviewHistoryAriStaticOpts: AriStaticProperties;

declare class GraphProjectAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _projectId;
    get activationId(): string;
    get projectId(): string;
    static create(opts: GraphProjectAriOpts): GraphProjectAri;
    static parse(maybeAri: string): GraphProjectAri;
    getVariables(): {
        activationId: string;
        projectId: string;
    };
}
export { GraphProjectAri }
export { GraphProjectAri as GraphProjectAri_alias_1 }
export { GraphProjectAri as GraphProjectAri_alias_2 }

export declare interface GraphProjectAriOpts {
    activationId: string;
    projectId: string;
}

declare const GraphProjectAriResourceOwner = "graph";
export { GraphProjectAriResourceOwner }
export { GraphProjectAriResourceOwner as GraphProjectAriResourceOwner_alias_1 }

declare const GraphProjectAriResourceType = "project";
export { GraphProjectAriResourceType }
export { GraphProjectAriResourceType as GraphProjectAriResourceType_alias_1 }

export declare const graphProjectAriStaticOpts: AriStaticProperties;

declare class GraphPullRequestAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _pullRequestId;
    get activationId(): string;
    get pullRequestId(): string;
    static create(opts: GraphPullRequestAriOpts): GraphPullRequestAri;
    static parse(maybeAri: string): GraphPullRequestAri;
    getVariables(): {
        activationId: string;
        pullRequestId: string;
    };
}
export { GraphPullRequestAri }
export { GraphPullRequestAri as GraphPullRequestAri_alias_1 }
export { GraphPullRequestAri as GraphPullRequestAri_alias_2 }

export declare interface GraphPullRequestAriOpts {
    activationId: string;
    pullRequestId: string;
}

declare const GraphPullRequestAriResourceOwner = "graph";
export { GraphPullRequestAriResourceOwner }
export { GraphPullRequestAriResourceOwner as GraphPullRequestAriResourceOwner_alias_1 }

declare const GraphPullRequestAriResourceType = "pull-request";
export { GraphPullRequestAriResourceType }
export { GraphPullRequestAriResourceType as GraphPullRequestAriResourceType_alias_1 }

export declare const graphPullRequestAriStaticOpts: AriStaticProperties;

declare class GraphPullRequestHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _pullRequestId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get pullRequestId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphPullRequestHistoryAriOpts): GraphPullRequestHistoryAri;
    static parse(maybeAri: string): GraphPullRequestHistoryAri;
    getVariables(): {
        activationId: string;
        pullRequestId: string;
        updateSequenceNumber: string;
    };
}
export { GraphPullRequestHistoryAri }
export { GraphPullRequestHistoryAri as GraphPullRequestHistoryAri_alias_1 }
export { GraphPullRequestHistoryAri as GraphPullRequestHistoryAri_alias_2 }

export declare interface GraphPullRequestHistoryAriOpts {
    activationId: string;
    pullRequestId: string;
    updateSequenceNumber: string;
}

declare const GraphPullRequestHistoryAriResourceOwner = "graph";
export { GraphPullRequestHistoryAriResourceOwner }
export { GraphPullRequestHistoryAriResourceOwner as GraphPullRequestHistoryAriResourceOwner_alias_1 }

declare const GraphPullRequestHistoryAriResourceType = "pull-request-history";
export { GraphPullRequestHistoryAriResourceType }
export { GraphPullRequestHistoryAriResourceType as GraphPullRequestHistoryAriResourceType_alias_1 }

export declare const graphPullRequestHistoryAriStaticOpts: AriStaticProperties;

declare class GraphRemoteLinkAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _remoteLinkId;
    get activationId(): string;
    get remoteLinkId(): string;
    static create(opts: GraphRemoteLinkAriOpts): GraphRemoteLinkAri;
    static parse(maybeAri: string): GraphRemoteLinkAri;
    getVariables(): {
        activationId: string;
        remoteLinkId: string;
    };
}
export { GraphRemoteLinkAri }
export { GraphRemoteLinkAri as GraphRemoteLinkAri_alias_1 }
export { GraphRemoteLinkAri as GraphRemoteLinkAri_alias_2 }

export declare interface GraphRemoteLinkAriOpts {
    activationId: string;
    remoteLinkId: string;
}

declare const GraphRemoteLinkAriResourceOwner = "graph";
export { GraphRemoteLinkAriResourceOwner }
export { GraphRemoteLinkAriResourceOwner as GraphRemoteLinkAriResourceOwner_alias_1 }

declare const GraphRemoteLinkAriResourceType = "remote-link";
export { GraphRemoteLinkAriResourceType }
export { GraphRemoteLinkAriResourceType as GraphRemoteLinkAriResourceType_alias_1 }

export declare const graphRemoteLinkAriStaticOpts: AriStaticProperties;

declare class GraphRemoteLinkHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _remoteLinkId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get remoteLinkId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphRemoteLinkHistoryAriOpts): GraphRemoteLinkHistoryAri;
    static parse(maybeAri: string): GraphRemoteLinkHistoryAri;
    getVariables(): {
        activationId: string;
        remoteLinkId: string;
        updateSequenceNumber: string;
    };
}
export { GraphRemoteLinkHistoryAri }
export { GraphRemoteLinkHistoryAri as GraphRemoteLinkHistoryAri_alias_1 }
export { GraphRemoteLinkHistoryAri as GraphRemoteLinkHistoryAri_alias_2 }

export declare interface GraphRemoteLinkHistoryAriOpts {
    activationId: string;
    remoteLinkId: string;
    updateSequenceNumber: string;
}

declare const GraphRemoteLinkHistoryAriResourceOwner = "graph";
export { GraphRemoteLinkHistoryAriResourceOwner }
export { GraphRemoteLinkHistoryAriResourceOwner as GraphRemoteLinkHistoryAriResourceOwner_alias_1 }

declare const GraphRemoteLinkHistoryAriResourceType = "remote-link-history";
export { GraphRemoteLinkHistoryAriResourceType }
export { GraphRemoteLinkHistoryAriResourceType as GraphRemoteLinkHistoryAriResourceType_alias_1 }

export declare const graphRemoteLinkHistoryAriStaticOpts: AriStaticProperties;

declare class GraphRepositoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _repositoryId;
    get activationId(): string;
    get repositoryId(): string;
    static create(opts: GraphRepositoryAriOpts): GraphRepositoryAri;
    static parse(maybeAri: string): GraphRepositoryAri;
    getVariables(): {
        activationId: string;
        repositoryId: string;
    };
}
export { GraphRepositoryAri }
export { GraphRepositoryAri as GraphRepositoryAri_alias_1 }
export { GraphRepositoryAri as GraphRepositoryAri_alias_2 }

export declare interface GraphRepositoryAriOpts {
    activationId: string;
    repositoryId: string;
}

declare const GraphRepositoryAriResourceOwner = "graph";
export { GraphRepositoryAriResourceOwner }
export { GraphRepositoryAriResourceOwner as GraphRepositoryAriResourceOwner_alias_1 }

declare const GraphRepositoryAriResourceType = "repository";
export { GraphRepositoryAriResourceType }
export { GraphRepositoryAriResourceType as GraphRepositoryAriResourceType_alias_1 }

export declare const graphRepositoryAriStaticOpts: AriStaticProperties;

declare class GraphSecurityContainerAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _providerAppId;
    private readonly _securityContainerId;
    get activationId(): string;
    get providerAppId(): string;
    get securityContainerId(): string;
    static create(opts: GraphSecurityContainerAriOpts): GraphSecurityContainerAri;
    static parse(maybeAri: string): GraphSecurityContainerAri;
    getVariables(): {
        activationId: string;
        providerAppId: string;
        securityContainerId: string;
    };
}
export { GraphSecurityContainerAri }
export { GraphSecurityContainerAri as GraphSecurityContainerAri_alias_1 }
export { GraphSecurityContainerAri as GraphSecurityContainerAri_alias_2 }

export declare interface GraphSecurityContainerAriOpts {
    activationId: string;
    providerAppId: string;
    securityContainerId: string;
}

declare const GraphSecurityContainerAriResourceOwner = "graph";
export { GraphSecurityContainerAriResourceOwner }
export { GraphSecurityContainerAriResourceOwner as GraphSecurityContainerAriResourceOwner_alias_1 }

declare const GraphSecurityContainerAriResourceType = "security-container";
export { GraphSecurityContainerAriResourceType }
export { GraphSecurityContainerAriResourceType as GraphSecurityContainerAriResourceType_alias_1 }

export declare const graphSecurityContainerAriStaticOpts: AriStaticProperties;

declare class GraphSecurityWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _providerAppId;
    private readonly _securityWorkspaceId;
    get activationId(): string;
    get providerAppId(): string;
    get securityWorkspaceId(): string;
    static create(opts: GraphSecurityWorkspaceAriOpts): GraphSecurityWorkspaceAri;
    static parse(maybeAri: string): GraphSecurityWorkspaceAri;
    getVariables(): {
        activationId: string;
        providerAppId: string;
        securityWorkspaceId: string;
    };
}
export { GraphSecurityWorkspaceAri }
export { GraphSecurityWorkspaceAri as GraphSecurityWorkspaceAri_alias_1 }
export { GraphSecurityWorkspaceAri as GraphSecurityWorkspaceAri_alias_2 }

export declare interface GraphSecurityWorkspaceAriOpts {
    activationId: string;
    providerAppId: string;
    securityWorkspaceId: string;
}

declare const GraphSecurityWorkspaceAriResourceOwner = "graph";
export { GraphSecurityWorkspaceAriResourceOwner }
export { GraphSecurityWorkspaceAriResourceOwner as GraphSecurityWorkspaceAriResourceOwner_alias_1 }

declare const GraphSecurityWorkspaceAriResourceType = "security-workspace";
export { GraphSecurityWorkspaceAriResourceType }
export { GraphSecurityWorkspaceAriResourceType as GraphSecurityWorkspaceAriResourceType_alias_1 }

export declare const graphSecurityWorkspaceAriStaticOpts: AriStaticProperties;

declare class GraphServiceAndJiraProjectRelationshipAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _relationshipId;
    get workspaceId(): string;
    get relationshipId(): string;
    static create(opts: GraphServiceAndJiraProjectRelationshipAriOpts): GraphServiceAndJiraProjectRelationshipAri;
    static parse(maybeAri: string): GraphServiceAndJiraProjectRelationshipAri;
    getVariables(): {
        workspaceId: string;
        relationshipId: string;
    };
}
export { GraphServiceAndJiraProjectRelationshipAri }
export { GraphServiceAndJiraProjectRelationshipAri as GraphServiceAndJiraProjectRelationshipAri_alias_1 }
export { GraphServiceAndJiraProjectRelationshipAri as GraphServiceAndJiraProjectRelationshipAri_alias_2 }

export declare interface GraphServiceAndJiraProjectRelationshipAriOpts {
    workspaceId: string;
    relationshipId: string;
}

declare const GraphServiceAndJiraProjectRelationshipAriResourceOwner = "graph";
export { GraphServiceAndJiraProjectRelationshipAriResourceOwner }
export { GraphServiceAndJiraProjectRelationshipAriResourceOwner as GraphServiceAndJiraProjectRelationshipAriResourceOwner_alias_1 }

declare const GraphServiceAndJiraProjectRelationshipAriResourceType = "service-and-jira-project-relationship";
export { GraphServiceAndJiraProjectRelationshipAriResourceType }
export { GraphServiceAndJiraProjectRelationshipAriResourceType as GraphServiceAndJiraProjectRelationshipAriResourceType_alias_1 }

export declare const graphServiceAndJiraProjectRelationshipAriStaticOpts: AriStaticProperties;

declare class GraphServiceAndOperationsTeamRelationshipAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _relationshipId;
    get workspaceId(): string;
    get relationshipId(): string;
    static create(opts: GraphServiceAndOperationsTeamRelationshipAriOpts): GraphServiceAndOperationsTeamRelationshipAri;
    static parse(maybeAri: string): GraphServiceAndOperationsTeamRelationshipAri;
    getVariables(): {
        workspaceId: string;
        relationshipId: string;
    };
}
export { GraphServiceAndOperationsTeamRelationshipAri }
export { GraphServiceAndOperationsTeamRelationshipAri as GraphServiceAndOperationsTeamRelationshipAri_alias_1 }
export { GraphServiceAndOperationsTeamRelationshipAri as GraphServiceAndOperationsTeamRelationshipAri_alias_2 }

export declare interface GraphServiceAndOperationsTeamRelationshipAriOpts {
    workspaceId: string;
    relationshipId: string;
}

declare const GraphServiceAndOperationsTeamRelationshipAriResourceOwner = "graph";
export { GraphServiceAndOperationsTeamRelationshipAriResourceOwner }
export { GraphServiceAndOperationsTeamRelationshipAriResourceOwner as GraphServiceAndOperationsTeamRelationshipAriResourceOwner_alias_1 }

declare const GraphServiceAndOperationsTeamRelationshipAriResourceType = "service-and-operations-team-relationship";
export { GraphServiceAndOperationsTeamRelationshipAriResourceType }
export { GraphServiceAndOperationsTeamRelationshipAriResourceType as GraphServiceAndOperationsTeamRelationshipAriResourceType_alias_1 }

export declare const graphServiceAndOperationsTeamRelationshipAriStaticOpts: AriStaticProperties;

declare class GraphServiceAndVcsRepositoryRelationshipAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _relationshipId;
    get workspaceId(): string;
    get relationshipId(): string;
    static create(opts: GraphServiceAndVcsRepositoryRelationshipAriOpts): GraphServiceAndVcsRepositoryRelationshipAri;
    static parse(maybeAri: string): GraphServiceAndVcsRepositoryRelationshipAri;
    getVariables(): {
        workspaceId: string;
        relationshipId: string;
    };
}
export { GraphServiceAndVcsRepositoryRelationshipAri }
export { GraphServiceAndVcsRepositoryRelationshipAri as GraphServiceAndVcsRepositoryRelationshipAri_alias_1 }
export { GraphServiceAndVcsRepositoryRelationshipAri as GraphServiceAndVcsRepositoryRelationshipAri_alias_2 }

export declare interface GraphServiceAndVcsRepositoryRelationshipAriOpts {
    workspaceId: string;
    relationshipId: string;
}

declare const GraphServiceAndVcsRepositoryRelationshipAriResourceOwner = "graph";
export { GraphServiceAndVcsRepositoryRelationshipAriResourceOwner }
export { GraphServiceAndVcsRepositoryRelationshipAriResourceOwner as GraphServiceAndVcsRepositoryRelationshipAriResourceOwner_alias_1 }

declare const GraphServiceAndVcsRepositoryRelationshipAriResourceType = "service-and-vcs-repository-relationship";
export { GraphServiceAndVcsRepositoryRelationshipAriResourceType }
export { GraphServiceAndVcsRepositoryRelationshipAriResourceType as GraphServiceAndVcsRepositoryRelationshipAriResourceType_alias_1 }

export declare const graphServiceAndVcsRepositoryRelationshipAriStaticOpts: AriStaticProperties;

declare class GraphServiceAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _serviceId;
    get workspaceId(): string;
    get serviceId(): string;
    static create(opts: GraphServiceAriOpts): GraphServiceAri;
    static parse(maybeAri: string): GraphServiceAri;
    getVariables(): {
        workspaceId: string;
        serviceId: string;
    };
}
export { GraphServiceAri }
export { GraphServiceAri as GraphServiceAri_alias_1 }
export { GraphServiceAri as GraphServiceAri_alias_2 }

export declare interface GraphServiceAriOpts {
    workspaceId: string;
    serviceId: string;
}

declare const GraphServiceAriResourceOwner = "graph";
export { GraphServiceAriResourceOwner }
export { GraphServiceAriResourceOwner as GraphServiceAriResourceOwner_alias_1 }

declare const GraphServiceAriResourceType = "service";
export { GraphServiceAriResourceType }
export { GraphServiceAriResourceType as GraphServiceAriResourceType_alias_1 }

export declare const graphServiceAriStaticOpts: AriStaticProperties;

declare class GraphServiceRelationshipAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _relationshipId;
    get workspaceId(): string;
    get relationshipId(): string;
    static create(opts: GraphServiceRelationshipAriOpts): GraphServiceRelationshipAri;
    static parse(maybeAri: string): GraphServiceRelationshipAri;
    getVariables(): {
        workspaceId: string;
        relationshipId: string;
    };
}
export { GraphServiceRelationshipAri }
export { GraphServiceRelationshipAri as GraphServiceRelationshipAri_alias_1 }
export { GraphServiceRelationshipAri as GraphServiceRelationshipAri_alias_2 }

export declare interface GraphServiceRelationshipAriOpts {
    workspaceId: string;
    relationshipId: string;
}

declare const GraphServiceRelationshipAriResourceOwner = "graph";
export { GraphServiceRelationshipAriResourceOwner }
export { GraphServiceRelationshipAriResourceOwner as GraphServiceRelationshipAriResourceOwner_alias_1 }

declare const GraphServiceRelationshipAriResourceType = "service-relationship";
export { GraphServiceRelationshipAriResourceType }
export { GraphServiceRelationshipAriResourceType as GraphServiceRelationshipAriResourceType_alias_1 }

export declare const graphServiceRelationshipAriStaticOpts: AriStaticProperties;

declare class GraphVideoAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _entityUUID;
    get activationId(): string;
    get entityUUID(): string;
    static create(opts: GraphVideoAriOpts): GraphVideoAri;
    static parse(maybeAri: string): GraphVideoAri;
    getVariables(): {
        activationId: string;
        entityUUID: string;
    };
}
export { GraphVideoAri }
export { GraphVideoAri as GraphVideoAri_alias_1 }
export { GraphVideoAri as GraphVideoAri_alias_2 }

export declare interface GraphVideoAriOpts {
    activationId: string;
    entityUUID: string;
}

declare const GraphVideoAriResourceOwner = "graph";
export { GraphVideoAriResourceOwner }
export { GraphVideoAriResourceOwner as GraphVideoAriResourceOwner_alias_1 }

declare const GraphVideoAriResourceType = "video";
export { GraphVideoAriResourceType }
export { GraphVideoAriResourceType as GraphVideoAriResourceType_alias_1 }

export declare const graphVideoAriStaticOpts: AriStaticProperties;

declare class GraphVideoHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _entityUUID;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get entityUUID(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphVideoHistoryAriOpts): GraphVideoHistoryAri;
    static parse(maybeAri: string): GraphVideoHistoryAri;
    getVariables(): {
        activationId: string;
        entityUUID: string;
        updateSequenceNumber: string;
    };
}
export { GraphVideoHistoryAri }
export { GraphVideoHistoryAri as GraphVideoHistoryAri_alias_1 }
export { GraphVideoHistoryAri as GraphVideoHistoryAri_alias_2 }

export declare interface GraphVideoHistoryAriOpts {
    activationId: string;
    entityUUID: string;
    updateSequenceNumber: string;
}

declare const GraphVideoHistoryAriResourceOwner = "graph";
export { GraphVideoHistoryAriResourceOwner }
export { GraphVideoHistoryAriResourceOwner as GraphVideoHistoryAriResourceOwner_alias_1 }

declare const GraphVideoHistoryAriResourceType = "video-history";
export { GraphVideoHistoryAriResourceType }
export { GraphVideoHistoryAriResourceType as GraphVideoHistoryAriResourceType_alias_1 }

export declare const graphVideoHistoryAriStaticOpts: AriStaticProperties;

declare class GraphVulnerabilityAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _vulnerabilityId;
    get activationId(): string;
    get vulnerabilityId(): string;
    static create(opts: GraphVulnerabilityAriOpts): GraphVulnerabilityAri;
    static parse(maybeAri: string): GraphVulnerabilityAri;
    getVariables(): {
        activationId: string;
        vulnerabilityId: string;
    };
}
export { GraphVulnerabilityAri }
export { GraphVulnerabilityAri as GraphVulnerabilityAri_alias_1 }
export { GraphVulnerabilityAri as GraphVulnerabilityAri_alias_2 }

export declare interface GraphVulnerabilityAriOpts {
    activationId: string;
    vulnerabilityId: string;
}

declare const GraphVulnerabilityAriResourceOwner = "graph";
export { GraphVulnerabilityAriResourceOwner }
export { GraphVulnerabilityAriResourceOwner as GraphVulnerabilityAriResourceOwner_alias_1 }

declare const GraphVulnerabilityAriResourceType = "vulnerability";
export { GraphVulnerabilityAriResourceType }
export { GraphVulnerabilityAriResourceType as GraphVulnerabilityAriResourceType_alias_1 }

export declare const graphVulnerabilityAriStaticOpts: AriStaticProperties;

declare class GraphVulnerabilityHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _vulnerabilityId;
    private readonly _updateSequenceNumber;
    get activationId(): string;
    get vulnerabilityId(): string;
    get updateSequenceNumber(): string;
    static create(opts: GraphVulnerabilityHistoryAriOpts): GraphVulnerabilityHistoryAri;
    static parse(maybeAri: string): GraphVulnerabilityHistoryAri;
    getVariables(): {
        activationId: string;
        vulnerabilityId: string;
        updateSequenceNumber: string;
    };
}
export { GraphVulnerabilityHistoryAri }
export { GraphVulnerabilityHistoryAri as GraphVulnerabilityHistoryAri_alias_1 }
export { GraphVulnerabilityHistoryAri as GraphVulnerabilityHistoryAri_alias_2 }

export declare interface GraphVulnerabilityHistoryAriOpts {
    activationId: string;
    vulnerabilityId: string;
    updateSequenceNumber: string;
}

declare const GraphVulnerabilityHistoryAriResourceOwner = "graph";
export { GraphVulnerabilityHistoryAriResourceOwner }
export { GraphVulnerabilityHistoryAriResourceOwner as GraphVulnerabilityHistoryAriResourceOwner_alias_1 }

declare const GraphVulnerabilityHistoryAriResourceType = "vulnerability-history";
export { GraphVulnerabilityHistoryAriResourceType }
export { GraphVulnerabilityHistoryAriResourceType as GraphVulnerabilityHistoryAriResourceType_alias_1 }

export declare const graphVulnerabilityHistoryAriStaticOpts: AriStaticProperties;

declare class GraphWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    get workspaceId(): string;
    static create(opts: GraphWorkspaceAriOpts): GraphWorkspaceAri;
    static parse(maybeAri: string): GraphWorkspaceAri;
    getVariables(): {
        workspaceId: string;
    };
}
export { GraphWorkspaceAri }
export { GraphWorkspaceAri as GraphWorkspaceAri_alias_1 }
export { GraphWorkspaceAri as GraphWorkspaceAri_alias_2 }

export declare interface GraphWorkspaceAriOpts {
    workspaceId: string;
}

declare const GraphWorkspaceAriResourceOwner = "graph";
export { GraphWorkspaceAriResourceOwner }
export { GraphWorkspaceAriResourceOwner as GraphWorkspaceAriResourceOwner_alias_1 }

declare const GraphWorkspaceAriResourceType = "workspace";
export { GraphWorkspaceAriResourceType }
export { GraphWorkspaceAriResourceType as GraphWorkspaceAriResourceType_alias_1 }

export declare const graphWorkspaceAriStaticOpts: AriStaticProperties;

export declare const GroupType: "group";

declare class HelpArticleAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _helpObjectId;
    get activationId(): string;
    get helpObjectId(): string;
    static create(opts: HelpArticleAriOpts): HelpArticleAri;
    static parse(maybeAri: string): HelpArticleAri;
    getVariables(): {
        activationId: string;
        helpObjectId: string;
    };
}
export { HelpArticleAri }
export { HelpArticleAri as HelpArticleAri_alias_1 }
export { HelpArticleAri as HelpArticleAri_alias_2 }

export declare interface HelpArticleAriOpts {
    activationId: string;
    helpObjectId: string;
}

declare const HelpArticleAriResourceOwner = "help";
export { HelpArticleAriResourceOwner }
export { HelpArticleAriResourceOwner as HelpArticleAriResourceOwner_alias_1 }

declare const HelpArticleAriResourceType = "article";
export { HelpArticleAriResourceType }
export { HelpArticleAriResourceType as HelpArticleAriResourceType_alias_1 }

export declare const helpArticleAriStaticOpts: AriStaticProperties;

export declare const HelpCenterType: "help-center";

declare class HelpChannelAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _helpObjectId;
    get activationId(): string;
    get helpObjectId(): string;
    static create(opts: HelpChannelAriOpts): HelpChannelAri;
    static parse(maybeAri: string): HelpChannelAri;
    getVariables(): {
        activationId: string;
        helpObjectId: string;
    };
}
export { HelpChannelAri }
export { HelpChannelAri as HelpChannelAri_alias_1 }
export { HelpChannelAri as HelpChannelAri_alias_2 }

export declare interface HelpChannelAriOpts {
    activationId: string;
    helpObjectId: string;
}

declare const HelpChannelAriResourceOwner = "help";
export { HelpChannelAriResourceOwner }
export { HelpChannelAriResourceOwner as HelpChannelAriResourceOwner_alias_1 }

declare const HelpChannelAriResourceType = "channel";
export { HelpChannelAriResourceType }
export { HelpChannelAriResourceType as HelpChannelAriResourceType_alias_1 }

export declare const helpChannelAriStaticOpts: AriStaticProperties;

export declare const HelpDeskType: "help-desk";

declare class HelpHelpCenterAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _helpCenterId;
    get activationId(): string;
    get helpCenterId(): string;
    static create(opts: HelpHelpCenterAriOpts): HelpHelpCenterAri;
    static parse(maybeAri: string): HelpHelpCenterAri;
    getVariables(): {
        activationId: string;
        helpCenterId: string;
    };
}
export { HelpHelpCenterAri }
export { HelpHelpCenterAri as HelpHelpCenterAri_alias_1 }
export { HelpHelpCenterAri as HelpHelpCenterAri_alias_2 }

export declare interface HelpHelpCenterAriOpts {
    activationId: string;
    helpCenterId: string;
}

declare const HelpHelpCenterAriResourceOwner = "help";
export { HelpHelpCenterAriResourceOwner }
export { HelpHelpCenterAriResourceOwner as HelpHelpCenterAriResourceOwner_alias_1 }

declare const HelpHelpCenterAriResourceType = "help-center";
export { HelpHelpCenterAriResourceType }
export { HelpHelpCenterAriResourceType as HelpHelpCenterAriResourceType_alias_1 }

export declare const helpHelpCenterAriStaticOpts: AriStaticProperties;

declare class HelpHelpDeskAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _helpDeskId;
    get activationId(): string;
    get helpDeskId(): string;
    static create(opts: HelpHelpDeskAriOpts): HelpHelpDeskAri;
    static parse(maybeAri: string): HelpHelpDeskAri;
    getVariables(): {
        activationId: string;
        helpDeskId: string;
    };
}
export { HelpHelpDeskAri }
export { HelpHelpDeskAri as HelpHelpDeskAri_alias_1 }
export { HelpHelpDeskAri as HelpHelpDeskAri_alias_2 }

export declare interface HelpHelpDeskAriOpts {
    activationId: string;
    helpDeskId: string;
}

declare const HelpHelpDeskAriResourceOwner = "help";
export { HelpHelpDeskAriResourceOwner }
export { HelpHelpDeskAriResourceOwner as HelpHelpDeskAriResourceOwner_alias_1 }

declare const HelpHelpDeskAriResourceType = "help-desk";
export { HelpHelpDeskAriResourceType }
export { HelpHelpDeskAriResourceType as HelpHelpDeskAriResourceType_alias_1 }

export declare const helpHelpDeskAriStaticOpts: AriStaticProperties;

declare class HelpLayoutAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _layoutId;
    get activationId(): string;
    get layoutId(): string;
    static create(opts: HelpLayoutAriOpts): HelpLayoutAri;
    static parse(maybeAri: string): HelpLayoutAri;
    getVariables(): {
        activationId: string;
        layoutId: string;
    };
}
export { HelpLayoutAri }
export { HelpLayoutAri as HelpLayoutAri_alias_1 }
export { HelpLayoutAri as HelpLayoutAri_alias_2 }

export declare interface HelpLayoutAriOpts {
    activationId: string;
    layoutId: string;
}

declare const HelpLayoutAriResourceOwner = "help";
export { HelpLayoutAriResourceOwner }
export { HelpLayoutAriResourceOwner as HelpLayoutAriResourceOwner_alias_1 }

declare const HelpLayoutAriResourceType = "layout";
export { HelpLayoutAriResourceType }
export { HelpLayoutAriResourceType as HelpLayoutAriResourceType_alias_1 }

export declare const helpLayoutAriStaticOpts: AriStaticProperties;

export declare const HelpPointerType: "help-pointer";

declare class HelpPortalAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _helpObjectId;
    get activationId(): string;
    get helpObjectId(): string;
    static create(opts: HelpPortalAriOpts): HelpPortalAri;
    static parse(maybeAri: string): HelpPortalAri;
    getVariables(): {
        activationId: string;
        helpObjectId: string;
    };
}
export { HelpPortalAri }
export { HelpPortalAri as HelpPortalAri_alias_1 }
export { HelpPortalAri as HelpPortalAri_alias_2 }

export declare interface HelpPortalAriOpts {
    activationId: string;
    helpObjectId: string;
}

declare const HelpPortalAriResourceOwner = "help";
export { HelpPortalAriResourceOwner }
export { HelpPortalAriResourceOwner as HelpPortalAriResourceOwner_alias_1 }

declare const HelpPortalAriResourceType = "portal";
export { HelpPortalAriResourceType }
export { HelpPortalAriResourceType as HelpPortalAriResourceType_alias_1 }

export declare const helpPortalAriStaticOpts: AriStaticProperties;

declare class HelpRequestFormAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _helpObjectId;
    get activationId(): string;
    get helpObjectId(): string;
    static create(opts: HelpRequestFormAriOpts): HelpRequestFormAri;
    static parse(maybeAri: string): HelpRequestFormAri;
    getVariables(): {
        activationId: string;
        helpObjectId: string;
    };
}
export { HelpRequestFormAri }
export { HelpRequestFormAri as HelpRequestFormAri_alias_1 }
export { HelpRequestFormAri as HelpRequestFormAri_alias_2 }

export declare interface HelpRequestFormAriOpts {
    activationId: string;
    helpObjectId: string;
}

declare const HelpRequestFormAriResourceOwner = "help";
export { HelpRequestFormAriResourceOwner }
export { HelpRequestFormAriResourceOwner as HelpRequestFormAriResourceOwner_alias_1 }

declare const HelpRequestFormAriResourceType = "request-form";
export { HelpRequestFormAriResourceType }
export { HelpRequestFormAriResourceType as HelpRequestFormAriResourceType_alias_1 }

export declare const helpRequestFormAriStaticOpts: AriStaticProperties;

declare class IdentityAppAri extends RegisteredAri {
    private constructor();
    private readonly _platform;
    private readonly _appId;
    get platform(): string;
    get appId(): string;
    static create(opts: IdentityAppAriOpts): IdentityAppAri;
    static parse(maybeAri: string): IdentityAppAri;
    getVariables(): {
        platform: string;
        appId: string;
    };
}
export { IdentityAppAri }
export { IdentityAppAri as IdentityAppAri_alias_1 }
export { IdentityAppAri as IdentityAppAri_alias_2 }

export declare interface IdentityAppAriOpts {
    platform: string;
    appId: string;
}

declare const IdentityAppAriResourceOwner = "identity";
export { IdentityAppAriResourceOwner }
export { IdentityAppAriResourceOwner as IdentityAppAriResourceOwner_alias_1 }

declare const IdentityAppAriResourceType = "app";
export { IdentityAppAriResourceType }
export { IdentityAppAriResourceType as IdentityAppAriResourceType_alias_1 }

export declare const identityAppAriStaticOpts: AriStaticProperties;

declare class IdentityAuthPolicyAri extends RegisteredAri {
    private constructor();
    private readonly _authPolicyId;
    get authPolicyId(): string;
    static create(opts: IdentityAuthPolicyAriOpts): IdentityAuthPolicyAri;
    static parse(maybeAri: string): IdentityAuthPolicyAri;
    getVariables(): {
        authPolicyId: string;
    };
}
export { IdentityAuthPolicyAri }
export { IdentityAuthPolicyAri as IdentityAuthPolicyAri_alias_1 }
export { IdentityAuthPolicyAri as IdentityAuthPolicyAri_alias_2 }

export declare interface IdentityAuthPolicyAriOpts {
    authPolicyId: string;
}

declare const IdentityAuthPolicyAriResourceOwner = "identity";
export { IdentityAuthPolicyAriResourceOwner }
export { IdentityAuthPolicyAriResourceOwner as IdentityAuthPolicyAriResourceOwner_alias_1 }

declare const IdentityAuthPolicyAriResourceType = "auth-policy";
export { IdentityAuthPolicyAriResourceType }
export { IdentityAuthPolicyAriResourceType as IdentityAuthPolicyAriResourceType_alias_1 }

export declare const identityAuthPolicyAriStaticOpts: AriStaticProperties;

declare class IdentityCustomerDirectoryAri extends RegisteredAri {
    private constructor();
    private readonly _customerDirectoryId;
    get customerDirectoryId(): string;
    static create(opts: IdentityCustomerDirectoryAriOpts): IdentityCustomerDirectoryAri;
    static parse(maybeAri: string): IdentityCustomerDirectoryAri;
    getVariables(): {
        customerDirectoryId: string;
    };
}
export { IdentityCustomerDirectoryAri }
export { IdentityCustomerDirectoryAri as IdentityCustomerDirectoryAri_alias_1 }
export { IdentityCustomerDirectoryAri as IdentityCustomerDirectoryAri_alias_2 }

export declare interface IdentityCustomerDirectoryAriOpts {
    customerDirectoryId: string;
}

declare const IdentityCustomerDirectoryAriResourceOwner = "identity";
export { IdentityCustomerDirectoryAriResourceOwner }
export { IdentityCustomerDirectoryAriResourceOwner as IdentityCustomerDirectoryAriResourceOwner_alias_1 }

declare const IdentityCustomerDirectoryAriResourceType = "customer-directory";
export { IdentityCustomerDirectoryAriResourceType }
export { IdentityCustomerDirectoryAriResourceType as IdentityCustomerDirectoryAriResourceType_alias_1 }

export declare const identityCustomerDirectoryAriStaticOpts: AriStaticProperties;

declare class IdentityCustomerOrganizationAri extends RegisteredAri {
    private constructor();
    private readonly _customerOrganizationId;
    get customerOrganizationId(): string;
    static create(opts: IdentityCustomerOrganizationAriOpts): IdentityCustomerOrganizationAri;
    static parse(maybeAri: string): IdentityCustomerOrganizationAri;
    getVariables(): {
        customerOrganizationId: string;
    };
}
export { IdentityCustomerOrganizationAri }
export { IdentityCustomerOrganizationAri as IdentityCustomerOrganizationAri_alias_1 }
export { IdentityCustomerOrganizationAri as IdentityCustomerOrganizationAri_alias_2 }

export declare interface IdentityCustomerOrganizationAriOpts {
    customerOrganizationId: string;
}

declare const IdentityCustomerOrganizationAriResourceOwner = "identity";
export { IdentityCustomerOrganizationAriResourceOwner }
export { IdentityCustomerOrganizationAriResourceOwner as IdentityCustomerOrganizationAriResourceOwner_alias_1 }

declare const IdentityCustomerOrganizationAriResourceType = "customer-organization";
export { IdentityCustomerOrganizationAriResourceType }
export { IdentityCustomerOrganizationAriResourceType as IdentityCustomerOrganizationAriResourceType_alias_1 }

export declare const identityCustomerOrganizationAriStaticOpts: AriStaticProperties;

declare class IdentityDirectoryAri extends RegisteredAri {
    private constructor();
    private readonly _directoryId;
    get directoryId(): string;
    static create(opts: IdentityDirectoryAriOpts): IdentityDirectoryAri;
    static parse(maybeAri: string): IdentityDirectoryAri;
    getVariables(): {
        directoryId: string;
    };
}
export { IdentityDirectoryAri }
export { IdentityDirectoryAri as IdentityDirectoryAri_alias_1 }
export { IdentityDirectoryAri as IdentityDirectoryAri_alias_2 }

export declare interface IdentityDirectoryAriOpts {
    directoryId: string;
}

declare const IdentityDirectoryAriResourceOwner = "identity";
export { IdentityDirectoryAriResourceOwner }
export { IdentityDirectoryAriResourceOwner as IdentityDirectoryAriResourceOwner_alias_1 }

declare const IdentityDirectoryAriResourceType = "directory";
export { IdentityDirectoryAriResourceType }
export { IdentityDirectoryAriResourceType as IdentityDirectoryAriResourceType_alias_1 }

export declare const identityDirectoryAriStaticOpts: AriStaticProperties;

declare class IdentityDomainAri extends RegisteredAri {
    private constructor();
    private readonly _base64Domain;
    get base64Domain(): string;
    static create(opts: IdentityDomainAriOpts): IdentityDomainAri;
    static parse(maybeAri: string): IdentityDomainAri;
    getVariables(): {
        base64Domain: string;
    };
}
export { IdentityDomainAri }
export { IdentityDomainAri as IdentityDomainAri_alias_1 }
export { IdentityDomainAri as IdentityDomainAri_alias_2 }

export declare interface IdentityDomainAriOpts {
    base64Domain: string;
}

declare const IdentityDomainAriResourceOwner = "identity";
export { IdentityDomainAriResourceOwner }
export { IdentityDomainAriResourceOwner as IdentityDomainAriResourceOwner_alias_1 }

declare const IdentityDomainAriResourceType = "domain";
export { IdentityDomainAriResourceType }
export { IdentityDomainAriResourceType as IdentityDomainAriResourceType_alias_1 }

export declare const identityDomainAriStaticOpts: AriStaticProperties;

declare class IdentityGroupAri extends RegisteredAri {
    private constructor();
    private readonly _groupId;
    get groupId(): string;
    static create(opts: IdentityGroupAriOpts): IdentityGroupAri;
    static parse(maybeAri: string): IdentityGroupAri;
    getVariables(): {
        groupId: string;
    };
}
export { IdentityGroupAri }
export { IdentityGroupAri as IdentityGroupAri_alias_1 }
export { IdentityGroupAri as IdentityGroupAri_alias_2 }

export declare interface IdentityGroupAriOpts {
    groupId: string;
}

declare const IdentityGroupAriResourceOwner = "identity";
export { IdentityGroupAriResourceOwner }
export { IdentityGroupAriResourceOwner as IdentityGroupAriResourceOwner_alias_1 }

declare const IdentityGroupAriResourceType = "group";
export { IdentityGroupAriResourceType }
export { IdentityGroupAriResourceType as IdentityGroupAriResourceType_alias_1 }

export declare const identityGroupAriStaticOpts: AriStaticProperties;

declare class IdentityOauthClientAri extends RegisteredAri {
    private constructor();
    private readonly _clientId;
    get clientId(): string;
    static create(opts: IdentityOauthClientAriOpts): IdentityOauthClientAri;
    static parse(maybeAri: string): IdentityOauthClientAri;
    getVariables(): {
        clientId: string;
    };
}
export { IdentityOauthClientAri }
export { IdentityOauthClientAri as IdentityOauthClientAri_alias_1 }
export { IdentityOauthClientAri as IdentityOauthClientAri_alias_2 }

export declare interface IdentityOauthClientAriOpts {
    clientId: string;
}

declare const IdentityOauthClientAriResourceOwner = "identity";
export { IdentityOauthClientAriResourceOwner }
export { IdentityOauthClientAriResourceOwner as IdentityOauthClientAriResourceOwner_alias_1 }

declare const IdentityOauthClientAriResourceType = "oauthClient";
export { IdentityOauthClientAriResourceType }
export { IdentityOauthClientAriResourceType as IdentityOauthClientAriResourceType_alias_1 }

export declare const identityOauthClientAriStaticOpts: AriStaticProperties;

declare class IdentityRoleAri extends RegisteredAri {
    private constructor();
    private readonly _optionalSiteId;
    private readonly _roleId;
    get optionalSiteId(): string;
    get roleId(): string;
    static create(opts: IdentityRoleAriOpts): IdentityRoleAri;
    static parse(maybeAri: string): IdentityRoleAri;
    getVariables(): {
        optionalSiteId: string;
        roleId: string;
    };
}
export { IdentityRoleAri }
export { IdentityRoleAri as IdentityRoleAri_alias_1 }
export { IdentityRoleAri as IdentityRoleAri_alias_2 }

export declare interface IdentityRoleAriOpts {
    optionalSiteId?: string;
    roleId: string;
}

declare const IdentityRoleAriResourceOwner = "identity";
export { IdentityRoleAriResourceOwner }
export { IdentityRoleAriResourceOwner as IdentityRoleAriResourceOwner_alias_1 }

declare const IdentityRoleAriResourceType = "role";
export { IdentityRoleAriResourceType }
export { IdentityRoleAriResourceType as IdentityRoleAriResourceType_alias_1 }

export declare const identityRoleAriStaticOpts: AriStaticProperties;

declare class IdentitySiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: IdentitySiteAriOpts): IdentitySiteAri;
    static parse(maybeAri: string): IdentitySiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { IdentitySiteAri }
export { IdentitySiteAri as IdentitySiteAri_alias_1 }
export { IdentitySiteAri as IdentitySiteAri_alias_2 }

export declare interface IdentitySiteAriOpts {
    siteId: string;
}

declare const IdentitySiteAriResourceOwner = "identity";
export { IdentitySiteAriResourceOwner }
export { IdentitySiteAriResourceOwner as IdentitySiteAriResourceOwner_alias_1 }

declare const IdentitySiteAriResourceType = "site";
export { IdentitySiteAriResourceType }
export { IdentitySiteAriResourceType as IdentitySiteAriResourceType_alias_1 }

export declare const identitySiteAriStaticOpts: AriStaticProperties;

declare class IdentityTeamAri extends RegisteredAri {
    private constructor();
    private readonly _teamId;
    get teamId(): string;
    static create(opts: IdentityTeamAriOpts): IdentityTeamAri;
    static parse(maybeAri: string): IdentityTeamAri;
    getVariables(): {
        teamId: string;
    };
}
export { IdentityTeamAri }
export { IdentityTeamAri as IdentityTeamAri_alias_1 }
export { IdentityTeamAri as IdentityTeamAri_alias_2 }

export declare interface IdentityTeamAriOpts {
    teamId: string;
}

declare const IdentityTeamAriResourceOwner = "identity";
export { IdentityTeamAriResourceOwner }
export { IdentityTeamAriResourceOwner as IdentityTeamAriResourceOwner_alias_1 }

declare const IdentityTeamAriResourceType = "team";
export { IdentityTeamAriResourceType }
export { IdentityTeamAriResourceType as IdentityTeamAriResourceType_alias_1 }

export declare const identityTeamAriStaticOpts: AriStaticProperties;

declare class IdentityTeamMemberAri extends RegisteredAri {
    private constructor();
    private readonly _teamId;
    private readonly _userId;
    get teamId(): string;
    get userId(): string;
    static create(opts: IdentityTeamMemberAriOpts): IdentityTeamMemberAri;
    static parse(maybeAri: string): IdentityTeamMemberAri;
    getVariables(): {
        teamId: string;
        userId: string;
    };
}
export { IdentityTeamMemberAri }
export { IdentityTeamMemberAri as IdentityTeamMemberAri_alias_1 }
export { IdentityTeamMemberAri as IdentityTeamMemberAri_alias_2 }

export declare interface IdentityTeamMemberAriOpts {
    teamId: string;
    userId: string;
}

declare const IdentityTeamMemberAriResourceOwner = "identity";
export { IdentityTeamMemberAriResourceOwner }
export { IdentityTeamMemberAriResourceOwner as IdentityTeamMemberAriResourceOwner_alias_1 }

declare const IdentityTeamMemberAriResourceType = "team-member";
export { IdentityTeamMemberAriResourceType }
export { IdentityTeamMemberAriResourceType as IdentityTeamMemberAriResourceType_alias_1 }

export declare const identityTeamMemberAriStaticOpts: AriStaticProperties;

declare class IdentityThirdPartyGroupAri extends RegisteredAri {
    private constructor();
    private readonly _directoryId;
    private readonly _groupId;
    get directoryId(): string;
    get groupId(): string;
    static create(opts: IdentityThirdPartyGroupAriOpts): IdentityThirdPartyGroupAri;
    static parse(maybeAri: string): IdentityThirdPartyGroupAri;
    getVariables(): {
        directoryId: string;
        groupId: string;
    };
}
export { IdentityThirdPartyGroupAri }
export { IdentityThirdPartyGroupAri as IdentityThirdPartyGroupAri_alias_1 }
export { IdentityThirdPartyGroupAri as IdentityThirdPartyGroupAri_alias_2 }

export declare interface IdentityThirdPartyGroupAriOpts {
    directoryId: string;
    groupId: string;
}

declare const IdentityThirdPartyGroupAriResourceOwner = "identity";
export { IdentityThirdPartyGroupAriResourceOwner }
export { IdentityThirdPartyGroupAriResourceOwner as IdentityThirdPartyGroupAriResourceOwner_alias_1 }

declare const IdentityThirdPartyGroupAriResourceType = "third-party-group";
export { IdentityThirdPartyGroupAriResourceType }
export { IdentityThirdPartyGroupAriResourceType as IdentityThirdPartyGroupAriResourceType_alias_1 }

export declare const identityThirdPartyGroupAriStaticOpts: AriStaticProperties;

declare class IdentityThirdPartyUserAri extends RegisteredAri {
    private constructor();
    private readonly _directoryId;
    private readonly _userId;
    get directoryId(): string;
    get userId(): string;
    static create(opts: IdentityThirdPartyUserAriOpts): IdentityThirdPartyUserAri;
    static parse(maybeAri: string): IdentityThirdPartyUserAri;
    getVariables(): {
        directoryId: string;
        userId: string;
    };
}
export { IdentityThirdPartyUserAri }
export { IdentityThirdPartyUserAri as IdentityThirdPartyUserAri_alias_1 }
export { IdentityThirdPartyUserAri as IdentityThirdPartyUserAri_alias_2 }

export declare interface IdentityThirdPartyUserAriOpts {
    directoryId: string;
    userId: string;
}

declare const IdentityThirdPartyUserAriResourceOwner = "identity";
export { IdentityThirdPartyUserAriResourceOwner }
export { IdentityThirdPartyUserAriResourceOwner as IdentityThirdPartyUserAriResourceOwner_alias_1 }

declare const IdentityThirdPartyUserAriResourceType = "third-party-user";
export { IdentityThirdPartyUserAriResourceType }
export { IdentityThirdPartyUserAriResourceType as IdentityThirdPartyUserAriResourceType_alias_1 }

export declare const identityThirdPartyUserAriStaticOpts: AriStaticProperties;

declare class IdentityUserAri extends RegisteredAri {
    private constructor();
    private readonly _userId;
    get userId(): string;
    static create(opts: IdentityUserAriOpts): IdentityUserAri;
    static parse(maybeAri: string): IdentityUserAri;
    getVariables(): {
        userId: string;
    };
}
export { IdentityUserAri }
export { IdentityUserAri as IdentityUserAri_alias_1 }
export { IdentityUserAri as IdentityUserAri_alias_2 }

export declare interface IdentityUserAriOpts {
    userId: string;
}

declare const IdentityUserAriResourceOwner = "identity";
export { IdentityUserAriResourceOwner }
export { IdentityUserAriResourceOwner as IdentityUserAriResourceOwner_alias_1 }

declare const IdentityUserAriResourceType = "user";
export { IdentityUserAriResourceType }
export { IdentityUserAriResourceType as IdentityUserAriResourceType_alias_1 }

export declare const identityUserAriStaticOpts: AriStaticProperties;

declare class IdentityUserbaseAri extends RegisteredAri {
    private constructor();
    private readonly _userbaseId;
    get userbaseId(): string;
    static create(opts: IdentityUserbaseAriOpts): IdentityUserbaseAri;
    static parse(maybeAri: string): IdentityUserbaseAri;
    getVariables(): {
        userbaseId: string;
    };
}
export { IdentityUserbaseAri }
export { IdentityUserbaseAri as IdentityUserbaseAri_alias_1 }
export { IdentityUserbaseAri as IdentityUserbaseAri_alias_2 }

export declare interface IdentityUserbaseAriOpts {
    userbaseId: string;
}

declare const IdentityUserbaseAriResourceOwner = "identity";
export { IdentityUserbaseAriResourceOwner }
export { IdentityUserbaseAriResourceOwner as IdentityUserbaseAriResourceOwner_alias_1 }

declare const IdentityUserbaseAriResourceType = "userbase";
export { IdentityUserbaseAriResourceType }
export { IdentityUserbaseAriResourceType as IdentityUserbaseAriResourceType_alias_1 }

export declare const identityUserbaseAriStaticOpts: AriStaticProperties;

declare class IdentityUserGrantAri extends RegisteredAri {
    private constructor();
    private readonly _userId;
    private readonly _clientId;
    get userId(): string;
    get clientId(): string;
    static create(opts: IdentityUserGrantAriOpts): IdentityUserGrantAri;
    static parse(maybeAri: string): IdentityUserGrantAri;
    getVariables(): {
        userId: string;
        clientId: string;
    };
}
export { IdentityUserGrantAri }
export { IdentityUserGrantAri as IdentityUserGrantAri_alias_1 }
export { IdentityUserGrantAri as IdentityUserGrantAri_alias_2 }

export declare interface IdentityUserGrantAriOpts {
    userId: string;
    clientId: string;
}

declare const IdentityUserGrantAriResourceOwner = "identity";
export { IdentityUserGrantAriResourceOwner }
export { IdentityUserGrantAriResourceOwner as IdentityUserGrantAriResourceOwner_alias_1 }

declare const IdentityUserGrantAriResourceType = "userGrant";
export { IdentityUserGrantAriResourceType }
export { IdentityUserGrantAriResourceType as IdentityUserGrantAriResourceType_alias_1 }

export declare const identityUserGrantAriStaticOpts: AriStaticProperties;

export declare const IdType: "id";

export declare const ImportConfigurationType: "import-configuration";

export declare const IncidentAlertLinkType: "incident-alert-link";

export declare const IncidentHistoryType: "incident-history";

export declare const IncidentStatusUpdateType: "incident-status-update";

export declare const IncidentType: "incident";

export declare const IncomingCallHistoryType: "incoming-call-history";

export declare const IncomingWebhookType: "incoming-webhook";

export declare const InitiativeType: "initiative";

export declare const InstallationType: "installation";

declare const InstanceType_2: "instance";
export { InstanceType_2 as InstanceType }

export declare const IntegrationType: "integration";

export declare const IntentProjectionType: "intent-projection";

export declare const IntentQuestionProjectionType: "intent-question-projection";

export declare const IntentRuleProjectionType: "intent-rule-projection";

export declare const IntentTemplateType: "intent-template";

export declare const InvoiceGroupType: "invoice-group";

export declare const IssueAttachmentType: "issue-attachment";

export declare const IssueCommentType: "issue-comment";

export declare const IssueFieldMetadataType: "issue-field-metadata";

export declare const IssueFieldOptionType: "issue-field-option";

export declare const IssuefieldvalueType: "issuefieldvalue";

export declare const IssueHistoryType: "issue-history";

export declare const IssueLinkType: "issue-link";

export declare const IssueLinkTypeType: "issue-link-type";

export declare const IssueRemoteLinkType: "issue-remote-link";

export declare const IssueSearchViewType: "issue-search-view";

export declare const IssueStatusType: "issue-status";

export declare const IssueType: "issue";

export declare const IssueTypeSchemeMappingType: "issue-type-scheme-mapping";

export declare const IssueTypeSchemeType: "issue-type-scheme";

export declare const IssueTypeType: "issue-type";

export declare const IssueWorklogType: "issue-worklog";

declare class JiraAlignEpicAri extends RegisteredAri {
    private constructor();
    private readonly _instanceId;
    private readonly _epicId;
    get instanceId(): string;
    get epicId(): string;
    static create(opts: JiraAlignEpicAriOpts): JiraAlignEpicAri;
    static parse(maybeAri: string): JiraAlignEpicAri;
    getVariables(): {
        instanceId: string;
        epicId: string;
    };
}
export { JiraAlignEpicAri }
export { JiraAlignEpicAri as JiraAlignEpicAri_alias_1 }
export { JiraAlignEpicAri as JiraAlignEpicAri_alias_2 }

export declare interface JiraAlignEpicAriOpts {
    instanceId: string;
    epicId: string;
}

declare const JiraAlignEpicAriResourceOwner = "jira-align";
export { JiraAlignEpicAriResourceOwner }
export { JiraAlignEpicAriResourceOwner as JiraAlignEpicAriResourceOwner_alias_1 }

declare const JiraAlignEpicAriResourceType = "epic";
export { JiraAlignEpicAriResourceType }
export { JiraAlignEpicAriResourceType as JiraAlignEpicAriResourceType_alias_1 }

export declare const jiraAlignEpicAriStaticOpts: AriStaticProperties;

declare class JiraAlignInstanceAri extends RegisteredAri {
    private constructor();
    private readonly _instanceId;
    get instanceId(): string;
    static create(opts: JiraAlignInstanceAriOpts): JiraAlignInstanceAri;
    static parse(maybeAri: string): JiraAlignInstanceAri;
    getVariables(): {
        instanceId: string;
    };
}
export { JiraAlignInstanceAri }
export { JiraAlignInstanceAri as JiraAlignInstanceAri_alias_1 }
export { JiraAlignInstanceAri as JiraAlignInstanceAri_alias_2 }

export declare interface JiraAlignInstanceAriOpts {
    instanceId: string;
}

declare const JiraAlignInstanceAriResourceOwner = "jira-align";
export { JiraAlignInstanceAriResourceOwner }
export { JiraAlignInstanceAriResourceOwner as JiraAlignInstanceAriResourceOwner_alias_1 }

declare const JiraAlignInstanceAriResourceType = "instance";
export { JiraAlignInstanceAriResourceType }
export { JiraAlignInstanceAriResourceType as JiraAlignInstanceAriResourceType_alias_1 }

export declare const jiraAlignInstanceAriStaticOpts: AriStaticProperties;

declare class JiraAnnouncementBannerAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _announcementBannerHashId;
    get siteId(): string;
    get activationId(): string;
    get announcementBannerHashId(): string;
    static create(opts: JiraAnnouncementBannerAriOpts): JiraAnnouncementBannerAri;
    static parse(maybeAri: string): JiraAnnouncementBannerAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        announcementBannerHashId: string;
    };
}
export { JiraAnnouncementBannerAri }
export { JiraAnnouncementBannerAri as JiraAnnouncementBannerAri_alias_1 }
export { JiraAnnouncementBannerAri as JiraAnnouncementBannerAri_alias_2 }

export declare interface JiraAnnouncementBannerAriOpts {
    siteId: string;
    activationId: string;
    announcementBannerHashId: string;
}

declare const JiraAnnouncementBannerAriResourceOwner = "jira";
export { JiraAnnouncementBannerAriResourceOwner }
export { JiraAnnouncementBannerAriResourceOwner as JiraAnnouncementBannerAriResourceOwner_alias_1 }

declare const JiraAnnouncementBannerAriResourceType = "announcement-banner";
export { JiraAnnouncementBannerAriResourceType }
export { JiraAnnouncementBannerAriResourceType as JiraAnnouncementBannerAriResourceType_alias_1 }

export declare const jiraAnnouncementBannerAriStaticOpts: AriStaticProperties;

declare class JiraAvailableFieldsAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _projectId;
    private readonly _issueTypeId;
    get siteId(): string;
    get activationId(): string;
    get projectId(): string;
    get issueTypeId(): string;
    static create(opts: JiraAvailableFieldsAriOpts): JiraAvailableFieldsAri;
    static parse(maybeAri: string): JiraAvailableFieldsAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        projectId: string;
        issueTypeId: string;
    };
}
export { JiraAvailableFieldsAri }
export { JiraAvailableFieldsAri as JiraAvailableFieldsAri_alias_1 }
export { JiraAvailableFieldsAri as JiraAvailableFieldsAri_alias_2 }

export declare interface JiraAvailableFieldsAriOpts {
    siteId: string;
    activationId: string;
    projectId: string;
    issueTypeId: string;
}

declare const JiraAvailableFieldsAriResourceOwner = "jira";
export { JiraAvailableFieldsAriResourceOwner }
export { JiraAvailableFieldsAriResourceOwner as JiraAvailableFieldsAriResourceOwner_alias_1 }

declare const JiraAvailableFieldsAriResourceType = "available-fields";
export { JiraAvailableFieldsAriResourceType }
export { JiraAvailableFieldsAriResourceType as JiraAvailableFieldsAriResourceType_alias_1 }

export declare const jiraAvailableFieldsAriStaticOpts: AriStaticProperties;

declare class JiraBranchAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _branchId;
    get siteId(): string;
    get activationId(): string;
    get branchId(): string;
    static create(opts: JiraBranchAriOpts): JiraBranchAri;
    static parse(maybeAri: string): JiraBranchAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        branchId: string;
    };
}
export { JiraBranchAri }
export { JiraBranchAri as JiraBranchAri_alias_1 }
export { JiraBranchAri as JiraBranchAri_alias_2 }

export declare interface JiraBranchAriOpts {
    siteId: string;
    activationId: string;
    branchId: string;
}

declare const JiraBranchAriResourceOwner = "jira";
export { JiraBranchAriResourceOwner }
export { JiraBranchAriResourceOwner as JiraBranchAriResourceOwner_alias_1 }

declare const JiraBranchAriResourceType = "branch";
export { JiraBranchAriResourceType }
export { JiraBranchAriResourceType as JiraBranchAriResourceType_alias_1 }

export declare const jiraBranchAriStaticOpts: AriStaticProperties;

declare class JiraBranchHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _branchId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get branchId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraBranchHistoryAriOpts): JiraBranchHistoryAri;
    static parse(maybeAri: string): JiraBranchHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        branchId: string;
        updateSequenceNumber: string;
    };
}
export { JiraBranchHistoryAri }
export { JiraBranchHistoryAri as JiraBranchHistoryAri_alias_1 }
export { JiraBranchHistoryAri as JiraBranchHistoryAri_alias_2 }

export declare interface JiraBranchHistoryAriOpts {
    siteId: string;
    activationId: string;
    branchId: string;
    updateSequenceNumber: string;
}

declare const JiraBranchHistoryAriResourceOwner = "jira";
export { JiraBranchHistoryAriResourceOwner }
export { JiraBranchHistoryAriResourceOwner as JiraBranchHistoryAriResourceOwner_alias_1 }

declare const JiraBranchHistoryAriResourceType = "branch-history";
export { JiraBranchHistoryAriResourceType }
export { JiraBranchHistoryAriResourceType as JiraBranchHistoryAriResourceType_alias_1 }

export declare const jiraBranchHistoryAriStaticOpts: AriStaticProperties;

declare class JiraBuildAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _buildId;
    get siteId(): string;
    get activationId(): string;
    get buildId(): string;
    static create(opts: JiraBuildAriOpts): JiraBuildAri;
    static parse(maybeAri: string): JiraBuildAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        buildId: string;
    };
}
export { JiraBuildAri }
export { JiraBuildAri as JiraBuildAri_alias_1 }
export { JiraBuildAri as JiraBuildAri_alias_2 }

export declare interface JiraBuildAriOpts {
    siteId: string;
    activationId: string;
    buildId: string;
}

declare const JiraBuildAriResourceOwner = "jira";
export { JiraBuildAriResourceOwner }
export { JiraBuildAriResourceOwner as JiraBuildAriResourceOwner_alias_1 }

declare const JiraBuildAriResourceType = "build";
export { JiraBuildAriResourceType }
export { JiraBuildAriResourceType as JiraBuildAriResourceType_alias_1 }

export declare const jiraBuildAriStaticOpts: AriStaticProperties;

declare class JiraBuildHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _buildId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get buildId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraBuildHistoryAriOpts): JiraBuildHistoryAri;
    static parse(maybeAri: string): JiraBuildHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        buildId: string;
        updateSequenceNumber: string;
    };
}
export { JiraBuildHistoryAri }
export { JiraBuildHistoryAri as JiraBuildHistoryAri_alias_1 }
export { JiraBuildHistoryAri as JiraBuildHistoryAri_alias_2 }

export declare interface JiraBuildHistoryAriOpts {
    siteId: string;
    activationId: string;
    buildId: string;
    updateSequenceNumber: string;
}

declare const JiraBuildHistoryAriResourceOwner = "jira";
export { JiraBuildHistoryAriResourceOwner }
export { JiraBuildHistoryAriResourceOwner as JiraBuildHistoryAriResourceOwner_alias_1 }

declare const JiraBuildHistoryAriResourceType = "build-history";
export { JiraBuildHistoryAriResourceType }
export { JiraBuildHistoryAriResourceType as JiraBuildHistoryAriResourceType_alias_1 }

export declare const jiraBuildHistoryAriStaticOpts: AriStaticProperties;

declare class JiraBulkOperationTaskAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _taskId;
    get siteId(): string;
    get activationId(): string;
    get taskId(): string;
    static create(opts: JiraBulkOperationTaskAriOpts): JiraBulkOperationTaskAri;
    static parse(maybeAri: string): JiraBulkOperationTaskAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        taskId: string;
    };
}
export { JiraBulkOperationTaskAri }
export { JiraBulkOperationTaskAri as JiraBulkOperationTaskAri_alias_1 }
export { JiraBulkOperationTaskAri as JiraBulkOperationTaskAri_alias_2 }

export declare interface JiraBulkOperationTaskAriOpts {
    siteId: string;
    activationId: string;
    taskId: string;
}

declare const JiraBulkOperationTaskAriResourceOwner = "jira";
export { JiraBulkOperationTaskAriResourceOwner }
export { JiraBulkOperationTaskAriResourceOwner as JiraBulkOperationTaskAriResourceOwner_alias_1 }

declare const JiraBulkOperationTaskAriResourceType = "bulk-operation-task";
export { JiraBulkOperationTaskAriResourceType }
export { JiraBulkOperationTaskAriResourceType as JiraBulkOperationTaskAriResourceType_alias_1 }

export declare const jiraBulkOperationTaskAriStaticOpts: AriStaticProperties;

declare class JiraCommentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _commentId;
    get siteId(): string;
    get commentId(): string;
    static create(opts: JiraCommentAriOpts): JiraCommentAri;
    static parse(maybeAri: string): JiraCommentAri;
    getVariables(): {
        siteId: string;
        commentId: string;
    };
}
export { JiraCommentAri }
export { JiraCommentAri as JiraCommentAri_alias_1 }
export { JiraCommentAri as JiraCommentAri_alias_2 }

export declare interface JiraCommentAriOpts {
    siteId: string;
    commentId: string;
}

declare const JiraCommentAriResourceOwner = "jira";
export { JiraCommentAriResourceOwner }
export { JiraCommentAriResourceOwner as JiraCommentAriResourceOwner_alias_1 }

declare const JiraCommentAriResourceType = "comment";
export { JiraCommentAriResourceType }
export { JiraCommentAriResourceType as JiraCommentAriResourceType_alias_1 }

export declare const jiraCommentAriStaticOpts: AriStaticProperties;

declare class JiraCommitAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _commitId;
    get siteId(): string;
    get activationId(): string;
    get commitId(): string;
    static create(opts: JiraCommitAriOpts): JiraCommitAri;
    static parse(maybeAri: string): JiraCommitAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        commitId: string;
    };
}
export { JiraCommitAri }
export { JiraCommitAri as JiraCommitAri_alias_1 }
export { JiraCommitAri as JiraCommitAri_alias_2 }

export declare interface JiraCommitAriOpts {
    siteId: string;
    activationId: string;
    commitId: string;
}

declare const JiraCommitAriResourceOwner = "jira";
export { JiraCommitAriResourceOwner }
export { JiraCommitAriResourceOwner as JiraCommitAriResourceOwner_alias_1 }

declare const JiraCommitAriResourceType = "commit";
export { JiraCommitAriResourceType }
export { JiraCommitAriResourceType as JiraCommitAriResourceType_alias_1 }

export declare const jiraCommitAriStaticOpts: AriStaticProperties;

declare class JiraComponentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _componentId;
    get siteId(): string;
    get activationId(): string;
    get componentId(): string;
    static create(opts: JiraComponentAriOpts): JiraComponentAri;
    static parse(maybeAri: string): JiraComponentAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        componentId: string;
    };
}
export { JiraComponentAri }
export { JiraComponentAri as JiraComponentAri_alias_1 }
export { JiraComponentAri as JiraComponentAri_alias_2 }

export declare interface JiraComponentAriOpts {
    siteId: string;
    activationId: string;
    componentId: string;
}

declare const JiraComponentAriResourceOwner = "jira";
export { JiraComponentAriResourceOwner }
export { JiraComponentAriResourceOwner as JiraComponentAriResourceOwner_alias_1 }

declare const JiraComponentAriResourceType = "component";
export { JiraComponentAriResourceType }
export { JiraComponentAriResourceType as JiraComponentAriResourceType_alias_1 }

export declare const jiraComponentAriStaticOpts: AriStaticProperties;

declare class JiraConnectAppAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _appKey;
    get siteId(): string;
    get activationId(): string;
    get appKey(): string;
    static create(opts: JiraConnectAppAriOpts): JiraConnectAppAri;
    static parse(maybeAri: string): JiraConnectAppAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        appKey: string;
    };
}
export { JiraConnectAppAri }
export { JiraConnectAppAri as JiraConnectAppAri_alias_1 }
export { JiraConnectAppAri as JiraConnectAppAri_alias_2 }

export declare interface JiraConnectAppAriOpts {
    siteId: string;
    activationId: string;
    appKey: string;
}

declare const JiraConnectAppAriResourceOwner = "jira";
export { JiraConnectAppAriResourceOwner }
export { JiraConnectAppAriResourceOwner as JiraConnectAppAriResourceOwner_alias_1 }

declare const JiraConnectAppAriResourceType = "connect-app";
export { JiraConnectAppAriResourceType }
export { JiraConnectAppAriResourceType as JiraConnectAppAriResourceType_alias_1 }

export declare const jiraConnectAppAriStaticOpts: AriStaticProperties;

declare class JiraCoreRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleId;
    get roleId(): string;
    static create(opts: JiraCoreRoleAriOpts): JiraCoreRoleAri;
    static parse(maybeAri: string): JiraCoreRoleAri;
    getVariables(): {
        roleId: string;
    };
}
export { JiraCoreRoleAri }
export { JiraCoreRoleAri as JiraCoreRoleAri_alias_1 }
export { JiraCoreRoleAri as JiraCoreRoleAri_alias_2 }

export declare interface JiraCoreRoleAriOpts {
    roleId: string;
}

declare const JiraCoreRoleAriResourceOwner = "jira-core";
export { JiraCoreRoleAriResourceOwner }
export { JiraCoreRoleAriResourceOwner as JiraCoreRoleAriResourceOwner_alias_1 }

declare const JiraCoreRoleAriResourceType = "role";
export { JiraCoreRoleAriResourceType }
export { JiraCoreRoleAriResourceType as JiraCoreRoleAriResourceType_alias_1 }

export declare const jiraCoreRoleAriStaticOpts: AriStaticProperties;

declare class JiraCoreSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: JiraCoreSiteAriOpts): JiraCoreSiteAri;
    static parse(maybeAri: string): JiraCoreSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { JiraCoreSiteAri }
export { JiraCoreSiteAri as JiraCoreSiteAri_alias_1 }
export { JiraCoreSiteAri as JiraCoreSiteAri_alias_2 }

export declare interface JiraCoreSiteAriOpts {
    siteId: string;
}

declare const JiraCoreSiteAriResourceOwner = "jira-core";
export { JiraCoreSiteAriResourceOwner }
export { JiraCoreSiteAriResourceOwner as JiraCoreSiteAriResourceOwner_alias_1 }

declare const JiraCoreSiteAriResourceType = "site";
export { JiraCoreSiteAriResourceType }
export { JiraCoreSiteAriResourceType as JiraCoreSiteAriResourceType_alias_1 }

export declare const jiraCoreSiteAriStaticOpts: AriStaticProperties;

declare class JiraDashboardAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _dashboardId;
    get siteId(): string;
    get activationId(): string;
    get dashboardId(): string;
    static create(opts: JiraDashboardAriOpts): JiraDashboardAri;
    static parse(maybeAri: string): JiraDashboardAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        dashboardId: string;
    };
}
export { JiraDashboardAri }
export { JiraDashboardAri as JiraDashboardAri_alias_1 }
export { JiraDashboardAri as JiraDashboardAri_alias_2 }

export declare interface JiraDashboardAriOpts {
    siteId: string;
    activationId: string;
    dashboardId: string;
}

declare const JiraDashboardAriResourceOwner = "jira";
export { JiraDashboardAriResourceOwner }
export { JiraDashboardAriResourceOwner as JiraDashboardAriResourceOwner_alias_1 }

declare const JiraDashboardAriResourceType = "dashboard";
export { JiraDashboardAriResourceType }
export { JiraDashboardAriResourceType as JiraDashboardAriResourceType_alias_1 }

export declare const jiraDashboardAriStaticOpts: AriStaticProperties;

declare class JiraDeploymentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _deploymentId;
    get siteId(): string;
    get activationId(): string;
    get deploymentId(): string;
    static create(opts: JiraDeploymentAriOpts): JiraDeploymentAri;
    static parse(maybeAri: string): JiraDeploymentAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        deploymentId: string;
    };
}
export { JiraDeploymentAri }
export { JiraDeploymentAri as JiraDeploymentAri_alias_1 }
export { JiraDeploymentAri as JiraDeploymentAri_alias_2 }

export declare interface JiraDeploymentAriOpts {
    siteId: string;
    activationId: string;
    deploymentId: string;
}

declare const JiraDeploymentAriResourceOwner = "jira";
export { JiraDeploymentAriResourceOwner }
export { JiraDeploymentAriResourceOwner as JiraDeploymentAriResourceOwner_alias_1 }

declare const JiraDeploymentAriResourceType = "deployment";
export { JiraDeploymentAriResourceType }
export { JiraDeploymentAriResourceType as JiraDeploymentAriResourceType_alias_1 }

export declare const jiraDeploymentAriStaticOpts: AriStaticProperties;

declare class JiraDeploymentHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _deploymentId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get deploymentId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraDeploymentHistoryAriOpts): JiraDeploymentHistoryAri;
    static parse(maybeAri: string): JiraDeploymentHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        deploymentId: string;
        updateSequenceNumber: string;
    };
}
export { JiraDeploymentHistoryAri }
export { JiraDeploymentHistoryAri as JiraDeploymentHistoryAri_alias_1 }
export { JiraDeploymentHistoryAri as JiraDeploymentHistoryAri_alias_2 }

export declare interface JiraDeploymentHistoryAriOpts {
    siteId: string;
    activationId: string;
    deploymentId: string;
    updateSequenceNumber: string;
}

declare const JiraDeploymentHistoryAriResourceOwner = "jira";
export { JiraDeploymentHistoryAriResourceOwner }
export { JiraDeploymentHistoryAriResourceOwner as JiraDeploymentHistoryAriResourceOwner_alias_1 }

declare const JiraDeploymentHistoryAriResourceType = "deployment-history";
export { JiraDeploymentHistoryAriResourceType }
export { JiraDeploymentHistoryAriResourceType as JiraDeploymentHistoryAriResourceType_alias_1 }

export declare const jiraDeploymentHistoryAriStaticOpts: AriStaticProperties;

declare class JiraDesignAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _designId;
    get siteId(): string;
    get activationId(): string;
    get designId(): string;
    static create(opts: JiraDesignAriOpts): JiraDesignAri;
    static parse(maybeAri: string): JiraDesignAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        designId: string;
    };
}
export { JiraDesignAri }
export { JiraDesignAri as JiraDesignAri_alias_1 }
export { JiraDesignAri as JiraDesignAri_alias_2 }

export declare interface JiraDesignAriOpts {
    siteId: string;
    activationId: string;
    designId: string;
}

declare const JiraDesignAriResourceOwner = "jira";
export { JiraDesignAriResourceOwner }
export { JiraDesignAriResourceOwner as JiraDesignAriResourceOwner_alias_1 }

declare const JiraDesignAriResourceType = "design";
export { JiraDesignAriResourceType }
export { JiraDesignAriResourceType as JiraDesignAriResourceType_alias_1 }

export declare const jiraDesignAriStaticOpts: AriStaticProperties;

declare class JiraDesignHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _designId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get designId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraDesignHistoryAriOpts): JiraDesignHistoryAri;
    static parse(maybeAri: string): JiraDesignHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        designId: string;
        updateSequenceNumber: string;
    };
}
export { JiraDesignHistoryAri }
export { JiraDesignHistoryAri as JiraDesignHistoryAri_alias_1 }
export { JiraDesignHistoryAri as JiraDesignHistoryAri_alias_2 }

export declare interface JiraDesignHistoryAriOpts {
    siteId: string;
    activationId: string;
    designId: string;
    updateSequenceNumber: string;
}

declare const JiraDesignHistoryAriResourceOwner = "jira";
export { JiraDesignHistoryAriResourceOwner }
export { JiraDesignHistoryAriResourceOwner as JiraDesignHistoryAriResourceOwner_alias_1 }

declare const JiraDesignHistoryAriResourceType = "design-history";
export { JiraDesignHistoryAriResourceType }
export { JiraDesignHistoryAriResourceType as JiraDesignHistoryAriResourceType_alias_1 }

export declare const jiraDesignHistoryAriStaticOpts: AriStaticProperties;

declare class JiraDevopsComponentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _devopsComponentId;
    get siteId(): string;
    get activationId(): string;
    get devopsComponentId(): string;
    static create(opts: JiraDevopsComponentAriOpts): JiraDevopsComponentAri;
    static parse(maybeAri: string): JiraDevopsComponentAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        devopsComponentId: string;
    };
}
export { JiraDevopsComponentAri }
export { JiraDevopsComponentAri as JiraDevopsComponentAri_alias_1 }
export { JiraDevopsComponentAri as JiraDevopsComponentAri_alias_2 }

export declare interface JiraDevopsComponentAriOpts {
    siteId: string;
    activationId: string;
    devopsComponentId: string;
}

declare const JiraDevopsComponentAriResourceOwner = "jira";
export { JiraDevopsComponentAriResourceOwner }
export { JiraDevopsComponentAriResourceOwner as JiraDevopsComponentAriResourceOwner_alias_1 }

declare const JiraDevopsComponentAriResourceType = "devops-component";
export { JiraDevopsComponentAriResourceType }
export { JiraDevopsComponentAriResourceType as JiraDevopsComponentAriResourceType_alias_1 }

export declare const jiraDevopsComponentAriStaticOpts: AriStaticProperties;

declare class JiraDocumentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _documentId;
    get siteId(): string;
    get activationId(): string;
    get documentId(): string;
    static create(opts: JiraDocumentAriOpts): JiraDocumentAri;
    static parse(maybeAri: string): JiraDocumentAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        documentId: string;
    };
}
export { JiraDocumentAri }
export { JiraDocumentAri as JiraDocumentAri_alias_1 }
export { JiraDocumentAri as JiraDocumentAri_alias_2 }

export declare interface JiraDocumentAriOpts {
    siteId: string;
    activationId: string;
    documentId: string;
}

declare const JiraDocumentAriResourceOwner = "jira";
export { JiraDocumentAriResourceOwner }
export { JiraDocumentAriResourceOwner as JiraDocumentAriResourceOwner_alias_1 }

declare const JiraDocumentAriResourceType = "document";
export { JiraDocumentAriResourceType }
export { JiraDocumentAriResourceType as JiraDocumentAriResourceType_alias_1 }

export declare const jiraDocumentAriStaticOpts: AriStaticProperties;

declare class JiraDocumentHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _documentId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get documentId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraDocumentHistoryAriOpts): JiraDocumentHistoryAri;
    static parse(maybeAri: string): JiraDocumentHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        documentId: string;
        updateSequenceNumber: string;
    };
}
export { JiraDocumentHistoryAri }
export { JiraDocumentHistoryAri as JiraDocumentHistoryAri_alias_1 }
export { JiraDocumentHistoryAri as JiraDocumentHistoryAri_alias_2 }

export declare interface JiraDocumentHistoryAriOpts {
    siteId: string;
    activationId: string;
    documentId: string;
    updateSequenceNumber: string;
}

declare const JiraDocumentHistoryAriResourceOwner = "jira";
export { JiraDocumentHistoryAriResourceOwner }
export { JiraDocumentHistoryAriResourceOwner as JiraDocumentHistoryAriResourceOwner_alias_1 }

declare const JiraDocumentHistoryAriResourceType = "document-history";
export { JiraDocumentHistoryAriResourceType }
export { JiraDocumentHistoryAriResourceType as JiraDocumentHistoryAriResourceType_alias_1 }

export declare const jiraDocumentHistoryAriStaticOpts: AriStaticProperties;

declare class JiraEntitlementAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _entitlementId;
    get siteId(): string;
    get activationId(): string;
    get entitlementId(): string;
    static create(opts: JiraEntitlementAriOpts): JiraEntitlementAri;
    static parse(maybeAri: string): JiraEntitlementAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        entitlementId: string;
    };
}
export { JiraEntitlementAri }
export { JiraEntitlementAri as JiraEntitlementAri_alias_1 }
export { JiraEntitlementAri as JiraEntitlementAri_alias_2 }

export declare interface JiraEntitlementAriOpts {
    siteId: string;
    activationId: string;
    entitlementId: string;
}

declare const JiraEntitlementAriResourceOwner = "jira";
export { JiraEntitlementAriResourceOwner }
export { JiraEntitlementAriResourceOwner as JiraEntitlementAriResourceOwner_alias_1 }

declare const JiraEntitlementAriResourceType = "entitlement";
export { JiraEntitlementAriResourceType }
export { JiraEntitlementAriResourceType as JiraEntitlementAriResourceType_alias_1 }

export declare const jiraEntitlementAriStaticOpts: AriStaticProperties;

declare class JiraEntityPropertyAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _entityType;
    private readonly _entityId;
    private readonly _propertyKey;
    get siteId(): string;
    get activationId(): string;
    get entityType(): string;
    get entityId(): string;
    get propertyKey(): string;
    static create(opts: JiraEntityPropertyAriOpts): JiraEntityPropertyAri;
    static parse(maybeAri: string): JiraEntityPropertyAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        entityType: string;
        entityId: string;
        propertyKey: string;
    };
}
export { JiraEntityPropertyAri }
export { JiraEntityPropertyAri as JiraEntityPropertyAri_alias_1 }
export { JiraEntityPropertyAri as JiraEntityPropertyAri_alias_2 }

export declare interface JiraEntityPropertyAriOpts {
    siteId: string;
    activationId: string;
    entityType: string;
    entityId: string;
    propertyKey: string;
}

declare const JiraEntityPropertyAriResourceOwner = "jira";
export { JiraEntityPropertyAriResourceOwner }
export { JiraEntityPropertyAriResourceOwner as JiraEntityPropertyAriResourceOwner_alias_1 }

declare const JiraEntityPropertyAriResourceType = "entity-property";
export { JiraEntityPropertyAriResourceType }
export { JiraEntityPropertyAriResourceType as JiraEntityPropertyAriResourceType_alias_1 }

export declare const jiraEntityPropertyAriStaticOpts: AriStaticProperties;

declare class JiraFavouriteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _favouriteId;
    get siteId(): string;
    get activationId(): string;
    get favouriteId(): string;
    static create(opts: JiraFavouriteAriOpts): JiraFavouriteAri;
    static parse(maybeAri: string): JiraFavouriteAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        favouriteId: string;
    };
}
export { JiraFavouriteAri }
export { JiraFavouriteAri as JiraFavouriteAri_alias_1 }
export { JiraFavouriteAri as JiraFavouriteAri_alias_2 }

export declare interface JiraFavouriteAriOpts {
    siteId: string;
    activationId: string;
    favouriteId: string;
}

declare const JiraFavouriteAriResourceOwner = "jira";
export { JiraFavouriteAriResourceOwner }
export { JiraFavouriteAriResourceOwner as JiraFavouriteAriResourceOwner_alias_1 }

declare const JiraFavouriteAriResourceType = "favourite";
export { JiraFavouriteAriResourceType }
export { JiraFavouriteAriResourceType as JiraFavouriteAriResourceType_alias_1 }

export declare const jiraFavouriteAriStaticOpts: AriStaticProperties;

declare class JiraFeatureFlagAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _featureFlagId;
    get siteId(): string;
    get activationId(): string;
    get featureFlagId(): string;
    static create(opts: JiraFeatureFlagAriOpts): JiraFeatureFlagAri;
    static parse(maybeAri: string): JiraFeatureFlagAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        featureFlagId: string;
    };
}
export { JiraFeatureFlagAri }
export { JiraFeatureFlagAri as JiraFeatureFlagAri_alias_1 }
export { JiraFeatureFlagAri as JiraFeatureFlagAri_alias_2 }

export declare interface JiraFeatureFlagAriOpts {
    siteId: string;
    activationId: string;
    featureFlagId: string;
}

declare const JiraFeatureFlagAriResourceOwner = "jira";
export { JiraFeatureFlagAriResourceOwner }
export { JiraFeatureFlagAriResourceOwner as JiraFeatureFlagAriResourceOwner_alias_1 }

declare const JiraFeatureFlagAriResourceType = "feature-flag";
export { JiraFeatureFlagAriResourceType }
export { JiraFeatureFlagAriResourceType as JiraFeatureFlagAriResourceType_alias_1 }

export declare const jiraFeatureFlagAriStaticOpts: AriStaticProperties;

declare class JiraFeatureFlagHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _featureFlagId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get featureFlagId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraFeatureFlagHistoryAriOpts): JiraFeatureFlagHistoryAri;
    static parse(maybeAri: string): JiraFeatureFlagHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        featureFlagId: string;
        updateSequenceNumber: string;
    };
}
export { JiraFeatureFlagHistoryAri }
export { JiraFeatureFlagHistoryAri as JiraFeatureFlagHistoryAri_alias_1 }
export { JiraFeatureFlagHistoryAri as JiraFeatureFlagHistoryAri_alias_2 }

export declare interface JiraFeatureFlagHistoryAriOpts {
    siteId: string;
    activationId: string;
    featureFlagId: string;
    updateSequenceNumber: string;
}

declare const JiraFeatureFlagHistoryAriResourceOwner = "jira";
export { JiraFeatureFlagHistoryAriResourceOwner }
export { JiraFeatureFlagHistoryAriResourceOwner as JiraFeatureFlagHistoryAriResourceOwner_alias_1 }

declare const JiraFeatureFlagHistoryAriResourceType = "feature-flag-history";
export { JiraFeatureFlagHistoryAriResourceType }
export { JiraFeatureFlagHistoryAriResourceType as JiraFeatureFlagHistoryAriResourceType_alias_1 }

export declare const jiraFeatureFlagHistoryAriStaticOpts: AriStaticProperties;

declare class JiraFilterAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _filterId;
    get siteId(): string;
    get activationId(): string;
    get filterId(): string;
    static create(opts: JiraFilterAriOpts): JiraFilterAri;
    static parse(maybeAri: string): JiraFilterAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        filterId: string;
    };
}
export { JiraFilterAri }
export { JiraFilterAri as JiraFilterAri_alias_1 }
export { JiraFilterAri as JiraFilterAri_alias_2 }

export declare interface JiraFilterAriOpts {
    siteId: string;
    activationId: string;
    filterId: string;
}

declare const JiraFilterAriResourceOwner = "jira";
export { JiraFilterAriResourceOwner }
export { JiraFilterAriResourceOwner as JiraFilterAriResourceOwner_alias_1 }

declare const JiraFilterAriResourceType = "filter";
export { JiraFilterAriResourceType }
export { JiraFilterAriResourceType as JiraFilterAriResourceType_alias_1 }

export declare const jiraFilterAriStaticOpts: AriStaticProperties;

declare class JiraFilterEmailSubscriptionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _filterEmailSubscriptionId;
    get siteId(): string;
    get activationId(): string;
    get filterEmailSubscriptionId(): string;
    static create(opts: JiraFilterEmailSubscriptionAriOpts): JiraFilterEmailSubscriptionAri;
    static parse(maybeAri: string): JiraFilterEmailSubscriptionAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        filterEmailSubscriptionId: string;
    };
}
export { JiraFilterEmailSubscriptionAri }
export { JiraFilterEmailSubscriptionAri as JiraFilterEmailSubscriptionAri_alias_1 }
export { JiraFilterEmailSubscriptionAri as JiraFilterEmailSubscriptionAri_alias_2 }

export declare interface JiraFilterEmailSubscriptionAriOpts {
    siteId: string;
    activationId: string;
    filterEmailSubscriptionId: string;
}

declare const JiraFilterEmailSubscriptionAriResourceOwner = "jira";
export { JiraFilterEmailSubscriptionAriResourceOwner }
export { JiraFilterEmailSubscriptionAriResourceOwner as JiraFilterEmailSubscriptionAriResourceOwner_alias_1 }

declare const JiraFilterEmailSubscriptionAriResourceType = "filter-email-subscription";
export { JiraFilterEmailSubscriptionAriResourceType }
export { JiraFilterEmailSubscriptionAriResourceType as JiraFilterEmailSubscriptionAriResourceType_alias_1 }

export declare const jiraFilterEmailSubscriptionAriStaticOpts: AriStaticProperties;

declare class JiraIncidentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _incidentId;
    get siteId(): string;
    get activationId(): string;
    get incidentId(): string;
    static create(opts: JiraIncidentAriOpts): JiraIncidentAri;
    static parse(maybeAri: string): JiraIncidentAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        incidentId: string;
    };
}
export { JiraIncidentAri }
export { JiraIncidentAri as JiraIncidentAri_alias_1 }
export { JiraIncidentAri as JiraIncidentAri_alias_2 }

export declare interface JiraIncidentAriOpts {
    siteId: string;
    activationId: string;
    incidentId: string;
}

declare const JiraIncidentAriResourceOwner = "jira";
export { JiraIncidentAriResourceOwner }
export { JiraIncidentAriResourceOwner as JiraIncidentAriResourceOwner_alias_1 }

declare const JiraIncidentAriResourceType = "incident";
export { JiraIncidentAriResourceType }
export { JiraIncidentAriResourceType as JiraIncidentAriResourceType_alias_1 }

export declare const jiraIncidentAriStaticOpts: AriStaticProperties;

declare class JiraIncidentHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _incidentId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get incidentId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraIncidentHistoryAriOpts): JiraIncidentHistoryAri;
    static parse(maybeAri: string): JiraIncidentHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        incidentId: string;
        updateSequenceNumber: string;
    };
}
export { JiraIncidentHistoryAri }
export { JiraIncidentHistoryAri as JiraIncidentHistoryAri_alias_1 }
export { JiraIncidentHistoryAri as JiraIncidentHistoryAri_alias_2 }

export declare interface JiraIncidentHistoryAriOpts {
    siteId: string;
    activationId: string;
    incidentId: string;
    updateSequenceNumber: string;
}

declare const JiraIncidentHistoryAriResourceOwner = "jira";
export { JiraIncidentHistoryAriResourceOwner }
export { JiraIncidentHistoryAriResourceOwner as JiraIncidentHistoryAriResourceOwner_alias_1 }

declare const JiraIncidentHistoryAriResourceType = "incident-history";
export { JiraIncidentHistoryAriResourceType }
export { JiraIncidentHistoryAriResourceType as JiraIncidentHistoryAriResourceType_alias_1 }

export declare const jiraIncidentHistoryAriStaticOpts: AriStaticProperties;

declare class JiraIssueAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _issueId;
    get siteId(): string;
    get issueId(): string;
    static create(opts: JiraIssueAriOpts): JiraIssueAri;
    static parse(maybeAri: string): JiraIssueAri;
    getVariables(): {
        siteId: string;
        issueId: string;
    };
}
export { JiraIssueAri }
export { JiraIssueAri as JiraIssueAri_alias_1 }
export { JiraIssueAri as JiraIssueAri_alias_2 }

export declare interface JiraIssueAriOpts {
    siteId: string;
    issueId: string;
}

declare const JiraIssueAriResourceOwner = "jira";
export { JiraIssueAriResourceOwner }
export { JiraIssueAriResourceOwner as JiraIssueAriResourceOwner_alias_1 }

declare const JiraIssueAriResourceType = "issue";
export { JiraIssueAriResourceType }
export { JiraIssueAriResourceType as JiraIssueAriResourceType_alias_1 }

export declare const jiraIssueAriStaticOpts: AriStaticProperties;

declare class JiraIssueAttachmentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _issueId;
    private readonly _attachmentId;
    get siteId(): string;
    get issueId(): string;
    get attachmentId(): string;
    static create(opts: JiraIssueAttachmentAriOpts): JiraIssueAttachmentAri;
    static parse(maybeAri: string): JiraIssueAttachmentAri;
    getVariables(): {
        siteId: string;
        issueId: string;
        attachmentId: string;
    };
}
export { JiraIssueAttachmentAri }
export { JiraIssueAttachmentAri as JiraIssueAttachmentAri_alias_1 }
export { JiraIssueAttachmentAri as JiraIssueAttachmentAri_alias_2 }

export declare interface JiraIssueAttachmentAriOpts {
    siteId: string;
    issueId: string;
    attachmentId: string;
}

declare const JiraIssueAttachmentAriResourceOwner = "jira";
export { JiraIssueAttachmentAriResourceOwner }
export { JiraIssueAttachmentAriResourceOwner as JiraIssueAttachmentAriResourceOwner_alias_1 }

declare const JiraIssueAttachmentAriResourceType = "issue-attachment";
export { JiraIssueAttachmentAriResourceType }
export { JiraIssueAttachmentAriResourceType as JiraIssueAttachmentAriResourceType_alias_1 }

export declare const jiraIssueAttachmentAriStaticOpts: AriStaticProperties;

declare class JiraIssueCommentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _issueId;
    private readonly _commentId;
    get siteId(): string;
    get issueId(): string;
    get commentId(): string;
    static create(opts: JiraIssueCommentAriOpts): JiraIssueCommentAri;
    static parse(maybeAri: string): JiraIssueCommentAri;
    getVariables(): {
        siteId: string;
        issueId: string;
        commentId: string;
    };
}
export { JiraIssueCommentAri }
export { JiraIssueCommentAri as JiraIssueCommentAri_alias_1 }
export { JiraIssueCommentAri as JiraIssueCommentAri_alias_2 }

export declare interface JiraIssueCommentAriOpts {
    siteId: string;
    issueId: string;
    commentId: string;
}

declare const JiraIssueCommentAriResourceOwner = "jira";
export { JiraIssueCommentAriResourceOwner }
export { JiraIssueCommentAriResourceOwner as JiraIssueCommentAriResourceOwner_alias_1 }

declare const JiraIssueCommentAriResourceType = "issue-comment";
export { JiraIssueCommentAriResourceType }
export { JiraIssueCommentAriResourceType as JiraIssueCommentAriResourceType_alias_1 }

export declare const jiraIssueCommentAriStaticOpts: AriStaticProperties;

declare class JiraIssueFieldMetadataAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _fieldId;
    get siteId(): string;
    get activationId(): string;
    get fieldId(): string;
    static create(opts: JiraIssueFieldMetadataAriOpts): JiraIssueFieldMetadataAri;
    static parse(maybeAri: string): JiraIssueFieldMetadataAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        fieldId: string;
    };
}
export { JiraIssueFieldMetadataAri }
export { JiraIssueFieldMetadataAri as JiraIssueFieldMetadataAri_alias_1 }
export { JiraIssueFieldMetadataAri as JiraIssueFieldMetadataAri_alias_2 }

export declare interface JiraIssueFieldMetadataAriOpts {
    siteId: string;
    activationId: string;
    fieldId: string;
}

declare const JiraIssueFieldMetadataAriResourceOwner = "jira";
export { JiraIssueFieldMetadataAriResourceOwner }
export { JiraIssueFieldMetadataAriResourceOwner as JiraIssueFieldMetadataAriResourceOwner_alias_1 }

declare const JiraIssueFieldMetadataAriResourceType = "issue-field-metadata";
export { JiraIssueFieldMetadataAriResourceType }
export { JiraIssueFieldMetadataAriResourceType as JiraIssueFieldMetadataAriResourceType_alias_1 }

export declare const jiraIssueFieldMetadataAriStaticOpts: AriStaticProperties;

declare class JiraIssueFieldOptionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _fieldId;
    private readonly _optionId;
    get siteId(): string;
    get activationId(): string;
    get fieldId(): string;
    get optionId(): string;
    static create(opts: JiraIssueFieldOptionAriOpts): JiraIssueFieldOptionAri;
    static parse(maybeAri: string): JiraIssueFieldOptionAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        fieldId: string;
        optionId: string;
    };
}
export { JiraIssueFieldOptionAri }
export { JiraIssueFieldOptionAri as JiraIssueFieldOptionAri_alias_1 }
export { JiraIssueFieldOptionAri as JiraIssueFieldOptionAri_alias_2 }

export declare interface JiraIssueFieldOptionAriOpts {
    siteId: string;
    activationId: string;
    fieldId: string;
    optionId: string;
}

declare const JiraIssueFieldOptionAriResourceOwner = "jira";
export { JiraIssueFieldOptionAriResourceOwner }
export { JiraIssueFieldOptionAriResourceOwner as JiraIssueFieldOptionAriResourceOwner_alias_1 }

declare const JiraIssueFieldOptionAriResourceType = "issue-field-option";
export { JiraIssueFieldOptionAriResourceType }
export { JiraIssueFieldOptionAriResourceType as JiraIssueFieldOptionAriResourceType_alias_1 }

export declare const jiraIssueFieldOptionAriStaticOpts: AriStaticProperties;

declare class JiraIssuefieldvalueAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _issueId;
    private readonly _fieldId;
    get siteId(): string;
    get issueId(): string;
    get fieldId(): string;
    static create(opts: JiraIssuefieldvalueAriOpts): JiraIssuefieldvalueAri;
    static parse(maybeAri: string): JiraIssuefieldvalueAri;
    getVariables(): {
        siteId: string;
        issueId: string;
        fieldId: string;
    };
}
export { JiraIssuefieldvalueAri }
export { JiraIssuefieldvalueAri as JiraIssuefieldvalueAri_alias_1 }
export { JiraIssuefieldvalueAri as JiraIssuefieldvalueAri_alias_2 }

export declare interface JiraIssuefieldvalueAriOpts {
    siteId: string;
    issueId: string;
    fieldId: string;
}

declare const JiraIssuefieldvalueAriResourceOwner = "jira";
export { JiraIssuefieldvalueAriResourceOwner }
export { JiraIssuefieldvalueAriResourceOwner as JiraIssuefieldvalueAriResourceOwner_alias_1 }

declare const JiraIssuefieldvalueAriResourceType = "issuefieldvalue";
export { JiraIssuefieldvalueAriResourceType }
export { JiraIssuefieldvalueAriResourceType as JiraIssuefieldvalueAriResourceType_alias_1 }

export declare const jiraIssuefieldvalueAriStaticOpts: AriStaticProperties;

declare class JiraIssueHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _issueId;
    private readonly _changeGroupId;
    get siteId(): string;
    get activationId(): string;
    get issueId(): string;
    get changeGroupId(): string;
    static create(opts: JiraIssueHistoryAriOpts): JiraIssueHistoryAri;
    static parse(maybeAri: string): JiraIssueHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        issueId: string;
        changeGroupId: string;
    };
}
export { JiraIssueHistoryAri }
export { JiraIssueHistoryAri as JiraIssueHistoryAri_alias_1 }
export { JiraIssueHistoryAri as JiraIssueHistoryAri_alias_2 }

export declare interface JiraIssueHistoryAriOpts {
    siteId: string;
    activationId: string;
    issueId: string;
    changeGroupId: string;
}

declare const JiraIssueHistoryAriResourceOwner = "jira";
export { JiraIssueHistoryAriResourceOwner }
export { JiraIssueHistoryAriResourceOwner as JiraIssueHistoryAriResourceOwner_alias_1 }

declare const JiraIssueHistoryAriResourceType = "issue-history";
export { JiraIssueHistoryAriResourceType }
export { JiraIssueHistoryAriResourceType as JiraIssueHistoryAriResourceType_alias_1 }

export declare const jiraIssueHistoryAriStaticOpts: AriStaticProperties;

declare class JiraIssueLinkAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _issueId;
    private readonly _linkId;
    get siteId(): string;
    get activationId(): string;
    get issueId(): string;
    get linkId(): string;
    static create(opts: JiraIssueLinkAriOpts): JiraIssueLinkAri;
    static parse(maybeAri: string): JiraIssueLinkAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        issueId: string;
        linkId: string;
    };
}
export { JiraIssueLinkAri }
export { JiraIssueLinkAri as JiraIssueLinkAri_alias_1 }
export { JiraIssueLinkAri as JiraIssueLinkAri_alias_2 }

export declare interface JiraIssueLinkAriOpts {
    siteId: string;
    activationId: string;
    issueId: string;
    linkId: string;
}

declare const JiraIssueLinkAriResourceOwner = "jira";
export { JiraIssueLinkAriResourceOwner }
export { JiraIssueLinkAriResourceOwner as JiraIssueLinkAriResourceOwner_alias_1 }

declare const JiraIssueLinkAriResourceType = "issue-link";
export { JiraIssueLinkAriResourceType }
export { JiraIssueLinkAriResourceType as JiraIssueLinkAriResourceType_alias_1 }

export declare const jiraIssueLinkAriStaticOpts: AriStaticProperties;

declare class JiraIssueLinkTypeAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _issueLinkTypeId;
    get siteId(): string;
    get activationId(): string;
    get issueLinkTypeId(): string;
    static create(opts: JiraIssueLinkTypeAriOpts): JiraIssueLinkTypeAri;
    static parse(maybeAri: string): JiraIssueLinkTypeAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        issueLinkTypeId: string;
    };
}
export { JiraIssueLinkTypeAri }
export { JiraIssueLinkTypeAri as JiraIssueLinkTypeAri_alias_1 }
export { JiraIssueLinkTypeAri as JiraIssueLinkTypeAri_alias_2 }

export declare interface JiraIssueLinkTypeAriOpts {
    siteId: string;
    activationId: string;
    issueLinkTypeId: string;
}

declare const JiraIssueLinkTypeAriResourceOwner = "jira";
export { JiraIssueLinkTypeAriResourceOwner }
export { JiraIssueLinkTypeAriResourceOwner as JiraIssueLinkTypeAriResourceOwner_alias_1 }

declare const JiraIssueLinkTypeAriResourceType = "issue-link-type";
export { JiraIssueLinkTypeAriResourceType }
export { JiraIssueLinkTypeAriResourceType as JiraIssueLinkTypeAriResourceType_alias_1 }

export declare const jiraIssueLinkTypeAriStaticOpts: AriStaticProperties;

declare class JiraIssueRemoteLinkAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _issueId;
    private readonly _linkId;
    get siteId(): string;
    get activationId(): string;
    get issueId(): string;
    get linkId(): string;
    static create(opts: JiraIssueRemoteLinkAriOpts): JiraIssueRemoteLinkAri;
    static parse(maybeAri: string): JiraIssueRemoteLinkAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        issueId: string;
        linkId: string;
    };
}
export { JiraIssueRemoteLinkAri }
export { JiraIssueRemoteLinkAri as JiraIssueRemoteLinkAri_alias_1 }
export { JiraIssueRemoteLinkAri as JiraIssueRemoteLinkAri_alias_2 }

export declare interface JiraIssueRemoteLinkAriOpts {
    siteId: string;
    activationId: string;
    issueId: string;
    linkId: string;
}

declare const JiraIssueRemoteLinkAriResourceOwner = "jira";
export { JiraIssueRemoteLinkAriResourceOwner }
export { JiraIssueRemoteLinkAriResourceOwner as JiraIssueRemoteLinkAriResourceOwner_alias_1 }

declare const JiraIssueRemoteLinkAriResourceType = "issue-remote-link";
export { JiraIssueRemoteLinkAriResourceType }
export { JiraIssueRemoteLinkAriResourceType as JiraIssueRemoteLinkAriResourceType_alias_1 }

export declare const jiraIssueRemoteLinkAriStaticOpts: AriStaticProperties;

declare class JiraIssueSearchViewAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _namespaceId;
    private readonly _viewId;
    get siteId(): string;
    get activationId(): string;
    get namespaceId(): string;
    get viewId(): string;
    static create(opts: JiraIssueSearchViewAriOpts): JiraIssueSearchViewAri;
    static parse(maybeAri: string): JiraIssueSearchViewAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        namespaceId: string;
        viewId: string;
    };
}
export { JiraIssueSearchViewAri }
export { JiraIssueSearchViewAri as JiraIssueSearchViewAri_alias_1 }
export { JiraIssueSearchViewAri as JiraIssueSearchViewAri_alias_2 }

export declare interface JiraIssueSearchViewAriOpts {
    siteId: string;
    activationId: string;
    namespaceId: string;
    viewId: string;
}

declare const JiraIssueSearchViewAriResourceOwner = "jira";
export { JiraIssueSearchViewAriResourceOwner }
export { JiraIssueSearchViewAriResourceOwner as JiraIssueSearchViewAriResourceOwner_alias_1 }

declare const JiraIssueSearchViewAriResourceType = "issue-search-view";
export { JiraIssueSearchViewAriResourceType }
export { JiraIssueSearchViewAriResourceType as JiraIssueSearchViewAriResourceType_alias_1 }

export declare const jiraIssueSearchViewAriStaticOpts: AriStaticProperties;

declare class JiraIssueStatusAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _issuestatusId;
    get siteId(): string;
    get activationId(): string;
    get issuestatusId(): string;
    static create(opts: JiraIssueStatusAriOpts): JiraIssueStatusAri;
    static parse(maybeAri: string): JiraIssueStatusAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        issuestatusId: string;
    };
}
export { JiraIssueStatusAri }
export { JiraIssueStatusAri as JiraIssueStatusAri_alias_1 }
export { JiraIssueStatusAri as JiraIssueStatusAri_alias_2 }

export declare interface JiraIssueStatusAriOpts {
    siteId: string;
    activationId: string;
    issuestatusId: string;
}

declare const JiraIssueStatusAriResourceOwner = "jira";
export { JiraIssueStatusAriResourceOwner }
export { JiraIssueStatusAriResourceOwner as JiraIssueStatusAriResourceOwner_alias_1 }

declare const JiraIssueStatusAriResourceType = "issue-status";
export { JiraIssueStatusAriResourceType }
export { JiraIssueStatusAriResourceType as JiraIssueStatusAriResourceType_alias_1 }

export declare const jiraIssueStatusAriStaticOpts: AriStaticProperties;

declare class JiraIssueTypeAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _issueTypeId;
    get siteId(): string;
    get issueTypeId(): string;
    static create(opts: JiraIssueTypeAriOpts): JiraIssueTypeAri;
    static parse(maybeAri: string): JiraIssueTypeAri;
    getVariables(): {
        siteId: string;
        issueTypeId: string;
    };
}
export { JiraIssueTypeAri }
export { JiraIssueTypeAri as JiraIssueTypeAri_alias_1 }
export { JiraIssueTypeAri as JiraIssueTypeAri_alias_2 }

export declare interface JiraIssueTypeAriOpts {
    siteId: string;
    issueTypeId: string;
}

declare const JiraIssueTypeAriResourceOwner = "jira";
export { JiraIssueTypeAriResourceOwner }
export { JiraIssueTypeAriResourceOwner as JiraIssueTypeAriResourceOwner_alias_1 }

declare const JiraIssueTypeAriResourceType = "issue-type";
export { JiraIssueTypeAriResourceType }
export { JiraIssueTypeAriResourceType as JiraIssueTypeAriResourceType_alias_1 }

export declare const jiraIssueTypeAriStaticOpts: AriStaticProperties;

declare class JiraIssueTypeSchemeAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _issueTypeSchemeId;
    get siteId(): string;
    get activationId(): string;
    get issueTypeSchemeId(): string;
    static create(opts: JiraIssueTypeSchemeAriOpts): JiraIssueTypeSchemeAri;
    static parse(maybeAri: string): JiraIssueTypeSchemeAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        issueTypeSchemeId: string;
    };
}
export { JiraIssueTypeSchemeAri }
export { JiraIssueTypeSchemeAri as JiraIssueTypeSchemeAri_alias_1 }
export { JiraIssueTypeSchemeAri as JiraIssueTypeSchemeAri_alias_2 }

export declare interface JiraIssueTypeSchemeAriOpts {
    siteId: string;
    activationId: string;
    issueTypeSchemeId: string;
}

declare const JiraIssueTypeSchemeAriResourceOwner = "jira";
export { JiraIssueTypeSchemeAriResourceOwner }
export { JiraIssueTypeSchemeAriResourceOwner as JiraIssueTypeSchemeAriResourceOwner_alias_1 }

declare const JiraIssueTypeSchemeAriResourceType = "issue-type-scheme";
export { JiraIssueTypeSchemeAriResourceType }
export { JiraIssueTypeSchemeAriResourceType as JiraIssueTypeSchemeAriResourceType_alias_1 }

export declare const jiraIssueTypeSchemeAriStaticOpts: AriStaticProperties;

declare class JiraIssueTypeSchemeMappingAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _issueTypeSchemeId;
    private readonly _issueTypeId;
    get siteId(): string;
    get activationId(): string;
    get issueTypeSchemeId(): string;
    get issueTypeId(): string;
    static create(opts: JiraIssueTypeSchemeMappingAriOpts): JiraIssueTypeSchemeMappingAri;
    static parse(maybeAri: string): JiraIssueTypeSchemeMappingAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        issueTypeSchemeId: string;
        issueTypeId: string;
    };
}
export { JiraIssueTypeSchemeMappingAri }
export { JiraIssueTypeSchemeMappingAri as JiraIssueTypeSchemeMappingAri_alias_1 }
export { JiraIssueTypeSchemeMappingAri as JiraIssueTypeSchemeMappingAri_alias_2 }

export declare interface JiraIssueTypeSchemeMappingAriOpts {
    siteId: string;
    activationId: string;
    issueTypeSchemeId: string;
    issueTypeId: string;
}

declare const JiraIssueTypeSchemeMappingAriResourceOwner = "jira";
export { JiraIssueTypeSchemeMappingAriResourceOwner }
export { JiraIssueTypeSchemeMappingAriResourceOwner as JiraIssueTypeSchemeMappingAriResourceOwner_alias_1 }

declare const JiraIssueTypeSchemeMappingAriResourceType = "issue-type-scheme-mapping";
export { JiraIssueTypeSchemeMappingAriResourceType }
export { JiraIssueTypeSchemeMappingAriResourceType as JiraIssueTypeSchemeMappingAriResourceType_alias_1 }

export declare const jiraIssueTypeSchemeMappingAriStaticOpts: AriStaticProperties;

declare class JiraIssueWorklogAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _issueId;
    private readonly _worklogId;
    get siteId(): string;
    get issueId(): string;
    get worklogId(): string;
    static create(opts: JiraIssueWorklogAriOpts): JiraIssueWorklogAri;
    static parse(maybeAri: string): JiraIssueWorklogAri;
    getVariables(): {
        siteId: string;
        issueId: string;
        worklogId: string;
    };
}
export { JiraIssueWorklogAri }
export { JiraIssueWorklogAri as JiraIssueWorklogAri_alias_1 }
export { JiraIssueWorklogAri as JiraIssueWorklogAri_alias_2 }

export declare interface JiraIssueWorklogAriOpts {
    siteId: string;
    issueId: string;
    worklogId: string;
}

declare const JiraIssueWorklogAriResourceOwner = "jira";
export { JiraIssueWorklogAriResourceOwner }
export { JiraIssueWorklogAriResourceOwner as JiraIssueWorklogAriResourceOwner_alias_1 }

declare const JiraIssueWorklogAriResourceType = "issue-worklog";
export { JiraIssueWorklogAriResourceType }
export { JiraIssueWorklogAriResourceType as JiraIssueWorklogAriResourceType_alias_1 }

export declare const jiraIssueWorklogAriStaticOpts: AriStaticProperties;

declare class JiraNavigationConfigAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _userId;
    private readonly _navKey;
    get siteId(): string;
    get activationId(): string;
    get userId(): string;
    get navKey(): string;
    static create(opts: JiraNavigationConfigAriOpts): JiraNavigationConfigAri;
    static parse(maybeAri: string): JiraNavigationConfigAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        userId: string;
        navKey: string;
    };
}
export { JiraNavigationConfigAri }
export { JiraNavigationConfigAri as JiraNavigationConfigAri_alias_1 }
export { JiraNavigationConfigAri as JiraNavigationConfigAri_alias_2 }

export declare interface JiraNavigationConfigAriOpts {
    siteId: string;
    activationId: string;
    userId: string;
    navKey: string;
}

declare const JiraNavigationConfigAriResourceOwner = "jira";
export { JiraNavigationConfigAriResourceOwner }
export { JiraNavigationConfigAriResourceOwner as JiraNavigationConfigAriResourceOwner_alias_1 }

declare const JiraNavigationConfigAriResourceType = "navigation-config";
export { JiraNavigationConfigAriResourceType }
export { JiraNavigationConfigAriResourceType as JiraNavigationConfigAriResourceType_alias_1 }

export declare const jiraNavigationConfigAriStaticOpts: AriStaticProperties;

declare class JiraNavigationItemAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _scopeType;
    private readonly _scopeId;
    private readonly _itemId;
    get siteId(): string;
    get activationId(): string;
    get scopeType(): string;
    get scopeId(): string;
    get itemId(): string;
    static create(opts: JiraNavigationItemAriOpts): JiraNavigationItemAri;
    static parse(maybeAri: string): JiraNavigationItemAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        scopeType: string;
        scopeId: string;
        itemId: string;
    };
}
export { JiraNavigationItemAri }
export { JiraNavigationItemAri as JiraNavigationItemAri_alias_1 }
export { JiraNavigationItemAri as JiraNavigationItemAri_alias_2 }

export declare interface JiraNavigationItemAriOpts {
    siteId: string;
    activationId: string;
    scopeType: string;
    scopeId: string;
    itemId: string;
}

declare const JiraNavigationItemAriResourceOwner = "jira";
export { JiraNavigationItemAriResourceOwner }
export { JiraNavigationItemAriResourceOwner as JiraNavigationItemAriResourceOwner_alias_1 }

declare const JiraNavigationItemAriResourceType = "navigation-item";
export { JiraNavigationItemAriResourceType }
export { JiraNavigationItemAriResourceType as JiraNavigationItemAriResourceType_alias_1 }

export declare const jiraNavigationItemAriStaticOpts: AriStaticProperties;

declare class JiraNotificationTypeAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _notificationTypeId;
    get activationId(): string;
    get notificationTypeId(): string;
    static create(opts: JiraNotificationTypeAriOpts): JiraNotificationTypeAri;
    static parse(maybeAri: string): JiraNotificationTypeAri;
    getVariables(): {
        activationId: string;
        notificationTypeId: string;
    };
}
export { JiraNotificationTypeAri }
export { JiraNotificationTypeAri as JiraNotificationTypeAri_alias_1 }
export { JiraNotificationTypeAri as JiraNotificationTypeAri_alias_2 }

export declare interface JiraNotificationTypeAriOpts {
    activationId: string;
    notificationTypeId: string;
}

declare const JiraNotificationTypeAriResourceOwner = "jira";
export { JiraNotificationTypeAriResourceOwner }
export { JiraNotificationTypeAriResourceOwner as JiraNotificationTypeAriResourceOwner_alias_1 }

declare const JiraNotificationTypeAriResourceType = "notification-type";
export { JiraNotificationTypeAriResourceType }
export { JiraNotificationTypeAriResourceType as JiraNotificationTypeAriResourceType_alias_1 }

export declare const jiraNotificationTypeAriStaticOpts: AriStaticProperties;

declare class JiraNotificationTypeSchemeAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _notificationTypeSchemeId;
    get activationId(): string;
    get notificationTypeSchemeId(): string;
    static create(opts: JiraNotificationTypeSchemeAriOpts): JiraNotificationTypeSchemeAri;
    static parse(maybeAri: string): JiraNotificationTypeSchemeAri;
    getVariables(): {
        activationId: string;
        notificationTypeSchemeId: string;
    };
}
export { JiraNotificationTypeSchemeAri }
export { JiraNotificationTypeSchemeAri as JiraNotificationTypeSchemeAri_alias_1 }
export { JiraNotificationTypeSchemeAri as JiraNotificationTypeSchemeAri_alias_2 }

export declare interface JiraNotificationTypeSchemeAriOpts {
    activationId: string;
    notificationTypeSchemeId: string;
}

declare const JiraNotificationTypeSchemeAriResourceOwner = "jira";
export { JiraNotificationTypeSchemeAriResourceOwner }
export { JiraNotificationTypeSchemeAriResourceOwner as JiraNotificationTypeSchemeAriResourceOwner_alias_1 }

declare const JiraNotificationTypeSchemeAriResourceType = "notification-type-scheme";
export { JiraNotificationTypeSchemeAriResourceType }
export { JiraNotificationTypeSchemeAriResourceType as JiraNotificationTypeSchemeAriResourceType_alias_1 }

export declare const jiraNotificationTypeSchemeAriStaticOpts: AriStaticProperties;

declare class JiraNotificationUserPreferenceAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _notificationUserPreferenceId;
    get activationId(): string;
    get notificationUserPreferenceId(): string;
    static create(opts: JiraNotificationUserPreferenceAriOpts): JiraNotificationUserPreferenceAri;
    static parse(maybeAri: string): JiraNotificationUserPreferenceAri;
    getVariables(): {
        activationId: string;
        notificationUserPreferenceId: string;
    };
}
export { JiraNotificationUserPreferenceAri }
export { JiraNotificationUserPreferenceAri as JiraNotificationUserPreferenceAri_alias_1 }
export { JiraNotificationUserPreferenceAri as JiraNotificationUserPreferenceAri_alias_2 }

export declare interface JiraNotificationUserPreferenceAriOpts {
    activationId: string;
    notificationUserPreferenceId: string;
}

declare const JiraNotificationUserPreferenceAriResourceOwner = "jira";
export { JiraNotificationUserPreferenceAriResourceOwner }
export { JiraNotificationUserPreferenceAriResourceOwner as JiraNotificationUserPreferenceAriResourceOwner_alias_1 }

declare const JiraNotificationUserPreferenceAriResourceType = "notification-user-preference";
export { JiraNotificationUserPreferenceAriResourceType }
export { JiraNotificationUserPreferenceAriResourceType as JiraNotificationUserPreferenceAriResourceType_alias_1 }

export declare const jiraNotificationUserPreferenceAriStaticOpts: AriStaticProperties;

declare class JiraOperationsWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _providerAppId;
    private readonly _operationsWorkspaceId;
    get siteId(): string;
    get activationId(): string;
    get providerAppId(): string;
    get operationsWorkspaceId(): string;
    static create(opts: JiraOperationsWorkspaceAriOpts): JiraOperationsWorkspaceAri;
    static parse(maybeAri: string): JiraOperationsWorkspaceAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        providerAppId: string;
        operationsWorkspaceId: string;
    };
}
export { JiraOperationsWorkspaceAri }
export { JiraOperationsWorkspaceAri as JiraOperationsWorkspaceAri_alias_1 }
export { JiraOperationsWorkspaceAri as JiraOperationsWorkspaceAri_alias_2 }

export declare interface JiraOperationsWorkspaceAriOpts {
    siteId: string;
    activationId: string;
    providerAppId: string;
    operationsWorkspaceId: string;
}

declare const JiraOperationsWorkspaceAriResourceOwner = "jira";
export { JiraOperationsWorkspaceAriResourceOwner }
export { JiraOperationsWorkspaceAriResourceOwner as JiraOperationsWorkspaceAriResourceOwner_alias_1 }

declare const JiraOperationsWorkspaceAriResourceType = "operations-workspace";
export { JiraOperationsWorkspaceAriResourceType }
export { JiraOperationsWorkspaceAriResourceType as JiraOperationsWorkspaceAriResourceType_alias_1 }

export declare const jiraOperationsWorkspaceAriStaticOpts: AriStaticProperties;

declare class JiraPermissionSchemeAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _schemeId;
    get siteId(): string;
    get activationId(): string;
    get schemeId(): string;
    static create(opts: JiraPermissionSchemeAriOpts): JiraPermissionSchemeAri;
    static parse(maybeAri: string): JiraPermissionSchemeAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        schemeId: string;
    };
}
export { JiraPermissionSchemeAri }
export { JiraPermissionSchemeAri as JiraPermissionSchemeAri_alias_1 }
export { JiraPermissionSchemeAri as JiraPermissionSchemeAri_alias_2 }

export declare interface JiraPermissionSchemeAriOpts {
    siteId: string;
    activationId: string;
    schemeId: string;
}

declare const JiraPermissionSchemeAriResourceOwner = "jira";
export { JiraPermissionSchemeAriResourceOwner }
export { JiraPermissionSchemeAriResourceOwner as JiraPermissionSchemeAriResourceOwner_alias_1 }

declare const JiraPermissionSchemeAriResourceType = "permission-scheme";
export { JiraPermissionSchemeAriResourceType }
export { JiraPermissionSchemeAriResourceType as JiraPermissionSchemeAriResourceType_alias_1 }

export declare const jiraPermissionSchemeAriStaticOpts: AriStaticProperties;

declare class JiraPlanAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _planId;
    get siteId(): string;
    get activationId(): string;
    get planId(): string;
    static create(opts: JiraPlanAriOpts): JiraPlanAri;
    static parse(maybeAri: string): JiraPlanAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        planId: string;
    };
}
export { JiraPlanAri }
export { JiraPlanAri as JiraPlanAri_alias_1 }
export { JiraPlanAri as JiraPlanAri_alias_2 }

export declare interface JiraPlanAriOpts {
    siteId: string;
    activationId: string;
    planId: string;
}

declare const JiraPlanAriResourceOwner = "jira";
export { JiraPlanAriResourceOwner }
export { JiraPlanAriResourceOwner as JiraPlanAriResourceOwner_alias_1 }

declare const JiraPlanAriResourceType = "plan";
export { JiraPlanAriResourceType }
export { JiraPlanAriResourceType as JiraPlanAriResourceType_alias_1 }

export declare const jiraPlanAriStaticOpts: AriStaticProperties;

declare class JiraPlanCrossProjectScenarioVersionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _crossProjectScenarioVersionId;
    get siteId(): string;
    get activationId(): string;
    get crossProjectScenarioVersionId(): string;
    static create(opts: JiraPlanCrossProjectScenarioVersionAriOpts): JiraPlanCrossProjectScenarioVersionAri;
    static parse(maybeAri: string): JiraPlanCrossProjectScenarioVersionAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        crossProjectScenarioVersionId: string;
    };
}
export { JiraPlanCrossProjectScenarioVersionAri }
export { JiraPlanCrossProjectScenarioVersionAri as JiraPlanCrossProjectScenarioVersionAri_alias_1 }
export { JiraPlanCrossProjectScenarioVersionAri as JiraPlanCrossProjectScenarioVersionAri_alias_2 }

export declare interface JiraPlanCrossProjectScenarioVersionAriOpts {
    siteId: string;
    activationId: string;
    crossProjectScenarioVersionId: string;
}

declare const JiraPlanCrossProjectScenarioVersionAriResourceOwner = "jira";
export { JiraPlanCrossProjectScenarioVersionAriResourceOwner }
export { JiraPlanCrossProjectScenarioVersionAriResourceOwner as JiraPlanCrossProjectScenarioVersionAriResourceOwner_alias_1 }

declare const JiraPlanCrossProjectScenarioVersionAriResourceType = "plan-cross-project-scenario-version";
export { JiraPlanCrossProjectScenarioVersionAriResourceType }
export { JiraPlanCrossProjectScenarioVersionAriResourceType as JiraPlanCrossProjectScenarioVersionAriResourceType_alias_1 }

export declare const jiraPlanCrossProjectScenarioVersionAriStaticOpts: AriStaticProperties;

declare class JiraPlanCrossProjectVersionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _crossProjectVersionId;
    get siteId(): string;
    get activationId(): string;
    get crossProjectVersionId(): string;
    static create(opts: JiraPlanCrossProjectVersionAriOpts): JiraPlanCrossProjectVersionAri;
    static parse(maybeAri: string): JiraPlanCrossProjectVersionAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        crossProjectVersionId: string;
    };
}
export { JiraPlanCrossProjectVersionAri }
export { JiraPlanCrossProjectVersionAri as JiraPlanCrossProjectVersionAri_alias_1 }
export { JiraPlanCrossProjectVersionAri as JiraPlanCrossProjectVersionAri_alias_2 }

export declare interface JiraPlanCrossProjectVersionAriOpts {
    siteId: string;
    activationId: string;
    crossProjectVersionId: string;
}

declare const JiraPlanCrossProjectVersionAriResourceOwner = "jira";
export { JiraPlanCrossProjectVersionAriResourceOwner }
export { JiraPlanCrossProjectVersionAriResourceOwner as JiraPlanCrossProjectVersionAriResourceOwner_alias_1 }

declare const JiraPlanCrossProjectVersionAriResourceType = "plan-cross-project-version";
export { JiraPlanCrossProjectVersionAriResourceType }
export { JiraPlanCrossProjectVersionAriResourceType as JiraPlanCrossProjectVersionAriResourceType_alias_1 }

export declare const jiraPlanCrossProjectVersionAriStaticOpts: AriStaticProperties;

declare class JiraPlanScenarioAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _planId;
    private readonly _scenarioId;
    get siteId(): string;
    get activationId(): string;
    get planId(): string;
    get scenarioId(): string;
    static create(opts: JiraPlanScenarioAriOpts): JiraPlanScenarioAri;
    static parse(maybeAri: string): JiraPlanScenarioAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        planId: string;
        scenarioId: string;
    };
}
export { JiraPlanScenarioAri }
export { JiraPlanScenarioAri as JiraPlanScenarioAri_alias_1 }
export { JiraPlanScenarioAri as JiraPlanScenarioAri_alias_2 }

export declare interface JiraPlanScenarioAriOpts {
    siteId: string;
    activationId: string;
    planId: string;
    scenarioId: string;
}

declare const JiraPlanScenarioAriResourceOwner = "jira";
export { JiraPlanScenarioAriResourceOwner }
export { JiraPlanScenarioAriResourceOwner as JiraPlanScenarioAriResourceOwner_alias_1 }

declare const JiraPlanScenarioAriResourceType = "plan-scenario";
export { JiraPlanScenarioAriResourceType }
export { JiraPlanScenarioAriResourceType as JiraPlanScenarioAriResourceType_alias_1 }

export declare const jiraPlanScenarioAriStaticOpts: AriStaticProperties;

declare class JiraPlanScenarioIssueAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _scenarioIssueId;
    get siteId(): string;
    get activationId(): string;
    get scenarioIssueId(): string;
    static create(opts: JiraPlanScenarioIssueAriOpts): JiraPlanScenarioIssueAri;
    static parse(maybeAri: string): JiraPlanScenarioIssueAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        scenarioIssueId: string;
    };
}
export { JiraPlanScenarioIssueAri }
export { JiraPlanScenarioIssueAri as JiraPlanScenarioIssueAri_alias_1 }
export { JiraPlanScenarioIssueAri as JiraPlanScenarioIssueAri_alias_2 }

export declare interface JiraPlanScenarioIssueAriOpts {
    siteId: string;
    activationId: string;
    scenarioIssueId: string;
}

declare const JiraPlanScenarioIssueAriResourceOwner = "jira";
export { JiraPlanScenarioIssueAriResourceOwner }
export { JiraPlanScenarioIssueAriResourceOwner as JiraPlanScenarioIssueAriResourceOwner_alias_1 }

declare const JiraPlanScenarioIssueAriResourceType = "plan-scenario-issue";
export { JiraPlanScenarioIssueAriResourceType }
export { JiraPlanScenarioIssueAriResourceType as JiraPlanScenarioIssueAriResourceType_alias_1 }

export declare const jiraPlanScenarioIssueAriStaticOpts: AriStaticProperties;

declare class JiraPlanScenarioIssueFieldAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _scenarioIssueId;
    private readonly _fieldId;
    get siteId(): string;
    get activationId(): string;
    get scenarioIssueId(): string;
    get fieldId(): string;
    static create(opts: JiraPlanScenarioIssueFieldAriOpts): JiraPlanScenarioIssueFieldAri;
    static parse(maybeAri: string): JiraPlanScenarioIssueFieldAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        scenarioIssueId: string;
        fieldId: string;
    };
}
export { JiraPlanScenarioIssueFieldAri }
export { JiraPlanScenarioIssueFieldAri as JiraPlanScenarioIssueFieldAri_alias_1 }
export { JiraPlanScenarioIssueFieldAri as JiraPlanScenarioIssueFieldAri_alias_2 }

export declare interface JiraPlanScenarioIssueFieldAriOpts {
    siteId: string;
    activationId: string;
    scenarioIssueId: string;
    fieldId: string;
}

declare const JiraPlanScenarioIssueFieldAriResourceOwner = "jira";
export { JiraPlanScenarioIssueFieldAriResourceOwner }
export { JiraPlanScenarioIssueFieldAriResourceOwner as JiraPlanScenarioIssueFieldAriResourceOwner_alias_1 }

declare const JiraPlanScenarioIssueFieldAriResourceType = "plan-scenario-issue-field";
export { JiraPlanScenarioIssueFieldAriResourceType }
export { JiraPlanScenarioIssueFieldAriResourceType as JiraPlanScenarioIssueFieldAriResourceType_alias_1 }

export declare const jiraPlanScenarioIssueFieldAriStaticOpts: AriStaticProperties;

declare class JiraPlanScenarioVersionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _scenarioVersionId;
    get siteId(): string;
    get activationId(): string;
    get scenarioVersionId(): string;
    static create(opts: JiraPlanScenarioVersionAriOpts): JiraPlanScenarioVersionAri;
    static parse(maybeAri: string): JiraPlanScenarioVersionAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        scenarioVersionId: string;
    };
}
export { JiraPlanScenarioVersionAri }
export { JiraPlanScenarioVersionAri as JiraPlanScenarioVersionAri_alias_1 }
export { JiraPlanScenarioVersionAri as JiraPlanScenarioVersionAri_alias_2 }

export declare interface JiraPlanScenarioVersionAriOpts {
    siteId: string;
    activationId: string;
    scenarioVersionId: string;
}

declare const JiraPlanScenarioVersionAriResourceOwner = "jira";
export { JiraPlanScenarioVersionAriResourceOwner }
export { JiraPlanScenarioVersionAriResourceOwner as JiraPlanScenarioVersionAriResourceOwner_alias_1 }

declare const JiraPlanScenarioVersionAriResourceType = "plan-scenario-version";
export { JiraPlanScenarioVersionAriResourceType }
export { JiraPlanScenarioVersionAriResourceType as JiraPlanScenarioVersionAriResourceType_alias_1 }

export declare const jiraPlanScenarioVersionAriStaticOpts: AriStaticProperties;

declare class JiraPostIncidentReviewAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _postIncidentReviewId;
    get siteId(): string;
    get activationId(): string;
    get postIncidentReviewId(): string;
    static create(opts: JiraPostIncidentReviewAriOpts): JiraPostIncidentReviewAri;
    static parse(maybeAri: string): JiraPostIncidentReviewAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        postIncidentReviewId: string;
    };
}
export { JiraPostIncidentReviewAri }
export { JiraPostIncidentReviewAri as JiraPostIncidentReviewAri_alias_1 }
export { JiraPostIncidentReviewAri as JiraPostIncidentReviewAri_alias_2 }

export declare interface JiraPostIncidentReviewAriOpts {
    siteId: string;
    activationId: string;
    postIncidentReviewId: string;
}

declare const JiraPostIncidentReviewAriResourceOwner = "jira";
export { JiraPostIncidentReviewAriResourceOwner }
export { JiraPostIncidentReviewAriResourceOwner as JiraPostIncidentReviewAriResourceOwner_alias_1 }

declare const JiraPostIncidentReviewAriResourceType = "post-incident-review";
export { JiraPostIncidentReviewAriResourceType }
export { JiraPostIncidentReviewAriResourceType as JiraPostIncidentReviewAriResourceType_alias_1 }

export declare const jiraPostIncidentReviewAriStaticOpts: AriStaticProperties;

declare class JiraPostIncidentReviewHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _postIncidentReviewId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get postIncidentReviewId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraPostIncidentReviewHistoryAriOpts): JiraPostIncidentReviewHistoryAri;
    static parse(maybeAri: string): JiraPostIncidentReviewHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        postIncidentReviewId: string;
        updateSequenceNumber: string;
    };
}
export { JiraPostIncidentReviewHistoryAri }
export { JiraPostIncidentReviewHistoryAri as JiraPostIncidentReviewHistoryAri_alias_1 }
export { JiraPostIncidentReviewHistoryAri as JiraPostIncidentReviewHistoryAri_alias_2 }

export declare interface JiraPostIncidentReviewHistoryAriOpts {
    siteId: string;
    activationId: string;
    postIncidentReviewId: string;
    updateSequenceNumber: string;
}

declare const JiraPostIncidentReviewHistoryAriResourceOwner = "jira";
export { JiraPostIncidentReviewHistoryAriResourceOwner }
export { JiraPostIncidentReviewHistoryAriResourceOwner as JiraPostIncidentReviewHistoryAriResourceOwner_alias_1 }

declare const JiraPostIncidentReviewHistoryAriResourceType = "post-incident-review-history";
export { JiraPostIncidentReviewHistoryAriResourceType }
export { JiraPostIncidentReviewHistoryAriResourceType as JiraPostIncidentReviewHistoryAriResourceType_alias_1 }

export declare const jiraPostIncidentReviewHistoryAriStaticOpts: AriStaticProperties;

declare class JiraPostIncidentReviewLinkAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _postIncidentReviewLinkId;
    get siteId(): string;
    get activationId(): string;
    get postIncidentReviewLinkId(): string;
    static create(opts: JiraPostIncidentReviewLinkAriOpts): JiraPostIncidentReviewLinkAri;
    static parse(maybeAri: string): JiraPostIncidentReviewLinkAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        postIncidentReviewLinkId: string;
    };
}
export { JiraPostIncidentReviewLinkAri }
export { JiraPostIncidentReviewLinkAri as JiraPostIncidentReviewLinkAri_alias_1 }
export { JiraPostIncidentReviewLinkAri as JiraPostIncidentReviewLinkAri_alias_2 }

export declare interface JiraPostIncidentReviewLinkAriOpts {
    siteId: string;
    activationId: string;
    postIncidentReviewLinkId: string;
}

declare const JiraPostIncidentReviewLinkAriResourceOwner = "jira";
export { JiraPostIncidentReviewLinkAriResourceOwner }
export { JiraPostIncidentReviewLinkAriResourceOwner as JiraPostIncidentReviewLinkAriResourceOwner_alias_1 }

declare const JiraPostIncidentReviewLinkAriResourceType = "post-incident-review-link";
export { JiraPostIncidentReviewLinkAriResourceType }
export { JiraPostIncidentReviewLinkAriResourceType as JiraPostIncidentReviewLinkAriResourceType_alias_1 }

export declare const jiraPostIncidentReviewLinkAriStaticOpts: AriStaticProperties;

declare class JiraPriorityAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _priorityId;
    get siteId(): string;
    get activationId(): string;
    get priorityId(): string;
    static create(opts: JiraPriorityAriOpts): JiraPriorityAri;
    static parse(maybeAri: string): JiraPriorityAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        priorityId: string;
    };
}
export { JiraPriorityAri }
export { JiraPriorityAri as JiraPriorityAri_alias_1 }
export { JiraPriorityAri as JiraPriorityAri_alias_2 }

export declare interface JiraPriorityAriOpts {
    siteId: string;
    activationId: string;
    priorityId: string;
}

declare const JiraPriorityAriResourceOwner = "jira";
export { JiraPriorityAriResourceOwner }
export { JiraPriorityAriResourceOwner as JiraPriorityAriResourceOwner_alias_1 }

declare const JiraPriorityAriResourceType = "priority";
export { JiraPriorityAriResourceType }
export { JiraPriorityAriResourceType as JiraPriorityAriResourceType_alias_1 }

export declare const jiraPriorityAriStaticOpts: AriStaticProperties;

declare class JiraProductAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _productId;
    get siteId(): string;
    get activationId(): string;
    get productId(): string;
    static create(opts: JiraProductAriOpts): JiraProductAri;
    static parse(maybeAri: string): JiraProductAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        productId: string;
    };
}
export { JiraProductAri }
export { JiraProductAri as JiraProductAri_alias_1 }
export { JiraProductAri as JiraProductAri_alias_2 }

export declare interface JiraProductAriOpts {
    siteId: string;
    activationId: string;
    productId: string;
}

declare const JiraProductAriResourceOwner = "jira";
export { JiraProductAriResourceOwner }
export { JiraProductAriResourceOwner as JiraProductAriResourceOwner_alias_1 }

declare const JiraProductAriResourceType = "product";
export { JiraProductAriResourceType }
export { JiraProductAriResourceType as JiraProductAriResourceType_alias_1 }

export declare const jiraProductAriStaticOpts: AriStaticProperties;

export declare const JiraProjectAndDevopsToolRelationshipType: "jira-project-and-devops-tool-relationship";

export declare const JiraProjectAndDocumentationSpaceRelationshipType: "jira-project-and-documentation-space-relationship";

export declare const JiraProjectAndOperationsTeamRelationshipType: "jira-project-and-operations-team-relationship";

export declare const JiraProjectAndVcsRepositoryRelationshipTempMigrationType: "jira-project-and-vcs-repository-relationship-temp-migration";

export declare const JiraProjectAndVcsRepositoryRelationshipType: "jira-project-and-vcs-repository-relationship";

declare class JiraProjectAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _projectId;
    get siteId(): string;
    get projectId(): string;
    static create(opts: JiraProjectAriOpts): JiraProjectAri;
    static parse(maybeAri: string): JiraProjectAri;
    getVariables(): {
        siteId: string;
        projectId: string;
    };
}
export { JiraProjectAri }
export { JiraProjectAri as JiraProjectAri_alias_1 }
export { JiraProjectAri as JiraProjectAri_alias_2 }

export declare interface JiraProjectAriOpts {
    siteId: string;
    projectId: string;
}

declare const JiraProjectAriResourceOwner = "jira";
export { JiraProjectAriResourceOwner }
export { JiraProjectAriResourceOwner as JiraProjectAriResourceOwner_alias_1 }

declare const JiraProjectAriResourceType = "project";
export { JiraProjectAriResourceType }
export { JiraProjectAriResourceType as JiraProjectAriResourceType_alias_1 }

export declare const jiraProjectAriStaticOpts: AriStaticProperties;

declare class JiraProjectCategoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _projectCategoryId;
    get siteId(): string;
    get projectCategoryId(): string;
    static create(opts: JiraProjectCategoryAriOpts): JiraProjectCategoryAri;
    static parse(maybeAri: string): JiraProjectCategoryAri;
    getVariables(): {
        siteId: string;
        projectCategoryId: string;
    };
}
export { JiraProjectCategoryAri }
export { JiraProjectCategoryAri as JiraProjectCategoryAri_alias_1 }
export { JiraProjectCategoryAri as JiraProjectCategoryAri_alias_2 }

export declare interface JiraProjectCategoryAriOpts {
    siteId: string;
    projectCategoryId: string;
}

declare const JiraProjectCategoryAriResourceOwner = "jira";
export { JiraProjectCategoryAriResourceOwner }
export { JiraProjectCategoryAriResourceOwner as JiraProjectCategoryAriResourceOwner_alias_1 }

declare const JiraProjectCategoryAriResourceType = "project-category";
export { JiraProjectCategoryAriResourceType }
export { JiraProjectCategoryAriResourceType as JiraProjectCategoryAriResourceType_alias_1 }

export declare const jiraProjectCategoryAriStaticOpts: AriStaticProperties;

declare class JiraProjectFeatureAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _projectId;
    private readonly _featureKey;
    get siteId(): string;
    get activationId(): string;
    get projectId(): string;
    get featureKey(): string;
    static create(opts: JiraProjectFeatureAriOpts): JiraProjectFeatureAri;
    static parse(maybeAri: string): JiraProjectFeatureAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        projectId: string;
        featureKey: string;
    };
}
export { JiraProjectFeatureAri }
export { JiraProjectFeatureAri as JiraProjectFeatureAri_alias_1 }
export { JiraProjectFeatureAri as JiraProjectFeatureAri_alias_2 }

export declare interface JiraProjectFeatureAriOpts {
    siteId: string;
    activationId: string;
    projectId: string;
    featureKey: string;
}

declare const JiraProjectFeatureAriResourceOwner = "jira";
export { JiraProjectFeatureAriResourceOwner }
export { JiraProjectFeatureAriResourceOwner as JiraProjectFeatureAriResourceOwner_alias_1 }

declare const JiraProjectFeatureAriResourceType = "project-feature";
export { JiraProjectFeatureAriResourceType }
export { JiraProjectFeatureAriResourceType as JiraProjectFeatureAriResourceType_alias_1 }

export declare const jiraProjectFeatureAriStaticOpts: AriStaticProperties;

declare class JiraProjectOverviewAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _overviewId;
    get siteId(): string;
    get activationId(): string;
    get overviewId(): string;
    static create(opts: JiraProjectOverviewAriOpts): JiraProjectOverviewAri;
    static parse(maybeAri: string): JiraProjectOverviewAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        overviewId: string;
    };
}
export { JiraProjectOverviewAri }
export { JiraProjectOverviewAri as JiraProjectOverviewAri_alias_1 }
export { JiraProjectOverviewAri as JiraProjectOverviewAri_alias_2 }

export declare interface JiraProjectOverviewAriOpts {
    siteId: string;
    activationId: string;
    overviewId: string;
}

declare const JiraProjectOverviewAriResourceOwner = "jira";
export { JiraProjectOverviewAriResourceOwner }
export { JiraProjectOverviewAriResourceOwner as JiraProjectOverviewAriResourceOwner_alias_1 }

declare const JiraProjectOverviewAriResourceType = "project-overview";
export { JiraProjectOverviewAriResourceType }
export { JiraProjectOverviewAriResourceType as JiraProjectOverviewAriResourceType_alias_1 }

export declare const jiraProjectOverviewAriStaticOpts: AriStaticProperties;

declare class JiraProjectRoleActorAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _projectRoleActorId;
    get siteId(): string;
    get activationId(): string;
    get projectRoleActorId(): string;
    static create(opts: JiraProjectRoleActorAriOpts): JiraProjectRoleActorAri;
    static parse(maybeAri: string): JiraProjectRoleActorAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        projectRoleActorId: string;
    };
}
export { JiraProjectRoleActorAri }
export { JiraProjectRoleActorAri as JiraProjectRoleActorAri_alias_1 }
export { JiraProjectRoleActorAri as JiraProjectRoleActorAri_alias_2 }

export declare interface JiraProjectRoleActorAriOpts {
    siteId: string;
    activationId: string;
    projectRoleActorId: string;
}

declare const JiraProjectRoleActorAriResourceOwner = "jira";
export { JiraProjectRoleActorAriResourceOwner }
export { JiraProjectRoleActorAriResourceOwner as JiraProjectRoleActorAriResourceOwner_alias_1 }

declare const JiraProjectRoleActorAriResourceType = "project-role-actor";
export { JiraProjectRoleActorAriResourceType }
export { JiraProjectRoleActorAriResourceType as JiraProjectRoleActorAriResourceType_alias_1 }

export declare const jiraProjectRoleActorAriStaticOpts: AriStaticProperties;

declare class JiraProjectShortcutAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _shortcutId;
    get siteId(): string;
    get activationId(): string;
    get shortcutId(): string;
    static create(opts: JiraProjectShortcutAriOpts): JiraProjectShortcutAri;
    static parse(maybeAri: string): JiraProjectShortcutAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        shortcutId: string;
    };
}
export { JiraProjectShortcutAri }
export { JiraProjectShortcutAri as JiraProjectShortcutAri_alias_1 }
export { JiraProjectShortcutAri as JiraProjectShortcutAri_alias_2 }

export declare interface JiraProjectShortcutAriOpts {
    siteId: string;
    activationId: string;
    shortcutId: string;
}

declare const JiraProjectShortcutAriResourceOwner = "jira";
export { JiraProjectShortcutAriResourceOwner }
export { JiraProjectShortcutAriResourceOwner as JiraProjectShortcutAriResourceOwner_alias_1 }

declare const JiraProjectShortcutAriResourceType = "project-shortcut";
export { JiraProjectShortcutAriResourceType }
export { JiraProjectShortcutAriResourceType as JiraProjectShortcutAriResourceType_alias_1 }

export declare const jiraProjectShortcutAriStaticOpts: AriStaticProperties;

declare class JiraProjectTypeAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _projectTypeId;
    get siteId(): string;
    get projectTypeId(): string;
    static create(opts: JiraProjectTypeAriOpts): JiraProjectTypeAri;
    static parse(maybeAri: string): JiraProjectTypeAri;
    getVariables(): {
        siteId: string;
        projectTypeId: string;
    };
}
export { JiraProjectTypeAri }
export { JiraProjectTypeAri as JiraProjectTypeAri_alias_1 }
export { JiraProjectTypeAri as JiraProjectTypeAri_alias_2 }

export declare interface JiraProjectTypeAriOpts {
    siteId: string;
    projectTypeId: string;
}

declare const JiraProjectTypeAriResourceOwner = "jira";
export { JiraProjectTypeAriResourceOwner }
export { JiraProjectTypeAriResourceOwner as JiraProjectTypeAriResourceOwner_alias_1 }

declare const JiraProjectTypeAriResourceType = "project-type";
export { JiraProjectTypeAriResourceType }
export { JiraProjectTypeAriResourceType as JiraProjectTypeAriResourceType_alias_1 }

export declare const jiraProjectTypeAriStaticOpts: AriStaticProperties;

declare class JiraPullRequestAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _pullRequestId;
    get siteId(): string;
    get activationId(): string;
    get pullRequestId(): string;
    static create(opts: JiraPullRequestAriOpts): JiraPullRequestAri;
    static parse(maybeAri: string): JiraPullRequestAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        pullRequestId: string;
    };
}
export { JiraPullRequestAri }
export { JiraPullRequestAri as JiraPullRequestAri_alias_1 }
export { JiraPullRequestAri as JiraPullRequestAri_alias_2 }

export declare interface JiraPullRequestAriOpts {
    siteId: string;
    activationId: string;
    pullRequestId: string;
}

declare const JiraPullRequestAriResourceOwner = "jira";
export { JiraPullRequestAriResourceOwner }
export { JiraPullRequestAriResourceOwner as JiraPullRequestAriResourceOwner_alias_1 }

declare const JiraPullRequestAriResourceType = "pull-request";
export { JiraPullRequestAriResourceType }
export { JiraPullRequestAriResourceType as JiraPullRequestAriResourceType_alias_1 }

export declare const jiraPullRequestAriStaticOpts: AriStaticProperties;

declare class JiraPullRequestHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _pullRequestId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get pullRequestId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraPullRequestHistoryAriOpts): JiraPullRequestHistoryAri;
    static parse(maybeAri: string): JiraPullRequestHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        pullRequestId: string;
        updateSequenceNumber: string;
    };
}
export { JiraPullRequestHistoryAri }
export { JiraPullRequestHistoryAri as JiraPullRequestHistoryAri_alias_1 }
export { JiraPullRequestHistoryAri as JiraPullRequestHistoryAri_alias_2 }

export declare interface JiraPullRequestHistoryAriOpts {
    siteId: string;
    activationId: string;
    pullRequestId: string;
    updateSequenceNumber: string;
}

declare const JiraPullRequestHistoryAriResourceOwner = "jira";
export { JiraPullRequestHistoryAriResourceOwner }
export { JiraPullRequestHistoryAriResourceOwner as JiraPullRequestHistoryAriResourceOwner_alias_1 }

declare const JiraPullRequestHistoryAriResourceType = "pull-request-history";
export { JiraPullRequestHistoryAriResourceType }
export { JiraPullRequestHistoryAriResourceType as JiraPullRequestHistoryAriResourceType_alias_1 }

export declare const jiraPullRequestHistoryAriStaticOpts: AriStaticProperties;

declare class JiraRemoteLinkAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _remoteLinkId;
    get siteId(): string;
    get activationId(): string;
    get remoteLinkId(): string;
    static create(opts: JiraRemoteLinkAriOpts): JiraRemoteLinkAri;
    static parse(maybeAri: string): JiraRemoteLinkAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        remoteLinkId: string;
    };
}
export { JiraRemoteLinkAri }
export { JiraRemoteLinkAri as JiraRemoteLinkAri_alias_1 }
export { JiraRemoteLinkAri as JiraRemoteLinkAri_alias_2 }

export declare interface JiraRemoteLinkAriOpts {
    siteId: string;
    activationId: string;
    remoteLinkId: string;
}

declare const JiraRemoteLinkAriResourceOwner = "jira";
export { JiraRemoteLinkAriResourceOwner }
export { JiraRemoteLinkAriResourceOwner as JiraRemoteLinkAriResourceOwner_alias_1 }

declare const JiraRemoteLinkAriResourceType = "remote-link";
export { JiraRemoteLinkAriResourceType }
export { JiraRemoteLinkAriResourceType as JiraRemoteLinkAriResourceType_alias_1 }

export declare const jiraRemoteLinkAriStaticOpts: AriStaticProperties;

declare class JiraRemoteLinkHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _remoteLinkId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get remoteLinkId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraRemoteLinkHistoryAriOpts): JiraRemoteLinkHistoryAri;
    static parse(maybeAri: string): JiraRemoteLinkHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        remoteLinkId: string;
        updateSequenceNumber: string;
    };
}
export { JiraRemoteLinkHistoryAri }
export { JiraRemoteLinkHistoryAri as JiraRemoteLinkHistoryAri_alias_1 }
export { JiraRemoteLinkHistoryAri as JiraRemoteLinkHistoryAri_alias_2 }

export declare interface JiraRemoteLinkHistoryAriOpts {
    siteId: string;
    activationId: string;
    remoteLinkId: string;
    updateSequenceNumber: string;
}

declare const JiraRemoteLinkHistoryAriResourceOwner = "jira";
export { JiraRemoteLinkHistoryAriResourceOwner }
export { JiraRemoteLinkHistoryAriResourceOwner as JiraRemoteLinkHistoryAriResourceOwner_alias_1 }

declare const JiraRemoteLinkHistoryAriResourceType = "remote-link-history";
export { JiraRemoteLinkHistoryAriResourceType }
export { JiraRemoteLinkHistoryAriResourceType as JiraRemoteLinkHistoryAriResourceType_alias_1 }

export declare const jiraRemoteLinkHistoryAriStaticOpts: AriStaticProperties;

declare class JiraRepositoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _repositoryId;
    get siteId(): string;
    get activationId(): string;
    get repositoryId(): string;
    static create(opts: JiraRepositoryAriOpts): JiraRepositoryAri;
    static parse(maybeAri: string): JiraRepositoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        repositoryId: string;
    };
}
export { JiraRepositoryAri }
export { JiraRepositoryAri as JiraRepositoryAri_alias_1 }
export { JiraRepositoryAri as JiraRepositoryAri_alias_2 }

export declare interface JiraRepositoryAriOpts {
    siteId: string;
    activationId: string;
    repositoryId: string;
}

declare const JiraRepositoryAriResourceOwner = "jira";
export { JiraRepositoryAriResourceOwner }
export { JiraRepositoryAriResourceOwner as JiraRepositoryAriResourceOwner_alias_1 }

declare const JiraRepositoryAriResourceType = "repository";
export { JiraRepositoryAriResourceType }
export { JiraRepositoryAriResourceType as JiraRepositoryAriResourceType_alias_1 }

export declare const jiraRepositoryAriStaticOpts: AriStaticProperties;

declare class JiraResolutionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _resolutionId;
    get siteId(): string;
    get activationId(): string;
    get resolutionId(): string;
    static create(opts: JiraResolutionAriOpts): JiraResolutionAri;
    static parse(maybeAri: string): JiraResolutionAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        resolutionId: string;
    };
}
export { JiraResolutionAri }
export { JiraResolutionAri as JiraResolutionAri_alias_1 }
export { JiraResolutionAri as JiraResolutionAri_alias_2 }

export declare interface JiraResolutionAriOpts {
    siteId: string;
    activationId: string;
    resolutionId: string;
}

declare const JiraResolutionAriResourceOwner = "jira";
export { JiraResolutionAriResourceOwner }
export { JiraResolutionAriResourceOwner as JiraResolutionAriResourceOwner_alias_1 }

declare const JiraResolutionAriResourceType = "resolution";
export { JiraResolutionAriResourceType }
export { JiraResolutionAriResourceType as JiraResolutionAriResourceType_alias_1 }

export declare const jiraResolutionAriStaticOpts: AriStaticProperties;

declare class JiraResourceUsageMetricAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _metricKey;
    get siteId(): string;
    get activationId(): string;
    get metricKey(): string;
    static create(opts: JiraResourceUsageMetricAriOpts): JiraResourceUsageMetricAri;
    static parse(maybeAri: string): JiraResourceUsageMetricAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        metricKey: string;
    };
}
export { JiraResourceUsageMetricAri }
export { JiraResourceUsageMetricAri as JiraResourceUsageMetricAri_alias_1 }
export { JiraResourceUsageMetricAri as JiraResourceUsageMetricAri_alias_2 }

export declare interface JiraResourceUsageMetricAriOpts {
    siteId: string;
    activationId: string;
    metricKey: string;
}

declare const JiraResourceUsageMetricAriResourceOwner = "jira";
export { JiraResourceUsageMetricAriResourceOwner }
export { JiraResourceUsageMetricAriResourceOwner as JiraResourceUsageMetricAriResourceOwner_alias_1 }

declare const JiraResourceUsageMetricAriResourceType = "resource-usage-metric";
export { JiraResourceUsageMetricAriResourceType }
export { JiraResourceUsageMetricAriResourceType as JiraResourceUsageMetricAriResourceType_alias_1 }

export declare const jiraResourceUsageMetricAriStaticOpts: AriStaticProperties;

declare class JiraResourceUsageRecommendationAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _recommendationId;
    get siteId(): string;
    get activationId(): string;
    get recommendationId(): string;
    static create(opts: JiraResourceUsageRecommendationAriOpts): JiraResourceUsageRecommendationAri;
    static parse(maybeAri: string): JiraResourceUsageRecommendationAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        recommendationId: string;
    };
}
export { JiraResourceUsageRecommendationAri }
export { JiraResourceUsageRecommendationAri as JiraResourceUsageRecommendationAri_alias_1 }
export { JiraResourceUsageRecommendationAri as JiraResourceUsageRecommendationAri_alias_2 }

export declare interface JiraResourceUsageRecommendationAriOpts {
    siteId: string;
    activationId: string;
    recommendationId: string;
}

declare const JiraResourceUsageRecommendationAriResourceOwner = "jira";
export { JiraResourceUsageRecommendationAriResourceOwner }
export { JiraResourceUsageRecommendationAriResourceOwner as JiraResourceUsageRecommendationAriResourceOwner_alias_1 }

declare const JiraResourceUsageRecommendationAriResourceType = "resource-usage-recommendation";
export { JiraResourceUsageRecommendationAriResourceType }
export { JiraResourceUsageRecommendationAriResourceType as JiraResourceUsageRecommendationAriResourceType_alias_1 }

export declare const jiraResourceUsageRecommendationAriStaticOpts: AriStaticProperties;

declare class JiraRoleAri extends RegisteredAri {
    private constructor();
    private readonly _optionalSiteId;
    private readonly _jiraRoleType;
    private readonly _jiraRoleTypeId;
    get optionalSiteId(): string;
    get jiraRoleType(): string;
    get jiraRoleTypeId(): string;
    static create(opts: JiraRoleAriOpts): JiraRoleAri;
    static parse(maybeAri: string): JiraRoleAri;
    getVariables(): {
        optionalSiteId: string;
        jiraRoleType: string;
        jiraRoleTypeId: string;
    };
}
export { JiraRoleAri }
export { JiraRoleAri as JiraRoleAri_alias_1 }
export { JiraRoleAri as JiraRoleAri_alias_2 }

export declare interface JiraRoleAriOpts {
    optionalSiteId?: string;
    jiraRoleType: string;
    jiraRoleTypeId: string;
}

declare const JiraRoleAriResourceOwner = "jira";
export { JiraRoleAriResourceOwner }
export { JiraRoleAriResourceOwner as JiraRoleAriResourceOwner_alias_1 }

declare const JiraRoleAriResourceType = "role";
export { JiraRoleAriResourceType }
export { JiraRoleAriResourceType as JiraRoleAriResourceType_alias_1 }

export declare const jiraRoleAriStaticOpts: AriStaticProperties;

declare class JiraScreenTabAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _screenId;
    private readonly _tabId;
    get siteId(): string;
    get activationId(): string;
    get screenId(): string;
    get tabId(): string;
    static create(opts: JiraScreenTabAriOpts): JiraScreenTabAri;
    static parse(maybeAri: string): JiraScreenTabAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        screenId: string;
        tabId: string;
    };
}
export { JiraScreenTabAri }
export { JiraScreenTabAri as JiraScreenTabAri_alias_1 }
export { JiraScreenTabAri as JiraScreenTabAri_alias_2 }

export declare interface JiraScreenTabAriOpts {
    siteId: string;
    activationId: string;
    screenId: string;
    tabId: string;
}

declare const JiraScreenTabAriResourceOwner = "jira";
export { JiraScreenTabAriResourceOwner }
export { JiraScreenTabAriResourceOwner as JiraScreenTabAriResourceOwner_alias_1 }

declare const JiraScreenTabAriResourceType = "screen-tab";
export { JiraScreenTabAriResourceType }
export { JiraScreenTabAriResourceType as JiraScreenTabAriResourceType_alias_1 }

export declare const jiraScreenTabAriStaticOpts: AriStaticProperties;

declare class JiraSecurityContainerAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _providerAppId;
    private readonly _securityContainerId;
    get siteId(): string;
    get activationId(): string;
    get providerAppId(): string;
    get securityContainerId(): string;
    static create(opts: JiraSecurityContainerAriOpts): JiraSecurityContainerAri;
    static parse(maybeAri: string): JiraSecurityContainerAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        providerAppId: string;
        securityContainerId: string;
    };
}
export { JiraSecurityContainerAri }
export { JiraSecurityContainerAri as JiraSecurityContainerAri_alias_1 }
export { JiraSecurityContainerAri as JiraSecurityContainerAri_alias_2 }

export declare interface JiraSecurityContainerAriOpts {
    siteId: string;
    activationId: string;
    providerAppId: string;
    securityContainerId: string;
}

declare const JiraSecurityContainerAriResourceOwner = "jira";
export { JiraSecurityContainerAriResourceOwner }
export { JiraSecurityContainerAriResourceOwner as JiraSecurityContainerAriResourceOwner_alias_1 }

declare const JiraSecurityContainerAriResourceType = "security-container";
export { JiraSecurityContainerAriResourceType }
export { JiraSecurityContainerAriResourceType as JiraSecurityContainerAriResourceType_alias_1 }

export declare const jiraSecurityContainerAriStaticOpts: AriStaticProperties;

declare class JiraSecurityLevelAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _securityLevelId;
    get siteId(): string;
    get activationId(): string;
    get securityLevelId(): string;
    static create(opts: JiraSecurityLevelAriOpts): JiraSecurityLevelAri;
    static parse(maybeAri: string): JiraSecurityLevelAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        securityLevelId: string;
    };
}
export { JiraSecurityLevelAri }
export { JiraSecurityLevelAri as JiraSecurityLevelAri_alias_1 }
export { JiraSecurityLevelAri as JiraSecurityLevelAri_alias_2 }

export declare interface JiraSecurityLevelAriOpts {
    siteId: string;
    activationId: string;
    securityLevelId: string;
}

declare const JiraSecurityLevelAriResourceOwner = "jira";
export { JiraSecurityLevelAriResourceOwner }
export { JiraSecurityLevelAriResourceOwner as JiraSecurityLevelAriResourceOwner_alias_1 }

declare const JiraSecurityLevelAriResourceType = "security-level";
export { JiraSecurityLevelAriResourceType }
export { JiraSecurityLevelAriResourceType as JiraSecurityLevelAriResourceType_alias_1 }

export declare const jiraSecurityLevelAriStaticOpts: AriStaticProperties;

declare class JiraSecurityWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _providerAppId;
    private readonly _securityWorkspaceId;
    get siteId(): string;
    get activationId(): string;
    get providerAppId(): string;
    get securityWorkspaceId(): string;
    static create(opts: JiraSecurityWorkspaceAriOpts): JiraSecurityWorkspaceAri;
    static parse(maybeAri: string): JiraSecurityWorkspaceAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        providerAppId: string;
        securityWorkspaceId: string;
    };
}
export { JiraSecurityWorkspaceAri }
export { JiraSecurityWorkspaceAri as JiraSecurityWorkspaceAri_alias_1 }
export { JiraSecurityWorkspaceAri as JiraSecurityWorkspaceAri_alias_2 }

export declare interface JiraSecurityWorkspaceAriOpts {
    siteId: string;
    activationId: string;
    providerAppId: string;
    securityWorkspaceId: string;
}

declare const JiraSecurityWorkspaceAriResourceOwner = "jira";
export { JiraSecurityWorkspaceAriResourceOwner }
export { JiraSecurityWorkspaceAriResourceOwner as JiraSecurityWorkspaceAriResourceOwner_alias_1 }

declare const JiraSecurityWorkspaceAriResourceType = "security-workspace";
export { JiraSecurityWorkspaceAriResourceType }
export { JiraSecurityWorkspaceAriResourceType as JiraSecurityWorkspaceAriResourceType_alias_1 }

export declare const jiraSecurityWorkspaceAriStaticOpts: AriStaticProperties;

declare class JiraServicedeskApprovalAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _approvalId;
    get activationId(): string;
    get approvalId(): string;
    static create(opts: JiraServicedeskApprovalAriOpts): JiraServicedeskApprovalAri;
    static parse(maybeAri: string): JiraServicedeskApprovalAri;
    getVariables(): {
        activationId: string;
        approvalId: string;
    };
}
export { JiraServicedeskApprovalAri }
export { JiraServicedeskApprovalAri as JiraServicedeskApprovalAri_alias_1 }
export { JiraServicedeskApprovalAri as JiraServicedeskApprovalAri_alias_2 }

export declare interface JiraServicedeskApprovalAriOpts {
    activationId: string;
    approvalId: string;
}

declare const JiraServicedeskApprovalAriResourceOwner = "jira-servicedesk";
export { JiraServicedeskApprovalAriResourceOwner }
export { JiraServicedeskApprovalAriResourceOwner as JiraServicedeskApprovalAriResourceOwner_alias_1 }

declare const JiraServicedeskApprovalAriResourceType = "approval";
export { JiraServicedeskApprovalAriResourceType }
export { JiraServicedeskApprovalAriResourceType as JiraServicedeskApprovalAriResourceType_alias_1 }

export declare const jiraServicedeskApprovalAriStaticOpts: AriStaticProperties;

declare class JiraServicedeskCalendarEventAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _calendarEventId;
    get activationId(): string;
    get calendarEventId(): string;
    static create(opts: JiraServicedeskCalendarEventAriOpts): JiraServicedeskCalendarEventAri;
    static parse(maybeAri: string): JiraServicedeskCalendarEventAri;
    getVariables(): {
        activationId: string;
        calendarEventId: string;
    };
}
export { JiraServicedeskCalendarEventAri }
export { JiraServicedeskCalendarEventAri as JiraServicedeskCalendarEventAri_alias_1 }
export { JiraServicedeskCalendarEventAri as JiraServicedeskCalendarEventAri_alias_2 }

export declare interface JiraServicedeskCalendarEventAriOpts {
    activationId: string;
    calendarEventId: string;
}

declare const JiraServicedeskCalendarEventAriResourceOwner = "jira-servicedesk";
export { JiraServicedeskCalendarEventAriResourceOwner }
export { JiraServicedeskCalendarEventAriResourceOwner as JiraServicedeskCalendarEventAriResourceOwner_alias_1 }

declare const JiraServicedeskCalendarEventAriResourceType = "calendar-event";
export { JiraServicedeskCalendarEventAriResourceType }
export { JiraServicedeskCalendarEventAriResourceType as JiraServicedeskCalendarEventAriResourceType_alias_1 }

export declare const jiraServicedeskCalendarEventAriStaticOpts: AriStaticProperties;

declare class JiraServicedeskCannedResponseAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _cannedResponseId;
    get activationId(): string;
    get cannedResponseId(): string;
    static create(opts: JiraServicedeskCannedResponseAriOpts): JiraServicedeskCannedResponseAri;
    static parse(maybeAri: string): JiraServicedeskCannedResponseAri;
    getVariables(): {
        activationId: string;
        cannedResponseId: string;
    };
}
export { JiraServicedeskCannedResponseAri }
export { JiraServicedeskCannedResponseAri as JiraServicedeskCannedResponseAri_alias_1 }
export { JiraServicedeskCannedResponseAri as JiraServicedeskCannedResponseAri_alias_2 }

export declare interface JiraServicedeskCannedResponseAriOpts {
    activationId: string;
    cannedResponseId: string;
}

declare const JiraServicedeskCannedResponseAriResourceOwner = "jira-servicedesk";
export { JiraServicedeskCannedResponseAriResourceOwner }
export { JiraServicedeskCannedResponseAriResourceOwner as JiraServicedeskCannedResponseAriResourceOwner_alias_1 }

declare const JiraServicedeskCannedResponseAriResourceType = "canned-response";
export { JiraServicedeskCannedResponseAriResourceType }
export { JiraServicedeskCannedResponseAriResourceType as JiraServicedeskCannedResponseAriResourceType_alias_1 }

export declare const jiraServicedeskCannedResponseAriStaticOpts: AriStaticProperties;

declare class JiraServicedeskOrganizationAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _organizationId;
    get activationId(): string;
    get organizationId(): string;
    static create(opts: JiraServicedeskOrganizationAriOpts): JiraServicedeskOrganizationAri;
    static parse(maybeAri: string): JiraServicedeskOrganizationAri;
    getVariables(): {
        activationId: string;
        organizationId: string;
    };
}
export { JiraServicedeskOrganizationAri }
export { JiraServicedeskOrganizationAri as JiraServicedeskOrganizationAri_alias_1 }
export { JiraServicedeskOrganizationAri as JiraServicedeskOrganizationAri_alias_2 }

export declare interface JiraServicedeskOrganizationAriOpts {
    activationId: string;
    organizationId: string;
}

declare const JiraServicedeskOrganizationAriResourceOwner = "jira-servicedesk";
export { JiraServicedeskOrganizationAriResourceOwner }
export { JiraServicedeskOrganizationAriResourceOwner as JiraServicedeskOrganizationAriResourceOwner_alias_1 }

declare const JiraServicedeskOrganizationAriResourceType = "organization";
export { JiraServicedeskOrganizationAriResourceType }
export { JiraServicedeskOrganizationAriResourceType as JiraServicedeskOrganizationAriResourceType_alias_1 }

export declare const jiraServicedeskOrganizationAriStaticOpts: AriStaticProperties;

declare class JiraServicedeskQueueAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _queueId;
    get siteId(): string;
    get activationId(): string;
    get queueId(): string;
    static create(opts: JiraServicedeskQueueAriOpts): JiraServicedeskQueueAri;
    static parse(maybeAri: string): JiraServicedeskQueueAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        queueId: string;
    };
}
export { JiraServicedeskQueueAri }
export { JiraServicedeskQueueAri as JiraServicedeskQueueAri_alias_1 }
export { JiraServicedeskQueueAri as JiraServicedeskQueueAri_alias_2 }

export declare interface JiraServicedeskQueueAriOpts {
    siteId: string;
    activationId: string;
    queueId: string;
}

declare const JiraServicedeskQueueAriResourceOwner = "jira-servicedesk";
export { JiraServicedeskQueueAriResourceOwner }
export { JiraServicedeskQueueAriResourceOwner as JiraServicedeskQueueAriResourceOwner_alias_1 }

declare const JiraServicedeskQueueAriResourceType = "queue";
export { JiraServicedeskQueueAriResourceType }
export { JiraServicedeskQueueAriResourceType as JiraServicedeskQueueAriResourceType_alias_1 }

export declare const jiraServicedeskQueueAriStaticOpts: AriStaticProperties;

declare class JiraServicedeskRequestTypeAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _requestTypeId;
    get activationId(): string;
    get requestTypeId(): string;
    static create(opts: JiraServicedeskRequestTypeAriOpts): JiraServicedeskRequestTypeAri;
    static parse(maybeAri: string): JiraServicedeskRequestTypeAri;
    getVariables(): {
        activationId: string;
        requestTypeId: string;
    };
}
export { JiraServicedeskRequestTypeAri }
export { JiraServicedeskRequestTypeAri as JiraServicedeskRequestTypeAri_alias_1 }
export { JiraServicedeskRequestTypeAri as JiraServicedeskRequestTypeAri_alias_2 }

export declare interface JiraServicedeskRequestTypeAriOpts {
    activationId: string;
    requestTypeId: string;
}

declare const JiraServicedeskRequestTypeAriResourceOwner = "jira-servicedesk";
export { JiraServicedeskRequestTypeAriResourceOwner }
export { JiraServicedeskRequestTypeAriResourceOwner as JiraServicedeskRequestTypeAriResourceOwner_alias_1 }

declare const JiraServicedeskRequestTypeAriResourceType = "request-type";
export { JiraServicedeskRequestTypeAriResourceType }
export { JiraServicedeskRequestTypeAriResourceType as JiraServicedeskRequestTypeAriResourceType_alias_1 }

export declare const jiraServicedeskRequestTypeAriStaticOpts: AriStaticProperties;

declare class JiraServicedeskRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleId;
    get roleId(): string;
    static create(opts: JiraServicedeskRoleAriOpts): JiraServicedeskRoleAri;
    static parse(maybeAri: string): JiraServicedeskRoleAri;
    getVariables(): {
        roleId: string;
    };
}
export { JiraServicedeskRoleAri }
export { JiraServicedeskRoleAri as JiraServicedeskRoleAri_alias_1 }
export { JiraServicedeskRoleAri as JiraServicedeskRoleAri_alias_2 }

export declare interface JiraServicedeskRoleAriOpts {
    roleId: string;
}

declare const JiraServicedeskRoleAriResourceOwner = "jira-servicedesk";
export { JiraServicedeskRoleAriResourceOwner }
export { JiraServicedeskRoleAriResourceOwner as JiraServicedeskRoleAriResourceOwner_alias_1 }

declare const JiraServicedeskRoleAriResourceType = "role";
export { JiraServicedeskRoleAriResourceType }
export { JiraServicedeskRoleAriResourceType as JiraServicedeskRoleAriResourceType_alias_1 }

export declare const jiraServicedeskRoleAriStaticOpts: AriStaticProperties;

declare class JiraServicedeskSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: JiraServicedeskSiteAriOpts): JiraServicedeskSiteAri;
    static parse(maybeAri: string): JiraServicedeskSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { JiraServicedeskSiteAri }
export { JiraServicedeskSiteAri as JiraServicedeskSiteAri_alias_1 }
export { JiraServicedeskSiteAri as JiraServicedeskSiteAri_alias_2 }

export declare interface JiraServicedeskSiteAriOpts {
    siteId: string;
}

declare const JiraServicedeskSiteAriResourceOwner = "jira-servicedesk";
export { JiraServicedeskSiteAriResourceOwner }
export { JiraServicedeskSiteAriResourceOwner as JiraServicedeskSiteAriResourceOwner_alias_1 }

declare const JiraServicedeskSiteAriResourceType = "site";
export { JiraServicedeskSiteAriResourceType }
export { JiraServicedeskSiteAriResourceType as JiraServicedeskSiteAriResourceType_alias_1 }

export declare const jiraServicedeskSiteAriStaticOpts: AriStaticProperties;

declare class JiraServicedeskSlaAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _slaId;
    get activationId(): string;
    get slaId(): string;
    static create(opts: JiraServicedeskSlaAriOpts): JiraServicedeskSlaAri;
    static parse(maybeAri: string): JiraServicedeskSlaAri;
    getVariables(): {
        activationId: string;
        slaId: string;
    };
}
export { JiraServicedeskSlaAri }
export { JiraServicedeskSlaAri as JiraServicedeskSlaAri_alias_1 }
export { JiraServicedeskSlaAri as JiraServicedeskSlaAri_alias_2 }

export declare interface JiraServicedeskSlaAriOpts {
    activationId: string;
    slaId: string;
}

declare const JiraServicedeskSlaAriResourceOwner = "jira-servicedesk";
export { JiraServicedeskSlaAriResourceOwner }
export { JiraServicedeskSlaAriResourceOwner as JiraServicedeskSlaAriResourceOwner_alias_1 }

declare const JiraServicedeskSlaAriResourceType = "sla";
export { JiraServicedeskSlaAriResourceType }
export { JiraServicedeskSlaAriResourceType as JiraServicedeskSlaAriResourceType_alias_1 }

export declare const jiraServicedeskSlaAriStaticOpts: AriStaticProperties;

declare class JiraSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: JiraSiteAriOpts): JiraSiteAri;
    static parse(maybeAri: string): JiraSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { JiraSiteAri }
export { JiraSiteAri as JiraSiteAri_alias_1 }
export { JiraSiteAri as JiraSiteAri_alias_2 }

export declare interface JiraSiteAriOpts {
    siteId: string;
}

declare const JiraSiteAriResourceOwner = "jira";
export { JiraSiteAriResourceOwner }
export { JiraSiteAriResourceOwner as JiraSiteAriResourceOwner_alias_1 }

declare const JiraSiteAriResourceType = "site";
export { JiraSiteAriResourceType }
export { JiraSiteAriResourceType as JiraSiteAriResourceType_alias_1 }

export declare const jiraSiteAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareBoardAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _boardId;
    get siteId(): string;
    get boardId(): string;
    static create(opts: JiraSoftwareBoardAriOpts): JiraSoftwareBoardAri;
    static parse(maybeAri: string): JiraSoftwareBoardAri;
    getVariables(): {
        siteId: string;
        boardId: string;
    };
}
export { JiraSoftwareBoardAri }
export { JiraSoftwareBoardAri as JiraSoftwareBoardAri_alias_1 }
export { JiraSoftwareBoardAri as JiraSoftwareBoardAri_alias_2 }

export declare interface JiraSoftwareBoardAriOpts {
    siteId: string;
    boardId: string;
}

declare const JiraSoftwareBoardAriResourceOwner = "jira-software";
export { JiraSoftwareBoardAriResourceOwner }
export { JiraSoftwareBoardAriResourceOwner as JiraSoftwareBoardAriResourceOwner_alias_1 }

declare const JiraSoftwareBoardAriResourceType = "board";
export { JiraSoftwareBoardAriResourceType }
export { JiraSoftwareBoardAriResourceType as JiraSoftwareBoardAriResourceType_alias_1 }

export declare const jiraSoftwareBoardAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareBoardFeatureAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _featureKey;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get featureKey(): string;
    static create(opts: JiraSoftwareBoardFeatureAriOpts): JiraSoftwareBoardFeatureAri;
    static parse(maybeAri: string): JiraSoftwareBoardFeatureAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        featureKey: string;
    };
}
export { JiraSoftwareBoardFeatureAri }
export { JiraSoftwareBoardFeatureAri as JiraSoftwareBoardFeatureAri_alias_1 }
export { JiraSoftwareBoardFeatureAri as JiraSoftwareBoardFeatureAri_alias_2 }

export declare interface JiraSoftwareBoardFeatureAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    featureKey: string;
}

declare const JiraSoftwareBoardFeatureAriResourceOwner = "jira-software";
export { JiraSoftwareBoardFeatureAriResourceOwner }
export { JiraSoftwareBoardFeatureAriResourceOwner as JiraSoftwareBoardFeatureAriResourceOwner_alias_1 }

declare const JiraSoftwareBoardFeatureAriResourceType = "board-feature";
export { JiraSoftwareBoardFeatureAriResourceType }
export { JiraSoftwareBoardFeatureAriResourceType as JiraSoftwareBoardFeatureAriResourceType_alias_1 }

export declare const jiraSoftwareBoardFeatureAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareBoardIssueListAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _issueListId;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get issueListId(): string;
    static create(opts: JiraSoftwareBoardIssueListAriOpts): JiraSoftwareBoardIssueListAri;
    static parse(maybeAri: string): JiraSoftwareBoardIssueListAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        issueListId: string;
    };
}
export { JiraSoftwareBoardIssueListAri }
export { JiraSoftwareBoardIssueListAri as JiraSoftwareBoardIssueListAri_alias_1 }
export { JiraSoftwareBoardIssueListAri as JiraSoftwareBoardIssueListAri_alias_2 }

export declare interface JiraSoftwareBoardIssueListAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    issueListId: string;
}

declare const JiraSoftwareBoardIssueListAriResourceOwner = "jira-software";
export { JiraSoftwareBoardIssueListAriResourceOwner }
export { JiraSoftwareBoardIssueListAriResourceOwner as JiraSoftwareBoardIssueListAriResourceOwner_alias_1 }

declare const JiraSoftwareBoardIssueListAriResourceType = "board-issue-list";
export { JiraSoftwareBoardIssueListAriResourceType }
export { JiraSoftwareBoardIssueListAriResourceType as JiraSoftwareBoardIssueListAriResourceType_alias_1 }

export declare const jiraSoftwareBoardIssueListAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareCardAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _cardId;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get cardId(): string;
    static create(opts: JiraSoftwareCardAriOpts): JiraSoftwareCardAri;
    static parse(maybeAri: string): JiraSoftwareCardAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        cardId: string;
    };
}
export { JiraSoftwareCardAri }
export { JiraSoftwareCardAri as JiraSoftwareCardAri_alias_1 }
export { JiraSoftwareCardAri as JiraSoftwareCardAri_alias_2 }

export declare interface JiraSoftwareCardAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    cardId: string;
}

declare const JiraSoftwareCardAriResourceOwner = "jira-software";
export { JiraSoftwareCardAriResourceOwner }
export { JiraSoftwareCardAriResourceOwner as JiraSoftwareCardAriResourceOwner_alias_1 }

declare const JiraSoftwareCardAriResourceType = "card";
export { JiraSoftwareCardAriResourceType }
export { JiraSoftwareCardAriResourceType as JiraSoftwareCardAriResourceType_alias_1 }

export declare const jiraSoftwareCardAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareCardColorAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _cardColorId;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get cardColorId(): string;
    static create(opts: JiraSoftwareCardColorAriOpts): JiraSoftwareCardColorAri;
    static parse(maybeAri: string): JiraSoftwareCardColorAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        cardColorId: string;
    };
}
export { JiraSoftwareCardColorAri }
export { JiraSoftwareCardColorAri as JiraSoftwareCardColorAri_alias_1 }
export { JiraSoftwareCardColorAri as JiraSoftwareCardColorAri_alias_2 }

export declare interface JiraSoftwareCardColorAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    cardColorId: string;
}

declare const JiraSoftwareCardColorAriResourceOwner = "jira-software";
export { JiraSoftwareCardColorAriResourceOwner }
export { JiraSoftwareCardColorAriResourceOwner as JiraSoftwareCardColorAriResourceOwner_alias_1 }

declare const JiraSoftwareCardColorAriResourceType = "card-color";
export { JiraSoftwareCardColorAriResourceType }
export { JiraSoftwareCardColorAriResourceType as JiraSoftwareCardColorAriResourceType_alias_1 }

export declare const jiraSoftwareCardColorAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareCardLayoutAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _cardLayoutId;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get cardLayoutId(): string;
    static create(opts: JiraSoftwareCardLayoutAriOpts): JiraSoftwareCardLayoutAri;
    static parse(maybeAri: string): JiraSoftwareCardLayoutAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        cardLayoutId: string;
    };
}
export { JiraSoftwareCardLayoutAri }
export { JiraSoftwareCardLayoutAri as JiraSoftwareCardLayoutAri_alias_1 }
export { JiraSoftwareCardLayoutAri as JiraSoftwareCardLayoutAri_alias_2 }

export declare interface JiraSoftwareCardLayoutAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    cardLayoutId: string;
}

declare const JiraSoftwareCardLayoutAriResourceOwner = "jira-software";
export { JiraSoftwareCardLayoutAriResourceOwner }
export { JiraSoftwareCardLayoutAriResourceOwner as JiraSoftwareCardLayoutAriResourceOwner_alias_1 }

declare const JiraSoftwareCardLayoutAriResourceType = "card-layout";
export { JiraSoftwareCardLayoutAriResourceType }
export { JiraSoftwareCardLayoutAriResourceType as JiraSoftwareCardLayoutAriResourceType_alias_1 }

export declare const jiraSoftwareCardLayoutAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareCardParentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _cardParentId;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get cardParentId(): string;
    static create(opts: JiraSoftwareCardParentAriOpts): JiraSoftwareCardParentAri;
    static parse(maybeAri: string): JiraSoftwareCardParentAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        cardParentId: string;
    };
}
export { JiraSoftwareCardParentAri }
export { JiraSoftwareCardParentAri as JiraSoftwareCardParentAri_alias_1 }
export { JiraSoftwareCardParentAri as JiraSoftwareCardParentAri_alias_2 }

export declare interface JiraSoftwareCardParentAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    cardParentId: string;
}

declare const JiraSoftwareCardParentAriResourceOwner = "jira-software";
export { JiraSoftwareCardParentAriResourceOwner }
export { JiraSoftwareCardParentAriResourceOwner as JiraSoftwareCardParentAriResourceOwner_alias_1 }

declare const JiraSoftwareCardParentAriResourceType = "card-parent";
export { JiraSoftwareCardParentAriResourceType }
export { JiraSoftwareCardParentAriResourceType as JiraSoftwareCardParentAriResourceType_alias_1 }

export declare const jiraSoftwareCardParentAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareColumnAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _columnId;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get columnId(): string;
    static create(opts: JiraSoftwareColumnAriOpts): JiraSoftwareColumnAri;
    static parse(maybeAri: string): JiraSoftwareColumnAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        columnId: string;
    };
}
export { JiraSoftwareColumnAri }
export { JiraSoftwareColumnAri as JiraSoftwareColumnAri_alias_1 }
export { JiraSoftwareColumnAri as JiraSoftwareColumnAri_alias_2 }

export declare interface JiraSoftwareColumnAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    columnId: string;
}

declare const JiraSoftwareColumnAriResourceOwner = "jira-software";
export { JiraSoftwareColumnAriResourceOwner }
export { JiraSoftwareColumnAriResourceOwner as JiraSoftwareColumnAriResourceOwner_alias_1 }

declare const JiraSoftwareColumnAriResourceType = "column";
export { JiraSoftwareColumnAriResourceType }
export { JiraSoftwareColumnAriResourceType as JiraSoftwareColumnAriResourceType_alias_1 }

export declare const jiraSoftwareColumnAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareCustomFilterAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _customFilterId;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get customFilterId(): string;
    static create(opts: JiraSoftwareCustomFilterAriOpts): JiraSoftwareCustomFilterAri;
    static parse(maybeAri: string): JiraSoftwareCustomFilterAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        customFilterId: string;
    };
}
export { JiraSoftwareCustomFilterAri }
export { JiraSoftwareCustomFilterAri as JiraSoftwareCustomFilterAri_alias_1 }
export { JiraSoftwareCustomFilterAri as JiraSoftwareCustomFilterAri_alias_2 }

export declare interface JiraSoftwareCustomFilterAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    customFilterId: string;
}

declare const JiraSoftwareCustomFilterAriResourceOwner = "jira-software";
export { JiraSoftwareCustomFilterAriResourceOwner }
export { JiraSoftwareCustomFilterAriResourceOwner as JiraSoftwareCustomFilterAriResourceOwner_alias_1 }

declare const JiraSoftwareCustomFilterAriResourceType = "custom-filter";
export { JiraSoftwareCustomFilterAriResourceType }
export { JiraSoftwareCustomFilterAriResourceType as JiraSoftwareCustomFilterAriResourceType_alias_1 }

export declare const jiraSoftwareCustomFilterAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleId;
    get roleId(): string;
    static create(opts: JiraSoftwareRoleAriOpts): JiraSoftwareRoleAri;
    static parse(maybeAri: string): JiraSoftwareRoleAri;
    getVariables(): {
        roleId: string;
    };
}
export { JiraSoftwareRoleAri }
export { JiraSoftwareRoleAri as JiraSoftwareRoleAri_alias_1 }
export { JiraSoftwareRoleAri as JiraSoftwareRoleAri_alias_2 }

export declare interface JiraSoftwareRoleAriOpts {
    roleId: string;
}

declare const JiraSoftwareRoleAriResourceOwner = "jira-software";
export { JiraSoftwareRoleAriResourceOwner }
export { JiraSoftwareRoleAriResourceOwner as JiraSoftwareRoleAriResourceOwner_alias_1 }

declare const JiraSoftwareRoleAriResourceType = "role";
export { JiraSoftwareRoleAriResourceType }
export { JiraSoftwareRoleAriResourceType as JiraSoftwareRoleAriResourceType_alias_1 }

export declare const jiraSoftwareRoleAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: JiraSoftwareSiteAriOpts): JiraSoftwareSiteAri;
    static parse(maybeAri: string): JiraSoftwareSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { JiraSoftwareSiteAri }
export { JiraSoftwareSiteAri as JiraSoftwareSiteAri_alias_1 }
export { JiraSoftwareSiteAri as JiraSoftwareSiteAri_alias_2 }

export declare interface JiraSoftwareSiteAriOpts {
    siteId: string;
}

declare const JiraSoftwareSiteAriResourceOwner = "jira-software";
export { JiraSoftwareSiteAriResourceOwner }
export { JiraSoftwareSiteAriResourceOwner as JiraSoftwareSiteAriResourceOwner_alias_1 }

declare const JiraSoftwareSiteAriResourceType = "site";
export { JiraSoftwareSiteAriResourceType }
export { JiraSoftwareSiteAriResourceType as JiraSoftwareSiteAriResourceType_alias_1 }

export declare const jiraSoftwareSiteAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareSwimlaneAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _swimlaneId;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get swimlaneId(): string;
    static create(opts: JiraSoftwareSwimlaneAriOpts): JiraSoftwareSwimlaneAri;
    static parse(maybeAri: string): JiraSoftwareSwimlaneAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        swimlaneId: string;
    };
}
export { JiraSoftwareSwimlaneAri }
export { JiraSoftwareSwimlaneAri as JiraSoftwareSwimlaneAri_alias_1 }
export { JiraSoftwareSwimlaneAri as JiraSoftwareSwimlaneAri_alias_2 }

export declare interface JiraSoftwareSwimlaneAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    swimlaneId: string;
}

declare const JiraSoftwareSwimlaneAriResourceOwner = "jira-software";
export { JiraSoftwareSwimlaneAriResourceOwner }
export { JiraSoftwareSwimlaneAriResourceOwner as JiraSoftwareSwimlaneAriResourceOwner_alias_1 }

declare const JiraSoftwareSwimlaneAriResourceType = "swimlane";
export { JiraSoftwareSwimlaneAriResourceType }
export { JiraSoftwareSwimlaneAriResourceType as JiraSoftwareSwimlaneAriResourceType_alias_1 }

export declare const jiraSoftwareSwimlaneAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareUserBoardConfigAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    static create(opts: JiraSoftwareUserBoardConfigAriOpts): JiraSoftwareUserBoardConfigAri;
    static parse(maybeAri: string): JiraSoftwareUserBoardConfigAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
    };
}
export { JiraSoftwareUserBoardConfigAri }
export { JiraSoftwareUserBoardConfigAri as JiraSoftwareUserBoardConfigAri_alias_1 }
export { JiraSoftwareUserBoardConfigAri as JiraSoftwareUserBoardConfigAri_alias_2 }

export declare interface JiraSoftwareUserBoardConfigAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
}

declare const JiraSoftwareUserBoardConfigAriResourceOwner = "jira-software";
export { JiraSoftwareUserBoardConfigAriResourceOwner }
export { JiraSoftwareUserBoardConfigAriResourceOwner as JiraSoftwareUserBoardConfigAriResourceOwner_alias_1 }

declare const JiraSoftwareUserBoardConfigAriResourceType = "user-board-config";
export { JiraSoftwareUserBoardConfigAriResourceType }
export { JiraSoftwareUserBoardConfigAriResourceType as JiraSoftwareUserBoardConfigAriResourceType_alias_1 }

export declare const jiraSoftwareUserBoardConfigAriStaticOpts: AriStaticProperties;

declare class JiraSoftwareViewConfigAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _boardId;
    private readonly _viewType;
    get siteId(): string;
    get activationId(): string;
    get boardId(): string;
    get viewType(): string;
    static create(opts: JiraSoftwareViewConfigAriOpts): JiraSoftwareViewConfigAri;
    static parse(maybeAri: string): JiraSoftwareViewConfigAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        boardId: string;
        viewType: string;
    };
}
export { JiraSoftwareViewConfigAri }
export { JiraSoftwareViewConfigAri as JiraSoftwareViewConfigAri_alias_1 }
export { JiraSoftwareViewConfigAri as JiraSoftwareViewConfigAri_alias_2 }

export declare interface JiraSoftwareViewConfigAriOpts {
    siteId: string;
    activationId: string;
    boardId: string;
    viewType: string;
}

declare const JiraSoftwareViewConfigAriResourceOwner = "jira-software";
export { JiraSoftwareViewConfigAriResourceOwner }
export { JiraSoftwareViewConfigAriResourceOwner as JiraSoftwareViewConfigAriResourceOwner_alias_1 }

declare const JiraSoftwareViewConfigAriResourceType = "view-config";
export { JiraSoftwareViewConfigAriResourceType }
export { JiraSoftwareViewConfigAriResourceType as JiraSoftwareViewConfigAriResourceType_alias_1 }

export declare const jiraSoftwareViewConfigAriStaticOpts: AriStaticProperties;

declare class JiraSprintAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _sprintId;
    get siteId(): string;
    get activationId(): string;
    get sprintId(): string;
    static create(opts: JiraSprintAriOpts): JiraSprintAri;
    static parse(maybeAri: string): JiraSprintAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        sprintId: string;
    };
}
export { JiraSprintAri }
export { JiraSprintAri as JiraSprintAri_alias_1 }
export { JiraSprintAri as JiraSprintAri_alias_2 }

export declare interface JiraSprintAriOpts {
    siteId: string;
    activationId: string;
    sprintId: string;
}

declare const JiraSprintAriResourceOwner = "jira";
export { JiraSprintAriResourceOwner }
export { JiraSprintAriResourceOwner as JiraSprintAriResourceOwner_alias_1 }

declare const JiraSprintAriResourceType = "sprint";
export { JiraSprintAriResourceType }
export { JiraSprintAriResourceType as JiraSprintAriResourceType_alias_1 }

export declare const jiraSprintAriStaticOpts: AriStaticProperties;

declare class JiraUserBroadcastMessageAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _broadcastMessageId;
    private readonly _userId;
    get siteId(): string;
    get activationId(): string;
    get broadcastMessageId(): string;
    get userId(): string;
    static create(opts: JiraUserBroadcastMessageAriOpts): JiraUserBroadcastMessageAri;
    static parse(maybeAri: string): JiraUserBroadcastMessageAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        broadcastMessageId: string;
        userId: string;
    };
}
export { JiraUserBroadcastMessageAri }
export { JiraUserBroadcastMessageAri as JiraUserBroadcastMessageAri_alias_1 }
export { JiraUserBroadcastMessageAri as JiraUserBroadcastMessageAri_alias_2 }

export declare interface JiraUserBroadcastMessageAriOpts {
    siteId: string;
    activationId: string;
    broadcastMessageId: string;
    userId: string;
}

declare const JiraUserBroadcastMessageAriResourceOwner = "jira";
export { JiraUserBroadcastMessageAriResourceOwner }
export { JiraUserBroadcastMessageAriResourceOwner as JiraUserBroadcastMessageAriResourceOwner_alias_1 }

declare const JiraUserBroadcastMessageAriResourceType = "user-broadcast-message";
export { JiraUserBroadcastMessageAriResourceType }
export { JiraUserBroadcastMessageAriResourceType as JiraUserBroadcastMessageAriResourceType_alias_1 }

export declare const jiraUserBroadcastMessageAriStaticOpts: AriStaticProperties;

declare class JiraVersionApproverAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _versionId;
    private readonly _approverId;
    get siteId(): string;
    get activationId(): string;
    get versionId(): string;
    get approverId(): string;
    static create(opts: JiraVersionApproverAriOpts): JiraVersionApproverAri;
    static parse(maybeAri: string): JiraVersionApproverAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        versionId: string;
        approverId: string;
    };
}
export { JiraVersionApproverAri }
export { JiraVersionApproverAri as JiraVersionApproverAri_alias_1 }
export { JiraVersionApproverAri as JiraVersionApproverAri_alias_2 }

export declare interface JiraVersionApproverAriOpts {
    siteId: string;
    activationId: string;
    versionId: string;
    approverId: string;
}

declare const JiraVersionApproverAriResourceOwner = "jira";
export { JiraVersionApproverAriResourceOwner }
export { JiraVersionApproverAriResourceOwner as JiraVersionApproverAriResourceOwner_alias_1 }

declare const JiraVersionApproverAriResourceType = "version-approver";
export { JiraVersionApproverAriResourceType }
export { JiraVersionApproverAriResourceType as JiraVersionApproverAriResourceType_alias_1 }

export declare const jiraVersionApproverAriStaticOpts: AriStaticProperties;

declare class JiraVersionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _versionId;
    get siteId(): string;
    get activationId(): string;
    get versionId(): string;
    static create(opts: JiraVersionAriOpts): JiraVersionAri;
    static parse(maybeAri: string): JiraVersionAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        versionId: string;
    };
}
export { JiraVersionAri }
export { JiraVersionAri as JiraVersionAri_alias_1 }
export { JiraVersionAri as JiraVersionAri_alias_2 }

export declare interface JiraVersionAriOpts {
    siteId: string;
    activationId: string;
    versionId: string;
}

declare const JiraVersionAriResourceOwner = "jira";
export { JiraVersionAriResourceOwner }
export { JiraVersionAriResourceOwner as JiraVersionAriResourceOwner_alias_1 }

declare const JiraVersionAriResourceType = "version";
export { JiraVersionAriResourceType }
export { JiraVersionAriResourceType as JiraVersionAriResourceType_alias_1 }

export declare const jiraVersionAriStaticOpts: AriStaticProperties;

declare class JiraVulnerabilityAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _vulnerabilityId;
    get siteId(): string;
    get activationId(): string;
    get vulnerabilityId(): string;
    static create(opts: JiraVulnerabilityAriOpts): JiraVulnerabilityAri;
    static parse(maybeAri: string): JiraVulnerabilityAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        vulnerabilityId: string;
    };
}
export { JiraVulnerabilityAri }
export { JiraVulnerabilityAri as JiraVulnerabilityAri_alias_1 }
export { JiraVulnerabilityAri as JiraVulnerabilityAri_alias_2 }

export declare interface JiraVulnerabilityAriOpts {
    siteId: string;
    activationId: string;
    vulnerabilityId: string;
}

declare const JiraVulnerabilityAriResourceOwner = "jira";
export { JiraVulnerabilityAriResourceOwner }
export { JiraVulnerabilityAriResourceOwner as JiraVulnerabilityAriResourceOwner_alias_1 }

declare const JiraVulnerabilityAriResourceType = "vulnerability";
export { JiraVulnerabilityAriResourceType }
export { JiraVulnerabilityAriResourceType as JiraVulnerabilityAriResourceType_alias_1 }

export declare const jiraVulnerabilityAriStaticOpts: AriStaticProperties;

declare class JiraVulnerabilityHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _vulnerabilityId;
    private readonly _updateSequenceNumber;
    get siteId(): string;
    get activationId(): string;
    get vulnerabilityId(): string;
    get updateSequenceNumber(): string;
    static create(opts: JiraVulnerabilityHistoryAriOpts): JiraVulnerabilityHistoryAri;
    static parse(maybeAri: string): JiraVulnerabilityHistoryAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        vulnerabilityId: string;
        updateSequenceNumber: string;
    };
}
export { JiraVulnerabilityHistoryAri }
export { JiraVulnerabilityHistoryAri as JiraVulnerabilityHistoryAri_alias_1 }
export { JiraVulnerabilityHistoryAri as JiraVulnerabilityHistoryAri_alias_2 }

export declare interface JiraVulnerabilityHistoryAriOpts {
    siteId: string;
    activationId: string;
    vulnerabilityId: string;
    updateSequenceNumber: string;
}

declare const JiraVulnerabilityHistoryAriResourceOwner = "jira";
export { JiraVulnerabilityHistoryAriResourceOwner }
export { JiraVulnerabilityHistoryAriResourceOwner as JiraVulnerabilityHistoryAriResourceOwner_alias_1 }

declare const JiraVulnerabilityHistoryAriResourceType = "vulnerability-history";
export { JiraVulnerabilityHistoryAriResourceType }
export { JiraVulnerabilityHistoryAriResourceType as JiraVulnerabilityHistoryAriResourceType_alias_1 }

export declare const jiraVulnerabilityHistoryAriStaticOpts: AriStaticProperties;

declare class JiraWorkflowAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _workflowId;
    get siteId(): string;
    get activationId(): string;
    get workflowId(): string;
    static create(opts: JiraWorkflowAriOpts): JiraWorkflowAri;
    static parse(maybeAri: string): JiraWorkflowAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        workflowId: string;
    };
}
export { JiraWorkflowAri }
export { JiraWorkflowAri as JiraWorkflowAri_alias_1 }
export { JiraWorkflowAri as JiraWorkflowAri_alias_2 }

export declare interface JiraWorkflowAriOpts {
    siteId: string;
    activationId: string;
    workflowId: string;
}

declare const JiraWorkflowAriResourceOwner = "jira";
export { JiraWorkflowAriResourceOwner }
export { JiraWorkflowAriResourceOwner as JiraWorkflowAriResourceOwner_alias_1 }

declare const JiraWorkflowAriResourceType = "workflow";
export { JiraWorkflowAriResourceType }
export { JiraWorkflowAriResourceType as JiraWorkflowAriResourceType_alias_1 }

export declare const jiraWorkflowAriStaticOpts: AriStaticProperties;

declare class JiraWorkflowSchemeAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    private readonly _workflowSchemeId;
    get siteId(): string;
    get activationId(): string;
    get workflowSchemeId(): string;
    static create(opts: JiraWorkflowSchemeAriOpts): JiraWorkflowSchemeAri;
    static parse(maybeAri: string): JiraWorkflowSchemeAri;
    getVariables(): {
        siteId: string;
        activationId: string;
        workflowSchemeId: string;
    };
}
export { JiraWorkflowSchemeAri }
export { JiraWorkflowSchemeAri as JiraWorkflowSchemeAri_alias_1 }
export { JiraWorkflowSchemeAri as JiraWorkflowSchemeAri_alias_2 }

export declare interface JiraWorkflowSchemeAriOpts {
    siteId: string;
    activationId: string;
    workflowSchemeId: string;
}

declare const JiraWorkflowSchemeAriResourceOwner = "jira";
export { JiraWorkflowSchemeAriResourceOwner }
export { JiraWorkflowSchemeAriResourceOwner as JiraWorkflowSchemeAriResourceOwner_alias_1 }

declare const JiraWorkflowSchemeAriResourceType = "workflow-scheme";
export { JiraWorkflowSchemeAriResourceType }
export { JiraWorkflowSchemeAriResourceType as JiraWorkflowSchemeAriResourceType_alias_1 }

export declare const jiraWorkflowSchemeAriStaticOpts: AriStaticProperties;

declare class JiraWorklogAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _worklogId;
    get siteId(): string;
    get worklogId(): string;
    static create(opts: JiraWorklogAriOpts): JiraWorklogAri;
    static parse(maybeAri: string): JiraWorklogAri;
    getVariables(): {
        siteId: string;
        worklogId: string;
    };
}
export { JiraWorklogAri }
export { JiraWorklogAri as JiraWorklogAri_alias_1 }
export { JiraWorklogAri as JiraWorklogAri_alias_2 }

export declare interface JiraWorklogAriOpts {
    siteId: string;
    worklogId: string;
}

declare const JiraWorklogAriResourceOwner = "jira";
export { JiraWorklogAriResourceOwner }
export { JiraWorklogAriResourceOwner as JiraWorklogAriResourceOwner_alias_1 }

declare const JiraWorklogAriResourceType = "worklog";
export { JiraWorklogAriResourceType }
export { JiraWorklogAriResourceType as JiraWorklogAriResourceType_alias_1 }

export declare const jiraWorklogAriStaticOpts: AriStaticProperties;

declare class JiraWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    get siteId(): string;
    get activationId(): string;
    static create(opts: JiraWorkspaceAriOpts): JiraWorkspaceAri;
    static parse(maybeAri: string): JiraWorkspaceAri;
    getVariables(): {
        siteId: string;
        activationId: string;
    };
}
export { JiraWorkspaceAri }
export { JiraWorkspaceAri as JiraWorkspaceAri_alias_1 }
export { JiraWorkspaceAri as JiraWorkspaceAri_alias_2 }

export declare interface JiraWorkspaceAriOpts {
    siteId: string;
    activationId: string;
}

declare const JiraWorkspaceAriResourceOwner = "jira";
export { JiraWorkspaceAriResourceOwner }
export { JiraWorkspaceAriResourceOwner as JiraWorkspaceAriResourceOwner_alias_1 }

declare const JiraWorkspaceAriResourceType = "workspace";
export { JiraWorkspaceAriResourceType }
export { JiraWorkspaceAriResourceType as JiraWorkspaceAriResourceType_alias_1 }

export declare const jiraWorkspaceAriStaticOpts: AriStaticProperties;

export declare const JobProfileType: "job-profile";

export declare const JobType: "job";

export declare const LakeConnectionType: "lake-connection";

export declare const LayoutType: "layout";

export declare const LearningType: "learning";

export declare const LifecycleResourcePackageType: "lifecycle-resource-package";

export declare const LifecycleResourcePackageTypeType: "lifecycle-resource-package-type";

export declare const LifecycleResourceType: "lifecycle-resource";

export declare const LinkedAccountType: "linked-account";

declare class LinkingPlatformDatasourceAri extends RegisteredAri {
    private constructor();
    private readonly _datasourceId;
    get datasourceId(): string;
    static create(opts: LinkingPlatformDatasourceAriOpts): LinkingPlatformDatasourceAri;
    static parse(maybeAri: string): LinkingPlatformDatasourceAri;
    getVariables(): {
        datasourceId: string;
    };
}
export { LinkingPlatformDatasourceAri }
export { LinkingPlatformDatasourceAri as LinkingPlatformDatasourceAri_alias_1 }
export { LinkingPlatformDatasourceAri as LinkingPlatformDatasourceAri_alias_2 }

export declare interface LinkingPlatformDatasourceAriOpts {
    datasourceId: string;
}

declare const LinkingPlatformDatasourceAriResourceOwner = "linking-platform";
export { LinkingPlatformDatasourceAriResourceOwner }
export { LinkingPlatformDatasourceAriResourceOwner as LinkingPlatformDatasourceAriResourceOwner_alias_1 }

declare const LinkingPlatformDatasourceAriResourceType = "datasource";
export { LinkingPlatformDatasourceAriResourceType }
export { LinkingPlatformDatasourceAriResourceType as LinkingPlatformDatasourceAriResourceType_alias_1 }

export declare const linkingPlatformDatasourceAriStaticOpts: AriStaticProperties;

export declare const LinkType: "link";

export declare const ListType: "list";

export declare const LongRunningTaskType: "long-running-task";

declare class LoomSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: LoomSiteAriOpts): LoomSiteAri;
    static parse(maybeAri: string): LoomSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { LoomSiteAri }
export { LoomSiteAri as LoomSiteAri_alias_1 }
export { LoomSiteAri as LoomSiteAri_alias_2 }

export declare interface LoomSiteAriOpts {
    siteId: string;
}

declare const LoomSiteAriResourceOwner = "loom";
export { LoomSiteAriResourceOwner }
export { LoomSiteAriResourceOwner as LoomSiteAriResourceOwner_alias_1 }

declare const LoomSiteAriResourceType = "site";
export { LoomSiteAriResourceType }
export { LoomSiteAriResourceType as LoomSiteAriResourceType_alias_1 }

export declare const loomSiteAriStaticOpts: AriStaticProperties;

declare class MakerSpaceGroupAri extends RegisteredAri {
    private constructor();
    private readonly _groupId;
    get groupId(): string;
    static create(opts: MakerSpaceGroupAriOpts): MakerSpaceGroupAri;
    static parse(maybeAri: string): MakerSpaceGroupAri;
    getVariables(): {
        groupId: string;
    };
}
export { MakerSpaceGroupAri }
export { MakerSpaceGroupAri as MakerSpaceGroupAri_alias_1 }
export { MakerSpaceGroupAri as MakerSpaceGroupAri_alias_2 }

export declare interface MakerSpaceGroupAriOpts {
    groupId: string;
}

declare const MakerSpaceGroupAriResourceOwner = "maker-space";
export { MakerSpaceGroupAriResourceOwner }
export { MakerSpaceGroupAriResourceOwner as MakerSpaceGroupAriResourceOwner_alias_1 }

declare const MakerSpaceGroupAriResourceType = "group";
export { MakerSpaceGroupAriResourceType }
export { MakerSpaceGroupAriResourceType as MakerSpaceGroupAriResourceType_alias_1 }

export declare const makerSpaceGroupAriStaticOpts: AriStaticProperties;

declare class MapiRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleTypeId;
    get roleTypeId(): string;
    static create(opts: MapiRoleAriOpts): MapiRoleAri;
    static parse(maybeAri: string): MapiRoleAri;
    getVariables(): {
        roleTypeId: string;
    };
}
export { MapiRoleAri }
export { MapiRoleAri as MapiRoleAri_alias_1 }
export { MapiRoleAri as MapiRoleAri_alias_2 }

export declare interface MapiRoleAriOpts {
    roleTypeId: string;
}

declare const MapiRoleAriResourceOwner = "mapi";
export { MapiRoleAriResourceOwner }
export { MapiRoleAriResourceOwner as MapiRoleAriResourceOwner_alias_1 }

declare const MapiRoleAriResourceType = "role";
export { MapiRoleAriResourceType }
export { MapiRoleAriResourceType as MapiRoleAriResourceType_alias_1 }

export declare const mapiRoleAriStaticOpts: AriStaticProperties;

declare class MarketingCustomerDomainAri extends RegisteredAri {
    private constructor();
    private readonly _domainBase64;
    get domainBase64(): string;
    static create(opts: MarketingCustomerDomainAriOpts): MarketingCustomerDomainAri;
    static parse(maybeAri: string): MarketingCustomerDomainAri;
    getVariables(): {
        domainBase64: string;
    };
}
export { MarketingCustomerDomainAri }
export { MarketingCustomerDomainAri as MarketingCustomerDomainAri_alias_1 }
export { MarketingCustomerDomainAri as MarketingCustomerDomainAri_alias_2 }

export declare interface MarketingCustomerDomainAriOpts {
    domainBase64: string;
}

declare const MarketingCustomerDomainAriResourceOwner = "marketing";
export { MarketingCustomerDomainAriResourceOwner }
export { MarketingCustomerDomainAriResourceOwner as MarketingCustomerDomainAriResourceOwner_alias_1 }

declare const MarketingCustomerDomainAriResourceType = "customer-domain";
export { MarketingCustomerDomainAriResourceType }
export { MarketingCustomerDomainAriResourceType as MarketingCustomerDomainAriResourceType_alias_1 }

export declare const marketingCustomerDomainAriStaticOpts: AriStaticProperties;

declare class MarketplaceTeamAri extends RegisteredAri {
    private constructor();
    private readonly _teamId;
    get teamId(): string;
    static create(opts: MarketplaceTeamAriOpts): MarketplaceTeamAri;
    static parse(maybeAri: string): MarketplaceTeamAri;
    getVariables(): {
        teamId: string;
    };
}
export { MarketplaceTeamAri }
export { MarketplaceTeamAri as MarketplaceTeamAri_alias_1 }
export { MarketplaceTeamAri as MarketplaceTeamAri_alias_2 }

export declare interface MarketplaceTeamAriOpts {
    teamId: string;
}

declare const MarketplaceTeamAriResourceOwner = "marketplace";
export { MarketplaceTeamAriResourceOwner }
export { MarketplaceTeamAriResourceOwner as MarketplaceTeamAriResourceOwner_alias_1 }

declare const MarketplaceTeamAriResourceType = "team";
export { MarketplaceTeamAriResourceType }
export { MarketplaceTeamAriResourceType as MarketplaceTeamAriResourceType_alias_1 }

export declare const marketplaceTeamAriStaticOpts: AriStaticProperties;

declare class MeasurementEmailUuidAri extends RegisteredAri {
    private constructor();
    private readonly _emailId;
    get emailId(): string;
    static create(opts: MeasurementEmailUuidAriOpts): MeasurementEmailUuidAri;
    static parse(maybeAri: string): MeasurementEmailUuidAri;
    getVariables(): {
        emailId: string;
    };
}
export { MeasurementEmailUuidAri }
export { MeasurementEmailUuidAri as MeasurementEmailUuidAri_alias_1 }
export { MeasurementEmailUuidAri as MeasurementEmailUuidAri_alias_2 }

export declare interface MeasurementEmailUuidAriOpts {
    emailId: string;
}

declare const MeasurementEmailUuidAriResourceOwner = "measurement";
export { MeasurementEmailUuidAriResourceOwner }
export { MeasurementEmailUuidAriResourceOwner as MeasurementEmailUuidAriResourceOwner_alias_1 }

declare const MeasurementEmailUuidAriResourceType = "email-uuid";
export { MeasurementEmailUuidAriResourceType }
export { MeasurementEmailUuidAriResourceType as MeasurementEmailUuidAriResourceType_alias_1 }

export declare const measurementEmailUuidAriStaticOpts: AriStaticProperties;

declare class MeasurementSiteUserAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _aaId;
    get siteId(): string;
    get aaId(): string;
    static create(opts: MeasurementSiteUserAriOpts): MeasurementSiteUserAri;
    static parse(maybeAri: string): MeasurementSiteUserAri;
    getVariables(): {
        siteId: string;
        aaId: string;
    };
}
export { MeasurementSiteUserAri }
export { MeasurementSiteUserAri as MeasurementSiteUserAri_alias_1 }
export { MeasurementSiteUserAri as MeasurementSiteUserAri_alias_2 }

export declare interface MeasurementSiteUserAriOpts {
    siteId: string;
    aaId: string;
}

declare const MeasurementSiteUserAriResourceOwner = "measurement";
export { MeasurementSiteUserAriResourceOwner }
export { MeasurementSiteUserAriResourceOwner as MeasurementSiteUserAriResourceOwner_alias_1 }

declare const MeasurementSiteUserAriResourceType = "site-user";
export { MeasurementSiteUserAriResourceType }
export { MeasurementSiteUserAriResourceType as MeasurementSiteUserAriResourceType_alias_1 }

export declare const measurementSiteUserAriStaticOpts: AriStaticProperties;

declare class MeasurementUserAri extends RegisteredAri {
    private constructor();
    private readonly _anonUserId;
    get anonUserId(): string;
    static create(opts: MeasurementUserAriOpts): MeasurementUserAri;
    static parse(maybeAri: string): MeasurementUserAri;
    getVariables(): {
        anonUserId: string;
    };
}
export { MeasurementUserAri }
export { MeasurementUserAri as MeasurementUserAri_alias_1 }
export { MeasurementUserAri as MeasurementUserAri_alias_2 }

export declare interface MeasurementUserAriOpts {
    anonUserId: string;
}

declare const MeasurementUserAriResourceOwner = "measurement";
export { MeasurementUserAriResourceOwner }
export { MeasurementUserAriResourceOwner as MeasurementUserAriResourceOwner_alias_1 }

declare const MeasurementUserAriResourceType = "user";
export { MeasurementUserAriResourceType }
export { MeasurementUserAriResourceType as MeasurementUserAriResourceType_alias_1 }

export declare const measurementUserAriStaticOpts: AriStaticProperties;

declare class MediaFileAri extends RegisteredAri {
    private constructor();
    private readonly _fileId;
    get fileId(): string;
    static create(opts: MediaFileAriOpts): MediaFileAri;
    static parse(maybeAri: string): MediaFileAri;
    getVariables(): {
        fileId: string;
    };
}
export { MediaFileAri }
export { MediaFileAri as MediaFileAri_alias_1 }
export { MediaFileAri as MediaFileAri_alias_2 }

export declare interface MediaFileAriOpts {
    fileId: string;
}

declare const MediaFileAriResourceOwner = "media";
export { MediaFileAriResourceOwner }
export { MediaFileAriResourceOwner as MediaFileAriResourceOwner_alias_1 }

declare const MediaFileAriResourceType = "file";
export { MediaFileAriResourceType }
export { MediaFileAriResourceType as MediaFileAriResourceType_alias_1 }

export declare const mediaFileAriStaticOpts: AriStaticProperties;

declare class MercuryCommentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _commentUuid;
    get siteId(): string;
    get workspaceId(): string;
    get commentUuid(): string;
    static create(opts: MercuryCommentAriOpts): MercuryCommentAri;
    static parse(maybeAri: string): MercuryCommentAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        commentUuid: string;
    };
}
export { MercuryCommentAri }
export { MercuryCommentAri as MercuryCommentAri_alias_1 }
export { MercuryCommentAri as MercuryCommentAri_alias_2 }

export declare interface MercuryCommentAriOpts {
    siteId: string;
    workspaceId: string;
    commentUuid: string;
}

declare const MercuryCommentAriResourceOwner = "mercury";
export { MercuryCommentAriResourceOwner }
export { MercuryCommentAriResourceOwner as MercuryCommentAriResourceOwner_alias_1 }

declare const MercuryCommentAriResourceType = "comment";
export { MercuryCommentAriResourceType }
export { MercuryCommentAriResourceType as MercuryCommentAriResourceType_alias_1 }

export declare const mercuryCommentAriStaticOpts: AriStaticProperties;

declare class MercuryFocusAreaAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _focusAreaId;
    get siteId(): string;
    get workspaceId(): string;
    get focusAreaId(): string;
    static create(opts: MercuryFocusAreaAriOpts): MercuryFocusAreaAri;
    static parse(maybeAri: string): MercuryFocusAreaAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        focusAreaId: string;
    };
}
export { MercuryFocusAreaAri }
export { MercuryFocusAreaAri as MercuryFocusAreaAri_alias_1 }
export { MercuryFocusAreaAri as MercuryFocusAreaAri_alias_2 }

export declare interface MercuryFocusAreaAriOpts {
    siteId: string;
    workspaceId: string;
    focusAreaId: string;
}

declare const MercuryFocusAreaAriResourceOwner = "mercury";
export { MercuryFocusAreaAriResourceOwner }
export { MercuryFocusAreaAriResourceOwner as MercuryFocusAreaAriResourceOwner_alias_1 }

declare const MercuryFocusAreaAriResourceType = "focus-area";
export { MercuryFocusAreaAriResourceType }
export { MercuryFocusAreaAriResourceType as MercuryFocusAreaAriResourceType_alias_1 }

export declare const mercuryFocusAreaAriStaticOpts: AriStaticProperties;

declare class MercuryFocusAreaStatusUpdateAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _focusAreaStatusUpdateId;
    get siteId(): string;
    get workspaceId(): string;
    get focusAreaStatusUpdateId(): string;
    static create(opts: MercuryFocusAreaStatusUpdateAriOpts): MercuryFocusAreaStatusUpdateAri;
    static parse(maybeAri: string): MercuryFocusAreaStatusUpdateAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        focusAreaStatusUpdateId: string;
    };
}
export { MercuryFocusAreaStatusUpdateAri }
export { MercuryFocusAreaStatusUpdateAri as MercuryFocusAreaStatusUpdateAri_alias_1 }
export { MercuryFocusAreaStatusUpdateAri as MercuryFocusAreaStatusUpdateAri_alias_2 }

export declare interface MercuryFocusAreaStatusUpdateAriOpts {
    siteId: string;
    workspaceId: string;
    focusAreaStatusUpdateId: string;
}

declare const MercuryFocusAreaStatusUpdateAriResourceOwner = "mercury";
export { MercuryFocusAreaStatusUpdateAriResourceOwner }
export { MercuryFocusAreaStatusUpdateAriResourceOwner as MercuryFocusAreaStatusUpdateAriResourceOwner_alias_1 }

declare const MercuryFocusAreaStatusUpdateAriResourceType = "focus-area-status-update";
export { MercuryFocusAreaStatusUpdateAriResourceType }
export { MercuryFocusAreaStatusUpdateAriResourceType as MercuryFocusAreaStatusUpdateAriResourceType_alias_1 }

export declare const mercuryFocusAreaStatusUpdateAriStaticOpts: AriStaticProperties;

declare class MercuryProgramAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _programId;
    get siteId(): string;
    get workspaceId(): string;
    get programId(): string;
    static create(opts: MercuryProgramAriOpts): MercuryProgramAri;
    static parse(maybeAri: string): MercuryProgramAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        programId: string;
    };
}
export { MercuryProgramAri }
export { MercuryProgramAri as MercuryProgramAri_alias_1 }
export { MercuryProgramAri as MercuryProgramAri_alias_2 }

export declare interface MercuryProgramAriOpts {
    siteId: string;
    workspaceId: string;
    programId: string;
}

declare const MercuryProgramAriResourceOwner = "mercury";
export { MercuryProgramAriResourceOwner }
export { MercuryProgramAriResourceOwner as MercuryProgramAriResourceOwner_alias_1 }

declare const MercuryProgramAriResourceType = "program";
export { MercuryProgramAriResourceType }
export { MercuryProgramAriResourceType as MercuryProgramAriResourceType_alias_1 }

export declare const mercuryProgramAriStaticOpts: AriStaticProperties;

declare class MercuryProgramStatusUpdateAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    private readonly _programStatusUpdateId;
    get siteId(): string;
    get workspaceId(): string;
    get programStatusUpdateId(): string;
    static create(opts: MercuryProgramStatusUpdateAriOpts): MercuryProgramStatusUpdateAri;
    static parse(maybeAri: string): MercuryProgramStatusUpdateAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
        programStatusUpdateId: string;
    };
}
export { MercuryProgramStatusUpdateAri }
export { MercuryProgramStatusUpdateAri as MercuryProgramStatusUpdateAri_alias_1 }
export { MercuryProgramStatusUpdateAri as MercuryProgramStatusUpdateAri_alias_2 }

export declare interface MercuryProgramStatusUpdateAriOpts {
    siteId: string;
    workspaceId: string;
    programStatusUpdateId: string;
}

declare const MercuryProgramStatusUpdateAriResourceOwner = "mercury";
export { MercuryProgramStatusUpdateAriResourceOwner }
export { MercuryProgramStatusUpdateAriResourceOwner as MercuryProgramStatusUpdateAriResourceOwner_alias_1 }

declare const MercuryProgramStatusUpdateAriResourceType = "program-status-update";
export { MercuryProgramStatusUpdateAriResourceType }
export { MercuryProgramStatusUpdateAriResourceType as MercuryProgramStatusUpdateAriResourceType_alias_1 }

export declare const mercuryProgramStatusUpdateAriStaticOpts: AriStaticProperties;

declare class MercuryRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleType;
    get roleType(): string;
    static create(opts: MercuryRoleAriOpts): MercuryRoleAri;
    static parse(maybeAri: string): MercuryRoleAri;
    getVariables(): {
        roleType: string;
    };
}
export { MercuryRoleAri }
export { MercuryRoleAri as MercuryRoleAri_alias_1 }
export { MercuryRoleAri as MercuryRoleAri_alias_2 }

export declare interface MercuryRoleAriOpts {
    roleType: string;
}

declare const MercuryRoleAriResourceOwner = "mercury";
export { MercuryRoleAriResourceOwner }
export { MercuryRoleAriResourceOwner as MercuryRoleAriResourceOwner_alias_1 }

declare const MercuryRoleAriResourceType = "role";
export { MercuryRoleAriResourceType }
export { MercuryRoleAriResourceType as MercuryRoleAriResourceType_alias_1 }

export declare const mercuryRoleAriStaticOpts: AriStaticProperties;

declare class MercurySiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: MercurySiteAriOpts): MercurySiteAri;
    static parse(maybeAri: string): MercurySiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { MercurySiteAri }
export { MercurySiteAri as MercurySiteAri_alias_1 }
export { MercurySiteAri as MercurySiteAri_alias_2 }

export declare interface MercurySiteAriOpts {
    siteId: string;
}

declare const MercurySiteAriResourceOwner = "mercury";
export { MercurySiteAriResourceOwner }
export { MercurySiteAriResourceOwner as MercurySiteAriResourceOwner_alias_1 }

declare const MercurySiteAriResourceType = "site";
export { MercurySiteAriResourceType }
export { MercurySiteAriResourceType as MercurySiteAriResourceType_alias_1 }

export declare const mercurySiteAriStaticOpts: AriStaticProperties;

declare class MercuryWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _workspaceId;
    get siteId(): string;
    get workspaceId(): string;
    static create(opts: MercuryWorkspaceAriOpts): MercuryWorkspaceAri;
    static parse(maybeAri: string): MercuryWorkspaceAri;
    getVariables(): {
        siteId: string;
        workspaceId: string;
    };
}
export { MercuryWorkspaceAri }
export { MercuryWorkspaceAri as MercuryWorkspaceAri_alias_1 }
export { MercuryWorkspaceAri as MercuryWorkspaceAri_alias_2 }

export declare interface MercuryWorkspaceAriOpts {
    siteId: string;
    workspaceId: string;
}

declare const MercuryWorkspaceAriResourceOwner = "mercury";
export { MercuryWorkspaceAriResourceOwner }
export { MercuryWorkspaceAriResourceOwner as MercuryWorkspaceAriResourceOwner_alias_1 }

declare const MercuryWorkspaceAriResourceType = "workspace";
export { MercuryWorkspaceAriResourceType }
export { MercuryWorkspaceAriResourceType as MercuryWorkspaceAriResourceType_alias_1 }

export declare const mercuryWorkspaceAriStaticOpts: AriStaticProperties;

export declare const MessageInstanceType: "message-instance";

export declare const MessageTemplateType: "message-template";

export declare const MessageType: "message";

export declare const MetricDefinitionType: "metric-definition";

export declare const MetricSourceType: "metric-source";

declare class MicrosoftChannelAri extends RegisteredAri {
    private constructor();
    private readonly _tenantId;
    private readonly _teamId;
    private readonly _channelId;
    get tenantId(): string;
    get teamId(): string;
    get channelId(): string;
    static create(opts: MicrosoftChannelAriOpts): MicrosoftChannelAri;
    static parse(maybeAri: string): MicrosoftChannelAri;
    getVariables(): {
        tenantId: string;
        teamId: string;
        channelId: string;
    };
}
export { MicrosoftChannelAri }
export { MicrosoftChannelAri as MicrosoftChannelAri_alias_1 }
export { MicrosoftChannelAri as MicrosoftChannelAri_alias_2 }

export declare interface MicrosoftChannelAriOpts {
    tenantId: string;
    teamId: string;
    channelId: string;
}

declare const MicrosoftChannelAriResourceOwner = "microsoft";
export { MicrosoftChannelAriResourceOwner }
export { MicrosoftChannelAriResourceOwner as MicrosoftChannelAriResourceOwner_alias_1 }

declare const MicrosoftChannelAriResourceType = "channel";
export { MicrosoftChannelAriResourceType }
export { MicrosoftChannelAriResourceType as MicrosoftChannelAriResourceType_alias_1 }

export declare const microsoftChannelAriStaticOpts: AriStaticProperties;

declare class MicrosoftSharepointDocumentAri extends RegisteredAri {
    private constructor();
    private readonly _driveId;
    private readonly _fileId;
    get driveId(): string;
    get fileId(): string;
    static create(opts: MicrosoftSharepointDocumentAriOpts): MicrosoftSharepointDocumentAri;
    static parse(maybeAri: string): MicrosoftSharepointDocumentAri;
    getVariables(): {
        driveId: string;
        fileId: string;
    };
}
export { MicrosoftSharepointDocumentAri }
export { MicrosoftSharepointDocumentAri as MicrosoftSharepointDocumentAri_alias_1 }
export { MicrosoftSharepointDocumentAri as MicrosoftSharepointDocumentAri_alias_2 }

export declare interface MicrosoftSharepointDocumentAriOpts {
    driveId: string;
    fileId: string;
}

declare const MicrosoftSharepointDocumentAriResourceOwner = "microsoft";
export { MicrosoftSharepointDocumentAriResourceOwner }
export { MicrosoftSharepointDocumentAriResourceOwner as MicrosoftSharepointDocumentAriResourceOwner_alias_1 }

declare const MicrosoftSharepointDocumentAriResourceType = "sharepoint-document";
export { MicrosoftSharepointDocumentAriResourceType }
export { MicrosoftSharepointDocumentAriResourceType as MicrosoftSharepointDocumentAriResourceType_alias_1 }

export declare const microsoftSharepointDocumentAriStaticOpts: AriStaticProperties;

export declare const NamespaceType: "namespace";

export declare const NavigationConfigType: "navigation-config";

export declare const NavigationItemType: "navigation-item";

export declare const NoteType: "note";

export declare const NotificationType: "notification";

export declare const NotificationTypeSchemeType: "notification-type-scheme";

export declare const NotificationTypeType: "notification-type";

export declare const NotificationUserPreferenceType: "notification-user-preference";

export declare const NUMBER_OF_ARI_SEGMENTS = 5;

export declare const NUMBER_OF_ARM_SEGMENTS = 5;

export declare const NUMBER_OF_ATI_SEGMENTS = 4;

export declare const NUMBER_OF_BASE_SEGMENTS = 5;

declare class OauthClientAri extends RegisteredAri {
    private constructor();
    private readonly _clientId;
    get clientId(): string;
    static create(opts: OauthClientAriOpts): OauthClientAri;
    static parse(maybeAri: string): OauthClientAri;
    getVariables(): {
        clientId: string;
    };
}
export { OauthClientAri }
export { OauthClientAri as OauthClientAri_alias_1 }
export { OauthClientAri as OauthClientAri_alias_2 }

export declare interface OauthClientAriOpts {
    clientId: string;
}

declare const OauthClientAriResourceOwner = "oauth";
export { OauthClientAriResourceOwner }
export { OauthClientAriResourceOwner as OauthClientAriResourceOwner_alias_1 }

declare const OauthClientAriResourceType = "client";
export { OauthClientAriResourceType }
export { OauthClientAriResourceType as OauthClientAriResourceType_alias_1 }

export declare const oauthClientAriStaticOpts: AriStaticProperties;

export declare const OauthClientType: "oauthClient";

export declare const OauthConsumerType: "oauth-consumer";

export declare const ObjectType: "object";

export declare const OfferingRelationshipTemplateType: "offering-relationship-template";

export declare const OfferingType: "offering";

export declare const OperationsWorkspaceType: "operations-workspace";

declare class OpsgenieAccountLoginAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _accountLoginId;
    get workspaceId(): string;
    get accountLoginId(): string;
    static create(opts: OpsgenieAccountLoginAriOpts): OpsgenieAccountLoginAri;
    static parse(maybeAri: string): OpsgenieAccountLoginAri;
    getVariables(): {
        workspaceId: string;
        accountLoginId: string;
    };
}
export { OpsgenieAccountLoginAri }
export { OpsgenieAccountLoginAri as OpsgenieAccountLoginAri_alias_1 }
export { OpsgenieAccountLoginAri as OpsgenieAccountLoginAri_alias_2 }

export declare interface OpsgenieAccountLoginAriOpts {
    workspaceId: string;
    accountLoginId: string;
}

declare const OpsgenieAccountLoginAriResourceOwner = "opsgenie";
export { OpsgenieAccountLoginAriResourceOwner }
export { OpsgenieAccountLoginAriResourceOwner as OpsgenieAccountLoginAriResourceOwner_alias_1 }

declare const OpsgenieAccountLoginAriResourceType = "account-login";
export { OpsgenieAccountLoginAriResourceType }
export { OpsgenieAccountLoginAriResourceType as OpsgenieAccountLoginAriResourceType_alias_1 }

export declare const opsgenieAccountLoginAriStaticOpts: AriStaticProperties;

declare class OpsgenieAccountSettingsAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _accountSettingsId;
    get workspaceId(): string;
    get accountSettingsId(): string;
    static create(opts: OpsgenieAccountSettingsAriOpts): OpsgenieAccountSettingsAri;
    static parse(maybeAri: string): OpsgenieAccountSettingsAri;
    getVariables(): {
        workspaceId: string;
        accountSettingsId: string;
    };
}
export { OpsgenieAccountSettingsAri }
export { OpsgenieAccountSettingsAri as OpsgenieAccountSettingsAri_alias_1 }
export { OpsgenieAccountSettingsAri as OpsgenieAccountSettingsAri_alias_2 }

export declare interface OpsgenieAccountSettingsAriOpts {
    workspaceId: string;
    accountSettingsId: string;
}

declare const OpsgenieAccountSettingsAriResourceOwner = "opsgenie";
export { OpsgenieAccountSettingsAriResourceOwner }
export { OpsgenieAccountSettingsAriResourceOwner as OpsgenieAccountSettingsAriResourceOwner_alias_1 }

declare const OpsgenieAccountSettingsAriResourceType = "account-settings";
export { OpsgenieAccountSettingsAriResourceType }
export { OpsgenieAccountSettingsAriResourceType as OpsgenieAccountSettingsAriResourceType_alias_1 }

export declare const opsgenieAccountSettingsAriStaticOpts: AriStaticProperties;

declare class OpsgenieAlertAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _alertId;
    get workspaceId(): string;
    get alertId(): string;
    static create(opts: OpsgenieAlertAriOpts): OpsgenieAlertAri;
    static parse(maybeAri: string): OpsgenieAlertAri;
    getVariables(): {
        workspaceId: string;
        alertId: string;
    };
}
export { OpsgenieAlertAri }
export { OpsgenieAlertAri as OpsgenieAlertAri_alias_1 }
export { OpsgenieAlertAri as OpsgenieAlertAri_alias_2 }

export declare interface OpsgenieAlertAriOpts {
    workspaceId: string;
    alertId: string;
}

declare const OpsgenieAlertAriResourceOwner = "opsgenie";
export { OpsgenieAlertAriResourceOwner }
export { OpsgenieAlertAriResourceOwner as OpsgenieAlertAriResourceOwner_alias_1 }

declare const OpsgenieAlertAriResourceType = "alert";
export { OpsgenieAlertAriResourceType }
export { OpsgenieAlertAriResourceType as OpsgenieAlertAriResourceType_alias_1 }

export declare const opsgenieAlertAriStaticOpts: AriStaticProperties;

declare class OpsgenieAlertRecipientLinkAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _alertId;
    private readonly _recipientType;
    private readonly _recipientId;
    get workspaceId(): string;
    get alertId(): string;
    get recipientType(): string;
    get recipientId(): string;
    static create(opts: OpsgenieAlertRecipientLinkAriOpts): OpsgenieAlertRecipientLinkAri;
    static parse(maybeAri: string): OpsgenieAlertRecipientLinkAri;
    getVariables(): {
        workspaceId: string;
        alertId: string;
        recipientType: string;
        recipientId: string;
    };
}
export { OpsgenieAlertRecipientLinkAri }
export { OpsgenieAlertRecipientLinkAri as OpsgenieAlertRecipientLinkAri_alias_1 }
export { OpsgenieAlertRecipientLinkAri as OpsgenieAlertRecipientLinkAri_alias_2 }

export declare interface OpsgenieAlertRecipientLinkAriOpts {
    workspaceId: string;
    alertId: string;
    recipientType: string;
    recipientId: string;
}

declare const OpsgenieAlertRecipientLinkAriResourceOwner = "opsgenie";
export { OpsgenieAlertRecipientLinkAriResourceOwner }
export { OpsgenieAlertRecipientLinkAriResourceOwner as OpsgenieAlertRecipientLinkAriResourceOwner_alias_1 }

declare const OpsgenieAlertRecipientLinkAriResourceType = "alert-recipient-link";
export { OpsgenieAlertRecipientLinkAriResourceType }
export { OpsgenieAlertRecipientLinkAriResourceType as OpsgenieAlertRecipientLinkAriResourceType_alias_1 }

export declare const opsgenieAlertRecipientLinkAriStaticOpts: AriStaticProperties;

declare class OpsgenieApiRequestMetricAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _apiRequestMetricId;
    get workspaceId(): string;
    get apiRequestMetricId(): string;
    static create(opts: OpsgenieApiRequestMetricAriOpts): OpsgenieApiRequestMetricAri;
    static parse(maybeAri: string): OpsgenieApiRequestMetricAri;
    getVariables(): {
        workspaceId: string;
        apiRequestMetricId: string;
    };
}
export { OpsgenieApiRequestMetricAri }
export { OpsgenieApiRequestMetricAri as OpsgenieApiRequestMetricAri_alias_1 }
export { OpsgenieApiRequestMetricAri as OpsgenieApiRequestMetricAri_alias_2 }

export declare interface OpsgenieApiRequestMetricAriOpts {
    workspaceId: string;
    apiRequestMetricId: string;
}

declare const OpsgenieApiRequestMetricAriResourceOwner = "opsgenie";
export { OpsgenieApiRequestMetricAriResourceOwner }
export { OpsgenieApiRequestMetricAriResourceOwner as OpsgenieApiRequestMetricAriResourceOwner_alias_1 }

declare const OpsgenieApiRequestMetricAriResourceType = "api-request-metric";
export { OpsgenieApiRequestMetricAriResourceType }
export { OpsgenieApiRequestMetricAriResourceType as OpsgenieApiRequestMetricAriResourceType_alias_1 }

export declare const opsgenieApiRequestMetricAriStaticOpts: AriStaticProperties;

declare class OpsgenieCallRoutingAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _callRoutingId;
    get workspaceId(): string;
    get callRoutingId(): string;
    static create(opts: OpsgenieCallRoutingAriOpts): OpsgenieCallRoutingAri;
    static parse(maybeAri: string): OpsgenieCallRoutingAri;
    getVariables(): {
        workspaceId: string;
        callRoutingId: string;
    };
}
export { OpsgenieCallRoutingAri }
export { OpsgenieCallRoutingAri as OpsgenieCallRoutingAri_alias_1 }
export { OpsgenieCallRoutingAri as OpsgenieCallRoutingAri_alias_2 }

export declare interface OpsgenieCallRoutingAriOpts {
    workspaceId: string;
    callRoutingId: string;
}

declare const OpsgenieCallRoutingAriResourceOwner = "opsgenie";
export { OpsgenieCallRoutingAriResourceOwner }
export { OpsgenieCallRoutingAriResourceOwner as OpsgenieCallRoutingAriResourceOwner_alias_1 }

declare const OpsgenieCallRoutingAriResourceType = "call-routing";
export { OpsgenieCallRoutingAriResourceType }
export { OpsgenieCallRoutingAriResourceType as OpsgenieCallRoutingAriResourceType_alias_1 }

export declare const opsgenieCallRoutingAriStaticOpts: AriStaticProperties;

declare class OpsgenieCustomRoleAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _opsgenieRoleType;
    private readonly _customRoleId;
    get workspaceId(): string;
    get opsgenieRoleType(): string;
    get customRoleId(): string;
    static create(opts: OpsgenieCustomRoleAriOpts): OpsgenieCustomRoleAri;
    static parse(maybeAri: string): OpsgenieCustomRoleAri;
    getVariables(): {
        workspaceId: string;
        opsgenieRoleType: string;
        customRoleId: string;
    };
}
export { OpsgenieCustomRoleAri }
export { OpsgenieCustomRoleAri as OpsgenieCustomRoleAri_alias_1 }
export { OpsgenieCustomRoleAri as OpsgenieCustomRoleAri_alias_2 }

export declare interface OpsgenieCustomRoleAriOpts {
    workspaceId: string;
    opsgenieRoleType: string;
    customRoleId: string;
}

declare const OpsgenieCustomRoleAriResourceOwner = "opsgenie";
export { OpsgenieCustomRoleAriResourceOwner }
export { OpsgenieCustomRoleAriResourceOwner as OpsgenieCustomRoleAriResourceOwner_alias_1 }

declare const OpsgenieCustomRoleAriResourceType = "custom-role";
export { OpsgenieCustomRoleAriResourceType }
export { OpsgenieCustomRoleAriResourceType as OpsgenieCustomRoleAriResourceType_alias_1 }

export declare const opsgenieCustomRoleAriStaticOpts: AriStaticProperties;

declare class OpsgenieDeploymentAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _deploymentId;
    get workspaceId(): string;
    get deploymentId(): string;
    static create(opts: OpsgenieDeploymentAriOpts): OpsgenieDeploymentAri;
    static parse(maybeAri: string): OpsgenieDeploymentAri;
    getVariables(): {
        workspaceId: string;
        deploymentId: string;
    };
}
export { OpsgenieDeploymentAri }
export { OpsgenieDeploymentAri as OpsgenieDeploymentAri_alias_1 }
export { OpsgenieDeploymentAri as OpsgenieDeploymentAri_alias_2 }

export declare interface OpsgenieDeploymentAriOpts {
    workspaceId: string;
    deploymentId: string;
}

declare const OpsgenieDeploymentAriResourceOwner = "opsgenie";
export { OpsgenieDeploymentAriResourceOwner }
export { OpsgenieDeploymentAriResourceOwner as OpsgenieDeploymentAriResourceOwner_alias_1 }

declare const OpsgenieDeploymentAriResourceType = "deployment";
export { OpsgenieDeploymentAriResourceType }
export { OpsgenieDeploymentAriResourceType as OpsgenieDeploymentAriResourceType_alias_1 }

export declare const opsgenieDeploymentAriStaticOpts: AriStaticProperties;

declare class OpsgenieDeploymentServiceLinkAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _deploymentId;
    private readonly _serviceId;
    get workspaceId(): string;
    get deploymentId(): string;
    get serviceId(): string;
    static create(opts: OpsgenieDeploymentServiceLinkAriOpts): OpsgenieDeploymentServiceLinkAri;
    static parse(maybeAri: string): OpsgenieDeploymentServiceLinkAri;
    getVariables(): {
        workspaceId: string;
        deploymentId: string;
        serviceId: string;
    };
}
export { OpsgenieDeploymentServiceLinkAri }
export { OpsgenieDeploymentServiceLinkAri as OpsgenieDeploymentServiceLinkAri_alias_1 }
export { OpsgenieDeploymentServiceLinkAri as OpsgenieDeploymentServiceLinkAri_alias_2 }

export declare interface OpsgenieDeploymentServiceLinkAriOpts {
    workspaceId: string;
    deploymentId: string;
    serviceId: string;
}

declare const OpsgenieDeploymentServiceLinkAriResourceOwner = "opsgenie";
export { OpsgenieDeploymentServiceLinkAriResourceOwner }
export { OpsgenieDeploymentServiceLinkAriResourceOwner as OpsgenieDeploymentServiceLinkAriResourceOwner_alias_1 }

declare const OpsgenieDeploymentServiceLinkAriResourceType = "deployment-service-link";
export { OpsgenieDeploymentServiceLinkAriResourceType }
export { OpsgenieDeploymentServiceLinkAriResourceType as OpsgenieDeploymentServiceLinkAriResourceType_alias_1 }

export declare const opsgenieDeploymentServiceLinkAriStaticOpts: AriStaticProperties;

declare class OpsgenieEscalationAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _escalationId;
    get workspaceId(): string;
    get escalationId(): string;
    static create(opts: OpsgenieEscalationAriOpts): OpsgenieEscalationAri;
    static parse(maybeAri: string): OpsgenieEscalationAri;
    getVariables(): {
        workspaceId: string;
        escalationId: string;
    };
}
export { OpsgenieEscalationAri }
export { OpsgenieEscalationAri as OpsgenieEscalationAri_alias_1 }
export { OpsgenieEscalationAri as OpsgenieEscalationAri_alias_2 }

export declare interface OpsgenieEscalationAriOpts {
    workspaceId: string;
    escalationId: string;
}

declare const OpsgenieEscalationAriResourceOwner = "opsgenie";
export { OpsgenieEscalationAriResourceOwner }
export { OpsgenieEscalationAriResourceOwner as OpsgenieEscalationAriResourceOwner_alias_1 }

declare const OpsgenieEscalationAriResourceType = "escalation";
export { OpsgenieEscalationAriResourceType }
export { OpsgenieEscalationAriResourceType as OpsgenieEscalationAriResourceType_alias_1 }

export declare const opsgenieEscalationAriStaticOpts: AriStaticProperties;

declare class OpsgenieEventAri extends RegisteredAri {
    private constructor();
    private readonly _eventType;
    private readonly _workspaceId;
    private readonly _eventId;
    get eventType(): string;
    get workspaceId(): string;
    get eventId(): string;
    static create(opts: OpsgenieEventAriOpts): OpsgenieEventAri;
    static parse(maybeAri: string): OpsgenieEventAri;
    getVariables(): {
        eventType: string;
        workspaceId: string;
        eventId: string;
    };
}
export { OpsgenieEventAri }
export { OpsgenieEventAri as OpsgenieEventAri_alias_1 }
export { OpsgenieEventAri as OpsgenieEventAri_alias_2 }

export declare interface OpsgenieEventAriOpts {
    eventType: string;
    workspaceId: string;
    eventId: string;
}

declare const OpsgenieEventAriResourceOwner = "opsgenie";
export { OpsgenieEventAriResourceOwner }
export { OpsgenieEventAriResourceOwner as OpsgenieEventAriResourceOwner_alias_1 }

declare const OpsgenieEventAriResourceType = "event";
export { OpsgenieEventAriResourceType }
export { OpsgenieEventAriResourceType as OpsgenieEventAriResourceType_alias_1 }

export declare const opsgenieEventAriStaticOpts: AriStaticProperties;

declare class OpsgenieIncidentAlertLinkAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _incidentId;
    private readonly _alertId;
    get workspaceId(): string;
    get incidentId(): string;
    get alertId(): string;
    static create(opts: OpsgenieIncidentAlertLinkAriOpts): OpsgenieIncidentAlertLinkAri;
    static parse(maybeAri: string): OpsgenieIncidentAlertLinkAri;
    getVariables(): {
        workspaceId: string;
        incidentId: string;
        alertId: string;
    };
}
export { OpsgenieIncidentAlertLinkAri }
export { OpsgenieIncidentAlertLinkAri as OpsgenieIncidentAlertLinkAri_alias_1 }
export { OpsgenieIncidentAlertLinkAri as OpsgenieIncidentAlertLinkAri_alias_2 }

export declare interface OpsgenieIncidentAlertLinkAriOpts {
    workspaceId: string;
    incidentId: string;
    alertId: string;
}

declare const OpsgenieIncidentAlertLinkAriResourceOwner = "opsgenie";
export { OpsgenieIncidentAlertLinkAriResourceOwner }
export { OpsgenieIncidentAlertLinkAriResourceOwner as OpsgenieIncidentAlertLinkAriResourceOwner_alias_1 }

declare const OpsgenieIncidentAlertLinkAriResourceType = "incident-alert-link";
export { OpsgenieIncidentAlertLinkAriResourceType }
export { OpsgenieIncidentAlertLinkAriResourceType as OpsgenieIncidentAlertLinkAriResourceType_alias_1 }

export declare const opsgenieIncidentAlertLinkAriStaticOpts: AriStaticProperties;

declare class OpsgenieIncidentAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _incidentId;
    get workspaceId(): string;
    get incidentId(): string;
    static create(opts: OpsgenieIncidentAriOpts): OpsgenieIncidentAri;
    static parse(maybeAri: string): OpsgenieIncidentAri;
    getVariables(): {
        workspaceId: string;
        incidentId: string;
    };
}
export { OpsgenieIncidentAri }
export { OpsgenieIncidentAri as OpsgenieIncidentAri_alias_1 }
export { OpsgenieIncidentAri as OpsgenieIncidentAri_alias_2 }

export declare interface OpsgenieIncidentAriOpts {
    workspaceId: string;
    incidentId: string;
}

declare const OpsgenieIncidentAriResourceOwner = "opsgenie";
export { OpsgenieIncidentAriResourceOwner }
export { OpsgenieIncidentAriResourceOwner as OpsgenieIncidentAriResourceOwner_alias_1 }

declare const OpsgenieIncidentAriResourceType = "incident";
export { OpsgenieIncidentAriResourceType }
export { OpsgenieIncidentAriResourceType as OpsgenieIncidentAriResourceType_alias_1 }

export declare const opsgenieIncidentAriStaticOpts: AriStaticProperties;

declare class OpsgenieIncidentStatusUpdateAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _incidentStatusUpdateId;
    get workspaceId(): string;
    get incidentStatusUpdateId(): string;
    static create(opts: OpsgenieIncidentStatusUpdateAriOpts): OpsgenieIncidentStatusUpdateAri;
    static parse(maybeAri: string): OpsgenieIncidentStatusUpdateAri;
    getVariables(): {
        workspaceId: string;
        incidentStatusUpdateId: string;
    };
}
export { OpsgenieIncidentStatusUpdateAri }
export { OpsgenieIncidentStatusUpdateAri as OpsgenieIncidentStatusUpdateAri_alias_1 }
export { OpsgenieIncidentStatusUpdateAri as OpsgenieIncidentStatusUpdateAri_alias_2 }

export declare interface OpsgenieIncidentStatusUpdateAriOpts {
    workspaceId: string;
    incidentStatusUpdateId: string;
}

declare const OpsgenieIncidentStatusUpdateAriResourceOwner = "opsgenie";
export { OpsgenieIncidentStatusUpdateAriResourceOwner }
export { OpsgenieIncidentStatusUpdateAriResourceOwner as OpsgenieIncidentStatusUpdateAriResourceOwner_alias_1 }

declare const OpsgenieIncidentStatusUpdateAriResourceType = "incident-status-update";
export { OpsgenieIncidentStatusUpdateAriResourceType }
export { OpsgenieIncidentStatusUpdateAriResourceType as OpsgenieIncidentStatusUpdateAriResourceType_alias_1 }

export declare const opsgenieIncidentStatusUpdateAriStaticOpts: AriStaticProperties;

declare class OpsgenieIncomingCallHistoryAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _incomingCallEventId;
    get workspaceId(): string;
    get incomingCallEventId(): string;
    static create(opts: OpsgenieIncomingCallHistoryAriOpts): OpsgenieIncomingCallHistoryAri;
    static parse(maybeAri: string): OpsgenieIncomingCallHistoryAri;
    getVariables(): {
        workspaceId: string;
        incomingCallEventId: string;
    };
}
export { OpsgenieIncomingCallHistoryAri }
export { OpsgenieIncomingCallHistoryAri as OpsgenieIncomingCallHistoryAri_alias_1 }
export { OpsgenieIncomingCallHistoryAri as OpsgenieIncomingCallHistoryAri_alias_2 }

export declare interface OpsgenieIncomingCallHistoryAriOpts {
    workspaceId: string;
    incomingCallEventId: string;
}

declare const OpsgenieIncomingCallHistoryAriResourceOwner = "opsgenie";
export { OpsgenieIncomingCallHistoryAriResourceOwner }
export { OpsgenieIncomingCallHistoryAriResourceOwner as OpsgenieIncomingCallHistoryAriResourceOwner_alias_1 }

declare const OpsgenieIncomingCallHistoryAriResourceType = "incoming-call-history";
export { OpsgenieIncomingCallHistoryAriResourceType }
export { OpsgenieIncomingCallHistoryAriResourceType as OpsgenieIncomingCallHistoryAriResourceType_alias_1 }

export declare const opsgenieIncomingCallHistoryAriStaticOpts: AriStaticProperties;

declare class OpsgenieIntegrationAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _integrationId;
    get workspaceId(): string;
    get integrationId(): string;
    static create(opts: OpsgenieIntegrationAriOpts): OpsgenieIntegrationAri;
    static parse(maybeAri: string): OpsgenieIntegrationAri;
    getVariables(): {
        workspaceId: string;
        integrationId: string;
    };
}
export { OpsgenieIntegrationAri }
export { OpsgenieIntegrationAri as OpsgenieIntegrationAri_alias_1 }
export { OpsgenieIntegrationAri as OpsgenieIntegrationAri_alias_2 }

export declare interface OpsgenieIntegrationAriOpts {
    workspaceId: string;
    integrationId: string;
}

declare const OpsgenieIntegrationAriResourceOwner = "opsgenie";
export { OpsgenieIntegrationAriResourceOwner }
export { OpsgenieIntegrationAriResourceOwner as OpsgenieIntegrationAriResourceOwner_alias_1 }

declare const OpsgenieIntegrationAriResourceType = "integration";
export { OpsgenieIntegrationAriResourceType }
export { OpsgenieIntegrationAriResourceType as OpsgenieIntegrationAriResourceType_alias_1 }

export declare const opsgenieIntegrationAriStaticOpts: AriStaticProperties;

declare class OpsgenieNotificationAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _notificationId;
    get workspaceId(): string;
    get notificationId(): string;
    static create(opts: OpsgenieNotificationAriOpts): OpsgenieNotificationAri;
    static parse(maybeAri: string): OpsgenieNotificationAri;
    getVariables(): {
        workspaceId: string;
        notificationId: string;
    };
}
export { OpsgenieNotificationAri }
export { OpsgenieNotificationAri as OpsgenieNotificationAri_alias_1 }
export { OpsgenieNotificationAri as OpsgenieNotificationAri_alias_2 }

export declare interface OpsgenieNotificationAriOpts {
    workspaceId: string;
    notificationId: string;
}

declare const OpsgenieNotificationAriResourceOwner = "opsgenie";
export { OpsgenieNotificationAriResourceOwner }
export { OpsgenieNotificationAriResourceOwner as OpsgenieNotificationAriResourceOwner_alias_1 }

declare const OpsgenieNotificationAriResourceType = "notification";
export { OpsgenieNotificationAriResourceType }
export { OpsgenieNotificationAriResourceType as OpsgenieNotificationAriResourceType_alias_1 }

export declare const opsgenieNotificationAriStaticOpts: AriStaticProperties;

declare class OpsgenieRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleId;
    get roleId(): string;
    static create(opts: OpsgenieRoleAriOpts): OpsgenieRoleAri;
    static parse(maybeAri: string): OpsgenieRoleAri;
    getVariables(): {
        roleId: string;
    };
}
export { OpsgenieRoleAri }
export { OpsgenieRoleAri as OpsgenieRoleAri_alias_1 }
export { OpsgenieRoleAri as OpsgenieRoleAri_alias_2 }

export declare interface OpsgenieRoleAriOpts {
    roleId: string;
}

declare const OpsgenieRoleAriResourceOwner = "opsgenie";
export { OpsgenieRoleAriResourceOwner }
export { OpsgenieRoleAriResourceOwner as OpsgenieRoleAriResourceOwner_alias_1 }

declare const OpsgenieRoleAriResourceType = "role";
export { OpsgenieRoleAriResourceType }
export { OpsgenieRoleAriResourceType as OpsgenieRoleAriResourceType_alias_1 }

export declare const opsgenieRoleAriStaticOpts: AriStaticProperties;

declare class OpsgenieScheduleAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _scheduleId;
    get workspaceId(): string;
    get scheduleId(): string;
    static create(opts: OpsgenieScheduleAriOpts): OpsgenieScheduleAri;
    static parse(maybeAri: string): OpsgenieScheduleAri;
    getVariables(): {
        workspaceId: string;
        scheduleId: string;
    };
}
export { OpsgenieScheduleAri }
export { OpsgenieScheduleAri as OpsgenieScheduleAri_alias_1 }
export { OpsgenieScheduleAri as OpsgenieScheduleAri_alias_2 }

export declare interface OpsgenieScheduleAriOpts {
    workspaceId: string;
    scheduleId: string;
}

declare const OpsgenieScheduleAriResourceOwner = "opsgenie";
export { OpsgenieScheduleAriResourceOwner }
export { OpsgenieScheduleAriResourceOwner as OpsgenieScheduleAriResourceOwner_alias_1 }

declare const OpsgenieScheduleAriResourceType = "schedule";
export { OpsgenieScheduleAriResourceType }
export { OpsgenieScheduleAriResourceType as OpsgenieScheduleAriResourceType_alias_1 }

export declare const opsgenieScheduleAriStaticOpts: AriStaticProperties;

declare class OpsgenieScheduleRotationAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _scheduleRotationId;
    get workspaceId(): string;
    get scheduleRotationId(): string;
    static create(opts: OpsgenieScheduleRotationAriOpts): OpsgenieScheduleRotationAri;
    static parse(maybeAri: string): OpsgenieScheduleRotationAri;
    getVariables(): {
        workspaceId: string;
        scheduleRotationId: string;
    };
}
export { OpsgenieScheduleRotationAri }
export { OpsgenieScheduleRotationAri as OpsgenieScheduleRotationAri_alias_1 }
export { OpsgenieScheduleRotationAri as OpsgenieScheduleRotationAri_alias_2 }

export declare interface OpsgenieScheduleRotationAriOpts {
    workspaceId: string;
    scheduleRotationId: string;
}

declare const OpsgenieScheduleRotationAriResourceOwner = "opsgenie";
export { OpsgenieScheduleRotationAriResourceOwner }
export { OpsgenieScheduleRotationAriResourceOwner as OpsgenieScheduleRotationAriResourceOwner_alias_1 }

declare const OpsgenieScheduleRotationAriResourceType = "schedule-rotation";
export { OpsgenieScheduleRotationAriResourceType }
export { OpsgenieScheduleRotationAriResourceType as OpsgenieScheduleRotationAriResourceType_alias_1 }

export declare const opsgenieScheduleRotationAriStaticOpts: AriStaticProperties;

declare class OpsgenieSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: OpsgenieSiteAriOpts): OpsgenieSiteAri;
    static parse(maybeAri: string): OpsgenieSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { OpsgenieSiteAri }
export { OpsgenieSiteAri as OpsgenieSiteAri_alias_1 }
export { OpsgenieSiteAri as OpsgenieSiteAri_alias_2 }

export declare interface OpsgenieSiteAriOpts {
    siteId: string;
}

declare const OpsgenieSiteAriResourceOwner = "opsgenie";
export { OpsgenieSiteAriResourceOwner }
export { OpsgenieSiteAriResourceOwner as OpsgenieSiteAriResourceOwner_alias_1 }

declare const OpsgenieSiteAriResourceType = "site";
export { OpsgenieSiteAriResourceType }
export { OpsgenieSiteAriResourceType as OpsgenieSiteAriResourceType_alias_1 }

export declare const opsgenieSiteAriStaticOpts: AriStaticProperties;

declare class OpsgenieTeamAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _opsgenieTeamId;
    get siteId(): string;
    get opsgenieTeamId(): string;
    static create(opts: OpsgenieTeamAriOpts): OpsgenieTeamAri;
    static parse(maybeAri: string): OpsgenieTeamAri;
    getVariables(): {
        siteId: string;
        opsgenieTeamId: string;
    };
}
export { OpsgenieTeamAri }
export { OpsgenieTeamAri as OpsgenieTeamAri_alias_1 }
export { OpsgenieTeamAri as OpsgenieTeamAri_alias_2 }

export declare interface OpsgenieTeamAriOpts {
    siteId: string;
    opsgenieTeamId: string;
}

declare const OpsgenieTeamAriResourceOwner = "opsgenie";
export { OpsgenieTeamAriResourceOwner }
export { OpsgenieTeamAriResourceOwner as OpsgenieTeamAriResourceOwner_alias_1 }

declare const OpsgenieTeamAriResourceType = "team";
export { OpsgenieTeamAriResourceType }
export { OpsgenieTeamAriResourceType as OpsgenieTeamAriResourceType_alias_1 }

export declare const opsgenieTeamAriStaticOpts: AriStaticProperties;

declare class OpsgenieTimelineAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _timelineEntryId;
    get workspaceId(): string;
    get timelineEntryId(): string;
    static create(opts: OpsgenieTimelineAriOpts): OpsgenieTimelineAri;
    static parse(maybeAri: string): OpsgenieTimelineAri;
    getVariables(): {
        workspaceId: string;
        timelineEntryId: string;
    };
}
export { OpsgenieTimelineAri }
export { OpsgenieTimelineAri as OpsgenieTimelineAri_alias_1 }
export { OpsgenieTimelineAri as OpsgenieTimelineAri_alias_2 }

export declare interface OpsgenieTimelineAriOpts {
    workspaceId: string;
    timelineEntryId: string;
}

declare const OpsgenieTimelineAriResourceOwner = "opsgenie";
export { OpsgenieTimelineAriResourceOwner }
export { OpsgenieTimelineAriResourceOwner as OpsgenieTimelineAriResourceOwner_alias_1 }

declare const OpsgenieTimelineAriResourceType = "timeline";
export { OpsgenieTimelineAriResourceType }
export { OpsgenieTimelineAriResourceType as OpsgenieTimelineAriResourceType_alias_1 }

export declare const opsgenieTimelineAriStaticOpts: AriStaticProperties;

declare class OpsgenieWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    get workspaceId(): string;
    static create(opts: OpsgenieWorkspaceAriOpts): OpsgenieWorkspaceAri;
    static parse(maybeAri: string): OpsgenieWorkspaceAri;
    getVariables(): {
        workspaceId: string;
    };
}
export { OpsgenieWorkspaceAri }
export { OpsgenieWorkspaceAri as OpsgenieWorkspaceAri_alias_1 }
export { OpsgenieWorkspaceAri as OpsgenieWorkspaceAri_alias_2 }

export declare interface OpsgenieWorkspaceAriOpts {
    workspaceId: string;
}

declare const OpsgenieWorkspaceAriResourceOwner = "opsgenie";
export { OpsgenieWorkspaceAriResourceOwner }
export { OpsgenieWorkspaceAriResourceOwner as OpsgenieWorkspaceAriResourceOwner_alias_1 }

declare const OpsgenieWorkspaceAriResourceType = "workspace";
export { OpsgenieWorkspaceAriResourceType }
export { OpsgenieWorkspaceAriResourceType as OpsgenieWorkspaceAriResourceType_alias_1 }

export declare const opsgenieWorkspaceAriStaticOpts: AriStaticProperties;

export declare const OrderType: "order";

export declare const OrganizationType: "organization";

declare class OrgPolicyPolicyAri extends RegisteredAri {
    private constructor();
    private readonly _policyId;
    get policyId(): string;
    static create(opts: OrgPolicyPolicyAriOpts): OrgPolicyPolicyAri;
    static parse(maybeAri: string): OrgPolicyPolicyAri;
    getVariables(): {
        policyId: string;
    };
}
export { OrgPolicyPolicyAri }
export { OrgPolicyPolicyAri as OrgPolicyPolicyAri_alias_1 }
export { OrgPolicyPolicyAri as OrgPolicyPolicyAri_alias_2 }

export declare interface OrgPolicyPolicyAriOpts {
    policyId: string;
}

declare const OrgPolicyPolicyAriResourceOwner = "org-policy";
export { OrgPolicyPolicyAriResourceOwner }
export { OrgPolicyPolicyAriResourceOwner as OrgPolicyPolicyAriResourceOwner_alias_1 }

declare const OrgPolicyPolicyAriResourceType = "policy";
export { OrgPolicyPolicyAriResourceType }
export { OrgPolicyPolicyAriResourceType as OrgPolicyPolicyAriResourceType_alias_1 }

export declare const orgPolicyPolicyAriStaticOpts: AriStaticProperties;

export declare const OrgType: "org";

export declare const OrgUserType: "org-user";

export declare const PageType: "page";

declare class PapiApiAri extends RegisteredAri {
    private constructor();
    private readonly _uuid;
    get uuid(): string;
    static create(opts: PapiApiAriOpts): PapiApiAri;
    static parse(maybeAri: string): PapiApiAri;
    getVariables(): {
        uuid: string;
    };
}
export { PapiApiAri }
export { PapiApiAri as PapiApiAri_alias_1 }
export { PapiApiAri as PapiApiAri_alias_2 }

export declare interface PapiApiAriOpts {
    uuid: string;
}

declare const PapiApiAriResourceOwner = "papi";
export { PapiApiAriResourceOwner }
export { PapiApiAriResourceOwner as PapiApiAriResourceOwner_alias_1 }

declare const PapiApiAriResourceType = "api";
export { PapiApiAriResourceType }
export { PapiApiAriResourceType as PapiApiAriResourceType_alias_1 }

export declare const papiApiAriStaticOpts: AriStaticProperties;

declare class PapiRoleAri extends RegisteredAri {
    private constructor();
    static create(opts: PapiRoleAriOpts): PapiRoleAri;
    static parse(maybeAri: string): PapiRoleAri;
    getVariables(): {};
}
export { PapiRoleAri }
export { PapiRoleAri as PapiRoleAri_alias_1 }
export { PapiRoleAri as PapiRoleAri_alias_2 }

export declare interface PapiRoleAriOpts {
}

declare const PapiRoleAriResourceOwner = "papi";
export { PapiRoleAriResourceOwner }
export { PapiRoleAriResourceOwner as PapiRoleAriResourceOwner_alias_1 }

declare const PapiRoleAriResourceType = "role";
export { PapiRoleAriResourceType }
export { PapiRoleAriResourceType as PapiRoleAriResourceType_alias_1 }

export declare const papiRoleAriStaticOpts: AriStaticProperties;

export declare const ParentAccountType: "parent-account";

declare class PassionfruitUserAri extends RegisteredAri {
    private constructor();
    private readonly _userId;
    get userId(): string;
    static create(opts: PassionfruitUserAriOpts): PassionfruitUserAri;
    static parse(maybeAri: string): PassionfruitUserAri;
    getVariables(): {
        userId: string;
    };
}
export { PassionfruitUserAri }
export { PassionfruitUserAri as PassionfruitUserAri_alias_1 }
export { PassionfruitUserAri as PassionfruitUserAri_alias_2 }

export declare interface PassionfruitUserAriOpts {
    userId: string;
}

declare const PassionfruitUserAriResourceOwner = "passionfruit";
export { PassionfruitUserAriResourceOwner }
export { PassionfruitUserAriResourceOwner as PassionfruitUserAriResourceOwner_alias_1 }

declare const PassionfruitUserAriResourceType = "user";
export { PassionfruitUserAriResourceType }
export { PassionfruitUserAriResourceType as PassionfruitUserAriResourceType_alias_1 }

export declare const passionfruitUserAriStaticOpts: AriStaticProperties;

export declare const PaymentMethodType: "payment-method";

declare class PeopleDataCostCenterAri extends RegisteredAri {
    private constructor();
    private readonly _costCenterId;
    get costCenterId(): string;
    static create(opts: PeopleDataCostCenterAriOpts): PeopleDataCostCenterAri;
    static parse(maybeAri: string): PeopleDataCostCenterAri;
    getVariables(): {
        costCenterId: string;
    };
}
export { PeopleDataCostCenterAri }
export { PeopleDataCostCenterAri as PeopleDataCostCenterAri_alias_1 }
export { PeopleDataCostCenterAri as PeopleDataCostCenterAri_alias_2 }

export declare interface PeopleDataCostCenterAriOpts {
    costCenterId: string;
}

declare const PeopleDataCostCenterAriResourceOwner = "people-data";
export { PeopleDataCostCenterAriResourceOwner }
export { PeopleDataCostCenterAriResourceOwner as PeopleDataCostCenterAriResourceOwner_alias_1 }

declare const PeopleDataCostCenterAriResourceType = "cost-center";
export { PeopleDataCostCenterAriResourceType }
export { PeopleDataCostCenterAriResourceType as PeopleDataCostCenterAriResourceType_alias_1 }

export declare const peopleDataCostCenterAriStaticOpts: AriStaticProperties;

declare class PeopleDataJobProfileAri extends RegisteredAri {
    private constructor();
    private readonly _jobProfileId;
    get jobProfileId(): string;
    static create(opts: PeopleDataJobProfileAriOpts): PeopleDataJobProfileAri;
    static parse(maybeAri: string): PeopleDataJobProfileAri;
    getVariables(): {
        jobProfileId: string;
    };
}
export { PeopleDataJobProfileAri }
export { PeopleDataJobProfileAri as PeopleDataJobProfileAri_alias_1 }
export { PeopleDataJobProfileAri as PeopleDataJobProfileAri_alias_2 }

export declare interface PeopleDataJobProfileAriOpts {
    jobProfileId: string;
}

declare const PeopleDataJobProfileAriResourceOwner = "people-data";
export { PeopleDataJobProfileAriResourceOwner }
export { PeopleDataJobProfileAriResourceOwner as PeopleDataJobProfileAriResourceOwner_alias_1 }

declare const PeopleDataJobProfileAriResourceType = "job-profile";
export { PeopleDataJobProfileAriResourceType }
export { PeopleDataJobProfileAriResourceType as PeopleDataJobProfileAriResourceType_alias_1 }

export declare const peopleDataJobProfileAriStaticOpts: AriStaticProperties;

declare class PeopleDataPositionAri extends RegisteredAri {
    private constructor();
    private readonly _positionId;
    get positionId(): string;
    static create(opts: PeopleDataPositionAriOpts): PeopleDataPositionAri;
    static parse(maybeAri: string): PeopleDataPositionAri;
    getVariables(): {
        positionId: string;
    };
}
export { PeopleDataPositionAri }
export { PeopleDataPositionAri as PeopleDataPositionAri_alias_1 }
export { PeopleDataPositionAri as PeopleDataPositionAri_alias_2 }

export declare interface PeopleDataPositionAriOpts {
    positionId: string;
}

declare const PeopleDataPositionAriResourceOwner = "people-data";
export { PeopleDataPositionAriResourceOwner }
export { PeopleDataPositionAriResourceOwner as PeopleDataPositionAriResourceOwner_alias_1 }

declare const PeopleDataPositionAriResourceType = "position";
export { PeopleDataPositionAriResourceType }
export { PeopleDataPositionAriResourceType as PeopleDataPositionAriResourceType_alias_1 }

export declare const peopleDataPositionAriStaticOpts: AriStaticProperties;

declare class PeopleDataSupervisoryOrgAri extends RegisteredAri {
    private constructor();
    private readonly _supervisoryOrgId;
    get supervisoryOrgId(): string;
    static create(opts: PeopleDataSupervisoryOrgAriOpts): PeopleDataSupervisoryOrgAri;
    static parse(maybeAri: string): PeopleDataSupervisoryOrgAri;
    getVariables(): {
        supervisoryOrgId: string;
    };
}
export { PeopleDataSupervisoryOrgAri }
export { PeopleDataSupervisoryOrgAri as PeopleDataSupervisoryOrgAri_alias_1 }
export { PeopleDataSupervisoryOrgAri as PeopleDataSupervisoryOrgAri_alias_2 }

export declare interface PeopleDataSupervisoryOrgAriOpts {
    supervisoryOrgId: string;
}

declare const PeopleDataSupervisoryOrgAriResourceOwner = "people-data";
export { PeopleDataSupervisoryOrgAriResourceOwner }
export { PeopleDataSupervisoryOrgAriResourceOwner as PeopleDataSupervisoryOrgAriResourceOwner_alias_1 }

declare const PeopleDataSupervisoryOrgAriResourceType = "supervisory-org";
export { PeopleDataSupervisoryOrgAriResourceType }
export { PeopleDataSupervisoryOrgAriResourceType as PeopleDataSupervisoryOrgAriResourceType_alias_1 }

export declare const peopleDataSupervisoryOrgAriStaticOpts: AriStaticProperties;

declare class PeopleDataWorkerAri extends RegisteredAri {
    private constructor();
    private readonly _workerId;
    get workerId(): string;
    static create(opts: PeopleDataWorkerAriOpts): PeopleDataWorkerAri;
    static parse(maybeAri: string): PeopleDataWorkerAri;
    getVariables(): {
        workerId: string;
    };
}
export { PeopleDataWorkerAri }
export { PeopleDataWorkerAri as PeopleDataWorkerAri_alias_1 }
export { PeopleDataWorkerAri as PeopleDataWorkerAri_alias_2 }

export declare interface PeopleDataWorkerAriOpts {
    workerId: string;
}

declare const PeopleDataWorkerAriResourceOwner = "people-data";
export { PeopleDataWorkerAriResourceOwner }
export { PeopleDataWorkerAriResourceOwner as PeopleDataWorkerAriResourceOwner_alias_1 }

declare const PeopleDataWorkerAriResourceType = "worker";
export { PeopleDataWorkerAriResourceType }
export { PeopleDataWorkerAriResourceType as PeopleDataWorkerAriResourceType_alias_1 }

export declare const peopleDataWorkerAriStaticOpts: AriStaticProperties;

declare class PeoplePerftoolCalibrationAri extends RegisteredAri {
    private constructor();
    private readonly _id;
    get id(): string;
    static create(opts: PeoplePerftoolCalibrationAriOpts): PeoplePerftoolCalibrationAri;
    static parse(maybeAri: string): PeoplePerftoolCalibrationAri;
    getVariables(): {
        id: string;
    };
}
export { PeoplePerftoolCalibrationAri }
export { PeoplePerftoolCalibrationAri as PeoplePerftoolCalibrationAri_alias_1 }
export { PeoplePerftoolCalibrationAri as PeoplePerftoolCalibrationAri_alias_2 }

export declare interface PeoplePerftoolCalibrationAriOpts {
    id: string;
}

declare const PeoplePerftoolCalibrationAriResourceOwner = "people-perftool";
export { PeoplePerftoolCalibrationAriResourceOwner }
export { PeoplePerftoolCalibrationAriResourceOwner as PeoplePerftoolCalibrationAriResourceOwner_alias_1 }

declare const PeoplePerftoolCalibrationAriResourceType = "calibration";
export { PeoplePerftoolCalibrationAriResourceType }
export { PeoplePerftoolCalibrationAriResourceType as PeoplePerftoolCalibrationAriResourceType_alias_1 }

export declare const peoplePerftoolCalibrationAriStaticOpts: AriStaticProperties;

declare class PeoplePerftoolFeedbackAri extends RegisteredAri {
    private constructor();
    private readonly _id;
    get id(): string;
    static create(opts: PeoplePerftoolFeedbackAriOpts): PeoplePerftoolFeedbackAri;
    static parse(maybeAri: string): PeoplePerftoolFeedbackAri;
    getVariables(): {
        id: string;
    };
}
export { PeoplePerftoolFeedbackAri }
export { PeoplePerftoolFeedbackAri as PeoplePerftoolFeedbackAri_alias_1 }
export { PeoplePerftoolFeedbackAri as PeoplePerftoolFeedbackAri_alias_2 }

export declare interface PeoplePerftoolFeedbackAriOpts {
    id: string;
}

declare const PeoplePerftoolFeedbackAriResourceOwner = "people-perftool";
export { PeoplePerftoolFeedbackAriResourceOwner }
export { PeoplePerftoolFeedbackAriResourceOwner as PeoplePerftoolFeedbackAriResourceOwner_alias_1 }

declare const PeoplePerftoolFeedbackAriResourceType = "feedback";
export { PeoplePerftoolFeedbackAriResourceType }
export { PeoplePerftoolFeedbackAriResourceType as PeoplePerftoolFeedbackAriResourceType_alias_1 }

export declare const peoplePerftoolFeedbackAriStaticOpts: AriStaticProperties;

declare class PeoplePerftoolPerformanceAri extends RegisteredAri {
    private constructor();
    private readonly _id;
    get id(): string;
    static create(opts: PeoplePerftoolPerformanceAriOpts): PeoplePerftoolPerformanceAri;
    static parse(maybeAri: string): PeoplePerftoolPerformanceAri;
    getVariables(): {
        id: string;
    };
}
export { PeoplePerftoolPerformanceAri }
export { PeoplePerftoolPerformanceAri as PeoplePerftoolPerformanceAri_alias_1 }
export { PeoplePerftoolPerformanceAri as PeoplePerftoolPerformanceAri_alias_2 }

export declare interface PeoplePerftoolPerformanceAriOpts {
    id: string;
}

declare const PeoplePerftoolPerformanceAriResourceOwner = "people-perftool";
export { PeoplePerftoolPerformanceAriResourceOwner }
export { PeoplePerftoolPerformanceAriResourceOwner as PeoplePerftoolPerformanceAriResourceOwner_alias_1 }

declare const PeoplePerftoolPerformanceAriResourceType = "performance";
export { PeoplePerftoolPerformanceAriResourceType }
export { PeoplePerftoolPerformanceAriResourceType as PeoplePerftoolPerformanceAriResourceType_alias_1 }

export declare const peoplePerftoolPerformanceAriStaticOpts: AriStaticProperties;

export declare const PerformanceType: "performance";

export declare const PermissionSchemeType: "permission-scheme";

export declare const PlanCrossProjectScenarioVersionType: "plan-cross-project-scenario-version";

export declare const PlanCrossProjectVersionType: "plan-cross-project-version";

export declare const PlanScenarioIssueFieldType: "plan-scenario-issue-field";

export declare const PlanScenarioIssueType: "plan-scenario-issue";

export declare const PlanScenarioType: "plan-scenario";

export declare const PlanScenarioVersionType: "plan-scenario-version";

export declare const PlanType: "plan";

declare class PlatformClassificationTagAri extends RegisteredAri {
    private constructor();
    private readonly _tagId;
    get tagId(): string;
    static create(opts: PlatformClassificationTagAriOpts): PlatformClassificationTagAri;
    static parse(maybeAri: string): PlatformClassificationTagAri;
    getVariables(): {
        tagId: string;
    };
}
export { PlatformClassificationTagAri }
export { PlatformClassificationTagAri as PlatformClassificationTagAri_alias_1 }
export { PlatformClassificationTagAri as PlatformClassificationTagAri_alias_2 }

export declare interface PlatformClassificationTagAriOpts {
    tagId: string;
}

declare const PlatformClassificationTagAriResourceOwner = "platform";
export { PlatformClassificationTagAriResourceOwner }
export { PlatformClassificationTagAriResourceOwner as PlatformClassificationTagAriResourceOwner_alias_1 }

declare const PlatformClassificationTagAriResourceType = "classification-tag";
export { PlatformClassificationTagAriResourceType }
export { PlatformClassificationTagAriResourceType as PlatformClassificationTagAriResourceType_alias_1 }

export declare const platformClassificationTagAriStaticOpts: AriStaticProperties;

declare class PlatformIntegrationAri extends RegisteredAri {
    private constructor();
    private readonly _integrationKey;
    get integrationKey(): string;
    static create(opts: PlatformIntegrationAriOpts): PlatformIntegrationAri;
    static parse(maybeAri: string): PlatformIntegrationAri;
    getVariables(): {
        integrationKey: string;
    };
}
export { PlatformIntegrationAri }
export { PlatformIntegrationAri as PlatformIntegrationAri_alias_1 }
export { PlatformIntegrationAri as PlatformIntegrationAri_alias_2 }

export declare interface PlatformIntegrationAriOpts {
    integrationKey: string;
}

declare const PlatformIntegrationAriResourceOwner = "platform";
export { PlatformIntegrationAriResourceOwner }
export { PlatformIntegrationAriResourceOwner as PlatformIntegrationAriResourceOwner_alias_1 }

declare const PlatformIntegrationAriResourceType = "integration";
export { PlatformIntegrationAriResourceType }
export { PlatformIntegrationAriResourceType as PlatformIntegrationAriResourceType_alias_1 }

export declare const platformIntegrationAriStaticOpts: AriStaticProperties;

declare class PlatformLifecycleResourceAri extends RegisteredAri {
    private constructor();
    private readonly _lifecycleResourceId;
    get lifecycleResourceId(): string;
    static create(opts: PlatformLifecycleResourceAriOpts): PlatformLifecycleResourceAri;
    static parse(maybeAri: string): PlatformLifecycleResourceAri;
    getVariables(): {
        lifecycleResourceId: string;
    };
}
export { PlatformLifecycleResourceAri }
export { PlatformLifecycleResourceAri as PlatformLifecycleResourceAri_alias_1 }
export { PlatformLifecycleResourceAri as PlatformLifecycleResourceAri_alias_2 }

export declare interface PlatformLifecycleResourceAriOpts {
    lifecycleResourceId: string;
}

declare const PlatformLifecycleResourceAriResourceOwner = "platform";
export { PlatformLifecycleResourceAriResourceOwner }
export { PlatformLifecycleResourceAriResourceOwner as PlatformLifecycleResourceAriResourceOwner_alias_1 }

declare const PlatformLifecycleResourceAriResourceType = "lifecycle-resource";
export { PlatformLifecycleResourceAriResourceType }
export { PlatformLifecycleResourceAriResourceType as PlatformLifecycleResourceAriResourceType_alias_1 }

export declare const platformLifecycleResourceAriStaticOpts: AriStaticProperties;

declare class PlatformLifecycleResourcePackageAri extends RegisteredAri {
    private constructor();
    private readonly _lifecycleResourcePackageId;
    get lifecycleResourcePackageId(): string;
    static create(opts: PlatformLifecycleResourcePackageAriOpts): PlatformLifecycleResourcePackageAri;
    static parse(maybeAri: string): PlatformLifecycleResourcePackageAri;
    getVariables(): {
        lifecycleResourcePackageId: string;
    };
}
export { PlatformLifecycleResourcePackageAri }
export { PlatformLifecycleResourcePackageAri as PlatformLifecycleResourcePackageAri_alias_1 }
export { PlatformLifecycleResourcePackageAri as PlatformLifecycleResourcePackageAri_alias_2 }

export declare interface PlatformLifecycleResourcePackageAriOpts {
    lifecycleResourcePackageId: string;
}

declare const PlatformLifecycleResourcePackageAriResourceOwner = "platform";
export { PlatformLifecycleResourcePackageAriResourceOwner }
export { PlatformLifecycleResourcePackageAriResourceOwner as PlatformLifecycleResourcePackageAriResourceOwner_alias_1 }

declare const PlatformLifecycleResourcePackageAriResourceType = "lifecycle-resource-package";
export { PlatformLifecycleResourcePackageAriResourceType }
export { PlatformLifecycleResourcePackageAriResourceType as PlatformLifecycleResourcePackageAriResourceType_alias_1 }

export declare const platformLifecycleResourcePackageAriStaticOpts: AriStaticProperties;

declare class PlatformLifecycleResourcePackageTypeAri extends RegisteredAri {
    private constructor();
    private readonly _resourcePackageTypeId;
    get resourcePackageTypeId(): string;
    static create(opts: PlatformLifecycleResourcePackageTypeAriOpts): PlatformLifecycleResourcePackageTypeAri;
    static parse(maybeAri: string): PlatformLifecycleResourcePackageTypeAri;
    getVariables(): {
        resourcePackageTypeId: string;
    };
}
export { PlatformLifecycleResourcePackageTypeAri }
export { PlatformLifecycleResourcePackageTypeAri as PlatformLifecycleResourcePackageTypeAri_alias_1 }
export { PlatformLifecycleResourcePackageTypeAri as PlatformLifecycleResourcePackageTypeAri_alias_2 }

export declare interface PlatformLifecycleResourcePackageTypeAriOpts {
    resourcePackageTypeId: string;
}

declare const PlatformLifecycleResourcePackageTypeAriResourceOwner = "platform";
export { PlatformLifecycleResourcePackageTypeAriResourceOwner }
export { PlatformLifecycleResourcePackageTypeAriResourceOwner as PlatformLifecycleResourcePackageTypeAriResourceOwner_alias_1 }

declare const PlatformLifecycleResourcePackageTypeAriResourceType = "lifecycle-resource-package-type";
export { PlatformLifecycleResourcePackageTypeAriResourceType }
export { PlatformLifecycleResourcePackageTypeAriResourceType as PlatformLifecycleResourcePackageTypeAriResourceType_alias_1 }

export declare const platformLifecycleResourcePackageTypeAriStaticOpts: AriStaticProperties;

declare class PlatformOrgAri extends RegisteredAri {
    private constructor();
    private readonly _orgId;
    get orgId(): string;
    static create(opts: PlatformOrgAriOpts): PlatformOrgAri;
    static parse(maybeAri: string): PlatformOrgAri;
    getVariables(): {
        orgId: string;
    };
}
export { PlatformOrgAri }
export { PlatformOrgAri as PlatformOrgAri_alias_1 }
export { PlatformOrgAri as PlatformOrgAri_alias_2 }

export declare interface PlatformOrgAriOpts {
    orgId: string;
}

declare const PlatformOrgAriResourceOwner = "platform";
export { PlatformOrgAriResourceOwner }
export { PlatformOrgAriResourceOwner as PlatformOrgAriResourceOwner_alias_1 }

declare const PlatformOrgAriResourceType = "org";
export { PlatformOrgAriResourceType }
export { PlatformOrgAriResourceType as PlatformOrgAriResourceType_alias_1 }

export declare const platformOrgAriStaticOpts: AriStaticProperties;

declare class PlatformOrgUserAri extends RegisteredAri {
    private constructor();
    private readonly _orgId;
    private readonly _userId;
    get orgId(): string;
    get userId(): string;
    static create(opts: PlatformOrgUserAriOpts): PlatformOrgUserAri;
    static parse(maybeAri: string): PlatformOrgUserAri;
    getVariables(): {
        orgId: string;
        userId: string;
    };
}
export { PlatformOrgUserAri }
export { PlatformOrgUserAri as PlatformOrgUserAri_alias_1 }
export { PlatformOrgUserAri as PlatformOrgUserAri_alias_2 }

export declare interface PlatformOrgUserAriOpts {
    orgId: string;
    userId: string;
}

declare const PlatformOrgUserAriResourceOwner = "platform";
export { PlatformOrgUserAriResourceOwner }
export { PlatformOrgUserAriResourceOwner as PlatformOrgUserAriResourceOwner_alias_1 }

declare const PlatformOrgUserAriResourceType = "org-user";
export { PlatformOrgUserAriResourceType }
export { PlatformOrgUserAriResourceType as PlatformOrgUserAriResourceType_alias_1 }

export declare const platformOrgUserAriStaticOpts: AriStaticProperties;

export declare type PlatformQualifier = 'cloud' | 'third-party';

declare class PlatformSecureTunnelAri extends RegisteredAri {
    private constructor();
    private readonly _secureTunnelId;
    get secureTunnelId(): string;
    static create(opts: PlatformSecureTunnelAriOpts): PlatformSecureTunnelAri;
    static parse(maybeAri: string): PlatformSecureTunnelAri;
    getVariables(): {
        secureTunnelId: string;
    };
}
export { PlatformSecureTunnelAri }
export { PlatformSecureTunnelAri as PlatformSecureTunnelAri_alias_1 }
export { PlatformSecureTunnelAri as PlatformSecureTunnelAri_alias_2 }

export declare interface PlatformSecureTunnelAriOpts {
    secureTunnelId: string;
}

declare const PlatformSecureTunnelAriResourceOwner = "platform";
export { PlatformSecureTunnelAriResourceOwner }
export { PlatformSecureTunnelAriResourceOwner as PlatformSecureTunnelAriResourceOwner_alias_1 }

declare const PlatformSecureTunnelAriResourceType = "secure-tunnel";
export { PlatformSecureTunnelAriResourceType }
export { PlatformSecureTunnelAriResourceType as PlatformSecureTunnelAriResourceType_alias_1 }

export declare const platformSecureTunnelAriStaticOpts: AriStaticProperties;

declare class PlatformServicesStreamhubSchemaAri extends RegisteredAri {
    private constructor();
    private readonly _streamhubSchemaId;
    get streamhubSchemaId(): string;
    static create(opts: PlatformServicesStreamhubSchemaAriOpts): PlatformServicesStreamhubSchemaAri;
    static parse(maybeAri: string): PlatformServicesStreamhubSchemaAri;
    getVariables(): {
        streamhubSchemaId: string;
    };
}
export { PlatformServicesStreamhubSchemaAri }
export { PlatformServicesStreamhubSchemaAri as PlatformServicesStreamhubSchemaAri_alias_1 }
export { PlatformServicesStreamhubSchemaAri as PlatformServicesStreamhubSchemaAri_alias_2 }

export declare interface PlatformServicesStreamhubSchemaAriOpts {
    streamhubSchemaId: string;
}

declare const PlatformServicesStreamhubSchemaAriResourceOwner = "platform-services";
export { PlatformServicesStreamhubSchemaAriResourceOwner }
export { PlatformServicesStreamhubSchemaAriResourceOwner as PlatformServicesStreamhubSchemaAriResourceOwner_alias_1 }

declare const PlatformServicesStreamhubSchemaAriResourceType = "streamhub-schema";
export { PlatformServicesStreamhubSchemaAriResourceType }
export { PlatformServicesStreamhubSchemaAriResourceType as PlatformServicesStreamhubSchemaAriResourceType_alias_1 }

export declare const platformServicesStreamhubSchemaAriStaticOpts: AriStaticProperties;

declare class PlatformSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: PlatformSiteAriOpts): PlatformSiteAri;
    static parse(maybeAri: string): PlatformSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { PlatformSiteAri }
export { PlatformSiteAri as PlatformSiteAri_alias_1 }
export { PlatformSiteAri as PlatformSiteAri_alias_2 }

export declare interface PlatformSiteAriOpts {
    siteId: string;
}

declare const PlatformSiteAriResourceOwner = "platform";
export { PlatformSiteAriResourceOwner }
export { PlatformSiteAriResourceOwner as PlatformSiteAriResourceOwner_alias_1 }

declare const PlatformSiteAriResourceType = "site";
export { PlatformSiteAriResourceType }
export { PlatformSiteAriResourceType as PlatformSiteAriResourceType_alias_1 }

export declare const platformSiteAriStaticOpts: AriStaticProperties;

export declare const PolicyType: "policy";

declare class PollinatorCheckAri extends RegisteredAri {
    private constructor();
    private readonly _checkId;
    get checkId(): string;
    static create(opts: PollinatorCheckAriOpts): PollinatorCheckAri;
    static parse(maybeAri: string): PollinatorCheckAri;
    getVariables(): {
        checkId: string;
    };
}
export { PollinatorCheckAri }
export { PollinatorCheckAri as PollinatorCheckAri_alias_1 }
export { PollinatorCheckAri as PollinatorCheckAri_alias_2 }

export declare interface PollinatorCheckAriOpts {
    checkId: string;
}

declare const PollinatorCheckAriResourceOwner = "pollinator";
export { PollinatorCheckAriResourceOwner }
export { PollinatorCheckAriResourceOwner as PollinatorCheckAriResourceOwner_alias_1 }

declare const PollinatorCheckAriResourceType = "check";
export { PollinatorCheckAriResourceType }
export { PollinatorCheckAriResourceType as PollinatorCheckAriResourceType_alias_1 }

export declare const pollinatorCheckAriStaticOpts: AriStaticProperties;

export declare const PortalType: "portal";

export declare const PositionType: "position";

export declare const PostIncidentReviewHistoryType: "post-incident-review-history";

export declare const PostIncidentReviewLinkType: "post-incident-review-link";

export declare const PostIncidentReviewType: "post-incident-review";

declare class PostOfficeMessageInstanceAri extends RegisteredAri {
    private constructor();
    private readonly _messageTemplateId;
    private readonly _messageInstanceId;
    get messageTemplateId(): string;
    get messageInstanceId(): string;
    static create(opts: PostOfficeMessageInstanceAriOpts): PostOfficeMessageInstanceAri;
    static parse(maybeAri: string): PostOfficeMessageInstanceAri;
    getVariables(): {
        messageTemplateId: string;
        messageInstanceId: string;
    };
}
export { PostOfficeMessageInstanceAri }
export { PostOfficeMessageInstanceAri as PostOfficeMessageInstanceAri_alias_1 }
export { PostOfficeMessageInstanceAri as PostOfficeMessageInstanceAri_alias_2 }

export declare interface PostOfficeMessageInstanceAriOpts {
    messageTemplateId: string;
    messageInstanceId: string;
}

declare const PostOfficeMessageInstanceAriResourceOwner = "post-office";
export { PostOfficeMessageInstanceAriResourceOwner }
export { PostOfficeMessageInstanceAriResourceOwner as PostOfficeMessageInstanceAriResourceOwner_alias_1 }

declare const PostOfficeMessageInstanceAriResourceType = "message-instance";
export { PostOfficeMessageInstanceAriResourceType }
export { PostOfficeMessageInstanceAriResourceType as PostOfficeMessageInstanceAriResourceType_alias_1 }

export declare const postOfficeMessageInstanceAriStaticOpts: AriStaticProperties;

declare class PostOfficeMessageTemplateAri extends RegisteredAri {
    private constructor();
    private readonly _messageTemplateId;
    get messageTemplateId(): string;
    static create(opts: PostOfficeMessageTemplateAriOpts): PostOfficeMessageTemplateAri;
    static parse(maybeAri: string): PostOfficeMessageTemplateAri;
    getVariables(): {
        messageTemplateId: string;
    };
}
export { PostOfficeMessageTemplateAri }
export { PostOfficeMessageTemplateAri as PostOfficeMessageTemplateAri_alias_1 }
export { PostOfficeMessageTemplateAri as PostOfficeMessageTemplateAri_alias_2 }

export declare interface PostOfficeMessageTemplateAriOpts {
    messageTemplateId: string;
}

declare const PostOfficeMessageTemplateAriResourceOwner = "post-office";
export { PostOfficeMessageTemplateAriResourceOwner }
export { PostOfficeMessageTemplateAriResourceOwner as PostOfficeMessageTemplateAriResourceOwner_alias_1 }

declare const PostOfficeMessageTemplateAriResourceType = "message-template";
export { PostOfficeMessageTemplateAriResourceType }
export { PostOfficeMessageTemplateAriResourceType as PostOfficeMessageTemplateAriResourceType_alias_1 }

export declare const postOfficeMessageTemplateAriStaticOpts: AriStaticProperties;

export declare const PresentationType: "presentation";

export declare const PricingPlanType: "pricing-plan";

export declare const PriorityType: "priority";

export declare const ProductType: "product";

export declare const ProgramStatusUpdateType: "program-status-update";

export declare const ProgramType: "program";

export declare const ProjectCategoryType: "project-category";

export declare const ProjectFeatureType: "project-feature";

export declare const ProjectOverviewType: "project-overview";

export declare const ProjectRoleActorType: "project-role-actor";

export declare const ProjectShortcutType: "project-shortcut";

export declare const ProjectType: "project";

export declare const ProjectTypeType: "project-type";

export declare const PromotionType: "promotion";

export declare const ProviderType: "provider";

export declare const PublicLinkType: "public-link";

export declare const PullRequestHistoryType: "pull-request-history";

export declare const PullRequestType: "pull-request";

export declare const PullrequestType: "pullrequest";

export declare const QuestionType: "question";

export declare const QueueType: "queue";

export declare const QuoteType: "quote";

export declare const RecipeType: "recipe";

export declare abstract class RegisteredAri extends Ari {
    static check(maybeAri: any): boolean;
    asAnyAri(): AnyAri;
}

export declare const RelationshipType: "relationship";

export declare const RemoteLinkHistoryType: "remote-link-history";

export declare const RemoteLinkType: "remote-link";

export declare const RepositoryTransferType: "repository-transfer";

export declare const RepositoryType: "repository";

export declare const RequestFormType: "request-form";

export declare const RequestTypeType: "request-type";

export declare const ResolutionType: "resolution";

export declare type ResourceId = string;

export declare enum ResourceIdFormat {
    ACTIVATION_ID = "[a-zA-Z0-9\\-]+",
    ALERT_ID = "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}(-[0-9]*)?",
    ANY_RESOURCE_ID = "[!a-zA-Z0-9\\-_.~@:{}=]+(/[!a-zA-Z0-9\\-_.~@:{}=]+)*",
    ANY_RESOURCE_QUALIFIER = "[a-zA-Z0-9\\-_.]*",
    APP_KEY = "[a-zA-Z0-9-._]+",
    BASE64_STRING = "[a-zA-Z0-9=]+={0,1}",
    CLIENT_ID = "[0-9a-zA-Z-_]{5,50}",
    EXTENSION_KEY = "[a-zA-Z0-9-._]+",
    GROUP_ID = "([0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}|static)",
    INTEGER_ID = "[0-9]+",
    OPTIONAL_SITE_ID = "[a-zA-Z0-9\\-]*",
    ORG_ID = "[a-zA-Z0-9\\-]+",
    SITE_ID = "[a-zA-Z0-9\\-]+",
    TEAM_ID = "[a-zA-Z0-9.\\-_~]+",
    TRANSACTION_ACCOUNT_ID = "[a-zA-Z0-9\\-]+",
    USER_ID = "[a-zA-Z0-9_\\-\\:]{1,128}",
    USERBASE_ID = "[a-zA-Z0-9\\-]+",
    UUID = "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}",
    WORKSPACE_ID = "[a-zA-Z0-9\\-]+"
}

export declare type ResourceMatcher = string;

export declare type ResourceOwner_alias_1 = string;

/**
 *           @deprecated since version 2.5.1 Please use direct imports instead.
 *           @example import { AnalyticsUserResourceOwner } from '@atlassian/ari/analytics/user/types';
 *
 */
declare enum ResourceOwnerEnum {
    Analytics = "analytics",
    ApprovalDesk = "approval-desk",
    Atlashub = "atlashub",
    Automation = "automation",
    Avocado = "avocado",
    Avp = "avp",
    Beacon = "beacon",
    Bitbucket = "bitbucket",
    Brie = "brie",
    Canvas = "canvas",
    Cmdb = "cmdb",
    Commerce = "commerce",
    Compass = "compass",
    Confluence = "confluence",
    ConnectionRegistry = "connection-registry",
    ConversationalHelp = "conversational-help",
    DataLake = "data-lake",
    Devops = "devops",
    Ecosystem = "ecosystem",
    Elements = "elements",
    ExusExternal = "exus-external",
    Figma = "figma",
    Google = "google",
    Graph = "graph",
    Help = "help",
    Identity = "identity",
    Jira = "jira",
    JiraAlign = "jira-align",
    JiraCore = "jira-core",
    JiraServicedesk = "jira-servicedesk",
    JiraSoftware = "jira-software",
    LinkingPlatform = "linking-platform",
    Loom = "loom",
    MakerSpace = "maker-space",
    Mapi = "mapi",
    Marketing = "marketing",
    Marketplace = "marketplace",
    Measurement = "measurement",
    Media = "media",
    Mercury = "mercury",
    Microsoft = "microsoft",
    Oauth = "oauth",
    Opsgenie = "opsgenie",
    OrgPolicy = "org-policy",
    Papi = "papi",
    Passionfruit = "passionfruit",
    PeopleData = "people-data",
    PeoplePerftool = "people-perftool",
    Platform = "platform",
    PlatformServices = "platform-services",
    Pollinator = "pollinator",
    PostOffice = "post-office",
    Rovo = "rovo",
    RuntimeAuthClient = "runtime-auth-client",
    Search = "search",
    Slack = "slack",
    Statuspage = "statuspage",
    Support = "support",
    Teams = "teams",
    Townsquare = "townsquare",
    Trello = "trello",
    UnifiedHelp = "unified-help",
    UnifiedPortableProfile = "unified-portable-profile",
    VirtualAgent = "virtual-agent",
    Workato = "workato",
    Workday = "workday"
}
export { ResourceOwnerEnum as ResourceOwner }
export { ResourceOwnerEnum }

export declare type ResourceType_alias_1 = string;

/**
 *           @deprecated since version 2.5.1 Please use direct imports instead.
 *           @example import { AnalyticsUserResourceType } from '@atlassian/ari/analytics/user/types';
 *
 */
declare enum ResourceTypeEnum {
    AccountLogin = "account-login",
    AccountSettings = "account-settings",
    AdminAnnouncementBanner = "admin-announcement-banner",
    Alert = "alert",
    AlertRecipientLink = "alert-recipient-link",
    AnnouncementBanner = "announcement-banner",
    Answer = "answer",
    Api = "api",
    ApiRequestMetric = "api-request-metric",
    App = "app",
    AppEnvironmentVersion = "app-environment-version",
    Approval = "approval",
    Article = "article",
    AssistantAnswer = "assistant-answer",
    Attachment = "attachment",
    Attribute = "attribute",
    AuthPolicy = "auth-policy",
    AvailableFields = "available-fields",
    Blogpost = "blogpost",
    Board = "board",
    BoardFeature = "board-feature",
    BoardIssueList = "board-issue-list",
    Branch = "branch",
    BranchHistory = "branch-history",
    Build = "build",
    BuildHistory = "build-history",
    BulkOperationTask = "bulk-operation-task",
    CalendarEvent = "calendar-event",
    Calibration = "calibration",
    CallRouting = "call-routing",
    CannedResponse = "canned-response",
    Card = "card",
    CardColor = "card-color",
    CardLayout = "card-layout",
    CardParent = "card-parent",
    CatalogAccount = "catalog-account",
    Change = "change",
    Channel = "channel",
    Check = "check",
    ClassificationTag = "classification-tag",
    Client = "client",
    Column = "column",
    Comment = "comment",
    Commit = "commit",
    Component = "component",
    ComponentLabel = "component-label",
    ComponentLink = "component-link",
    Configuration = "configuration",
    ConnectApp = "connect-app",
    Container = "container",
    Content = "content",
    Conversation = "conversation",
    ConversationMessage = "conversation-message",
    CostCenter = "cost-center",
    CustomDetection = "custom-detection",
    CustomEmojiMetadata = "custom-emoji-metadata",
    Customer = "customer",
    CustomerDirectory = "customer-directory",
    CustomerDomain = "customer-domain",
    CustomerOrganization = "customer-organization",
    CustomFieldDefinition = "custom-field-definition",
    CustomFilter = "custom-filter",
    CustomRole = "custom-role",
    Dashboard = "dashboard",
    Database = "database",
    Datasource = "datasource",
    DecisionTable = "decision-table",
    Deployment = "deployment",
    DeploymentHistory = "deployment-history",
    DeploymentServiceLink = "deployment-service-link",
    Design = "design",
    DesignHistory = "design-history",
    Detection = "detection",
    DetectionSetting = "detection-setting",
    DevopsComponent = "devops-component",
    Directory = "directory",
    Document = "document",
    DocumentationCategory = "documentation-category",
    DocumentHistory = "document-history",
    Domain = "domain",
    EmailUuid = "email-uuid",
    Embed = "embed",
    Employee = "employee",
    EmployeeHistory = "employee-history",
    Enterprise = "enterprise",
    Entitlement = "entitlement",
    EntitlementTemplate = "entitlement-template",
    EntityProperty = "entity-property",
    Environment = "environment",
    Epic = "epic",
    Escalation = "escalation",
    Event = "event",
    EventSource = "event-source",
    Extension = "extension",
    ExtensionGroup = "extension-group",
    Favourite = "favourite",
    FeatureFlag = "feature-flag",
    FeatureFlagHistory = "feature-flag-history",
    Feedback = "feedback",
    File = "file",
    Filter = "filter",
    FilterEmailSubscription = "filter-email-subscription",
    FlowEditor = "flow-editor",
    FocusArea = "focus-area",
    FocusAreaStatusUpdate = "focus-area-status-update",
    Folder = "folder",
    Form = "form",
    ForwardDocument = "forward-document",
    ForwardDocumentSubscription = "forward-document-subscription",
    Goal = "goal",
    Group = "group",
    HelpCenter = "help-center",
    HelpDesk = "help-desk",
    HelpPointer = "help-pointer",
    Id = "id",
    ImportConfiguration = "import-configuration",
    Incident = "incident",
    IncidentAlertLink = "incident-alert-link",
    IncidentHistory = "incident-history",
    IncidentStatusUpdate = "incident-status-update",
    IncomingCallHistory = "incoming-call-history",
    IncomingWebhook = "incoming-webhook",
    Initiative = "initiative",
    Installation = "installation",
    Instance = "instance",
    Integration = "integration",
    IntentProjection = "intent-projection",
    IntentQuestionProjection = "intent-question-projection",
    IntentRuleProjection = "intent-rule-projection",
    IntentTemplate = "intent-template",
    InvoiceGroup = "invoice-group",
    Issue = "issue",
    IssueAttachment = "issue-attachment",
    IssueComment = "issue-comment",
    IssueFieldMetadata = "issue-field-metadata",
    IssueFieldOption = "issue-field-option",
    Issuefieldvalue = "issuefieldvalue",
    IssueHistory = "issue-history",
    IssueLink = "issue-link",
    IssueLinkType = "issue-link-type",
    IssueRemoteLink = "issue-remote-link",
    IssueSearchView = "issue-search-view",
    IssueStatus = "issue-status",
    IssueType = "issue-type",
    IssueTypeScheme = "issue-type-scheme",
    IssueTypeSchemeMapping = "issue-type-scheme-mapping",
    IssueWorklog = "issue-worklog",
    JiraProjectAndDevopsToolRelationship = "jira-project-and-devops-tool-relationship",
    JiraProjectAndDocumentationSpaceRelationship = "jira-project-and-documentation-space-relationship",
    JiraProjectAndOperationsTeamRelationship = "jira-project-and-operations-team-relationship",
    JiraProjectAndVcsRepositoryRelationship = "jira-project-and-vcs-repository-relationship",
    JiraProjectAndVcsRepositoryRelationshipTempMigration = "jira-project-and-vcs-repository-relationship-temp-migration",
    Job = "job",
    JobProfile = "job-profile",
    LakeConnection = "lake-connection",
    Layout = "layout",
    Learning = "learning",
    LifecycleResource = "lifecycle-resource",
    LifecycleResourcePackage = "lifecycle-resource-package",
    LifecycleResourcePackageType = "lifecycle-resource-package-type",
    Link = "link",
    LinkedAccount = "linked-account",
    List = "list",
    LongRunningTask = "long-running-task",
    Message = "message",
    MessageInstance = "message-instance",
    MessageTemplate = "message-template",
    MetricDefinition = "metric-definition",
    MetricSource = "metric-source",
    Namespace = "namespace",
    NavigationConfig = "navigation-config",
    NavigationItem = "navigation-item",
    Note = "note",
    Notification = "notification",
    NotificationType = "notification-type",
    NotificationTypeScheme = "notification-type-scheme",
    NotificationUserPreference = "notification-user-preference",
    OauthClient = "oauthClient",
    OauthConsumer = "oauth-consumer",
    Object = "object",
    Offering = "offering",
    OfferingRelationshipTemplate = "offering-relationship-template",
    OperationsWorkspace = "operations-workspace",
    Order = "order",
    Org = "org",
    Organization = "organization",
    OrgUser = "org-user",
    Page = "page",
    ParentAccount = "parent-account",
    PaymentMethod = "payment-method",
    Performance = "performance",
    PermissionScheme = "permission-scheme",
    Plan = "plan",
    PlanCrossProjectScenarioVersion = "plan-cross-project-scenario-version",
    PlanCrossProjectVersion = "plan-cross-project-version",
    PlanScenario = "plan-scenario",
    PlanScenarioIssue = "plan-scenario-issue",
    PlanScenarioIssueField = "plan-scenario-issue-field",
    PlanScenarioVersion = "plan-scenario-version",
    Policy = "policy",
    Portal = "portal",
    Position = "position",
    PostIncidentReview = "post-incident-review",
    PostIncidentReviewHistory = "post-incident-review-history",
    PostIncidentReviewLink = "post-incident-review-link",
    Presentation = "presentation",
    PricingPlan = "pricing-plan",
    Priority = "priority",
    Product = "product",
    Program = "program",
    ProgramStatusUpdate = "program-status-update",
    Project = "project",
    ProjectCategory = "project-category",
    ProjectFeature = "project-feature",
    ProjectOverview = "project-overview",
    ProjectRoleActor = "project-role-actor",
    ProjectShortcut = "project-shortcut",
    ProjectType = "project-type",
    Promotion = "promotion",
    Provider = "provider",
    PublicLink = "public-link",
    Pullrequest = "pullrequest",
    PullRequest = "pull-request",
    PullRequestHistory = "pull-request-history",
    Question = "question",
    Queue = "queue",
    Quote = "quote",
    Recipe = "recipe",
    Relationship = "relationship",
    RemoteLink = "remote-link",
    RemoteLinkHistory = "remote-link-history",
    Repository = "repository",
    RepositoryTransfer = "repository-transfer",
    RequestForm = "request-form",
    RequestType = "request-type",
    Resolution = "resolution",
    ResourceUsageMetric = "resource-usage-metric",
    ResourceUsageRecommendation = "resource-usage-recommendation",
    Role = "role",
    Rule = "rule",
    Schedule = "schedule",
    ScheduleRotation = "schedule-rotation",
    Schema = "schema",
    Scorecard = "scorecard",
    ScreenTab = "screen-tab",
    SecureTunnel = "secure-tunnel",
    SecurityContainer = "security-container",
    SecurityLevel = "security-level",
    SecurityWorkspace = "security-workspace",
    Service = "service",
    ServiceAndJiraProjectRelationship = "service-and-jira-project-relationship",
    ServiceAndOperationsTeamRelationship = "service-and-operations-team-relationship",
    ServiceAndVcsRepositoryRelationship = "service-and-vcs-repository-relationship",
    ServiceRelationship = "service-relationship",
    SharepointDocument = "sharepoint-document",
    ShipToParty = "ship-to-party",
    Site = "site",
    SiteUser = "site-user",
    Sla = "sla",
    Space = "space",
    Spreadsheet = "spreadsheet",
    Sprint = "sprint",
    Staff = "staff",
    StreamhubSchema = "streamhub-schema",
    Subscription = "subscription",
    SupervisoryOrg = "supervisory-org",
    Swimlane = "swimlane",
    Tag = "tag",
    Task = "task",
    Team = "team",
    TeamCalendar = "team-calendar",
    TeamMember = "team-member",
    ThirdPartyGroup = "third-party-group",
    ThirdPartyUser = "third-party-user",
    Timeline = "timeline",
    Tool = "tool",
    TransactionAccount = "transaction-account",
    Type = "type",
    UnifiedAccount = "unified-account",
    UnifiedProfile = "unified-profile",
    User = "user",
    Userbase = "userbase",
    UserBoardConfig = "user-board-config",
    UserBroadcastMessage = "user-broadcast-message",
    UserDefinedParameter = "user-defined-parameter",
    UserGrant = "userGrant",
    UserProperty = "user-property",
    Version = "version",
    VersionApprover = "version-approver",
    Video = "video",
    VideoHistory = "video-history",
    ViewConfig = "view-config",
    Vulnerability = "vulnerability",
    VulnerabilityHistory = "vulnerability-history",
    Webhook = "webhook",
    Whiteboard = "whiteboard",
    WorkbenchResource = "workbench-resource",
    Worker = "worker",
    Workflow = "workflow",
    WorkflowScheme = "workflow-scheme",
    Worklog = "worklog",
    Workspace = "workspace"
}
export { ResourceTypeEnum as ResourceType }
export { ResourceTypeEnum }

export declare const ResourceUsageMetricType: "resource-usage-metric";

export declare const ResourceUsageRecommendationType: "resource-usage-recommendation";

export declare const RoleType: "role";

declare class RovoSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: RovoSiteAriOpts): RovoSiteAri;
    static parse(maybeAri: string): RovoSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { RovoSiteAri }
export { RovoSiteAri as RovoSiteAri_alias_1 }
export { RovoSiteAri as RovoSiteAri_alias_2 }

export declare interface RovoSiteAriOpts {
    siteId: string;
}

declare const RovoSiteAriResourceOwner = "rovo";
export { RovoSiteAriResourceOwner }
export { RovoSiteAriResourceOwner as RovoSiteAriResourceOwner_alias_1 }

declare const RovoSiteAriResourceType = "site";
export { RovoSiteAriResourceType }
export { RovoSiteAriResourceType as RovoSiteAriResourceType_alias_1 }

export declare const rovoSiteAriStaticOpts: AriStaticProperties;

export declare const RuleType: "rule";

declare class RuntimeAuthClientRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleType;
    get roleType(): string;
    static create(opts: RuntimeAuthClientRoleAriOpts): RuntimeAuthClientRoleAri;
    static parse(maybeAri: string): RuntimeAuthClientRoleAri;
    getVariables(): {
        roleType: string;
    };
}
export { RuntimeAuthClientRoleAri }
export { RuntimeAuthClientRoleAri as RuntimeAuthClientRoleAri_alias_1 }
export { RuntimeAuthClientRoleAri as RuntimeAuthClientRoleAri_alias_2 }

export declare interface RuntimeAuthClientRoleAriOpts {
    roleType: string;
}

declare const RuntimeAuthClientRoleAriResourceOwner = "runtime-auth-client";
export { RuntimeAuthClientRoleAriResourceOwner }
export { RuntimeAuthClientRoleAriResourceOwner as RuntimeAuthClientRoleAriResourceOwner_alias_1 }

declare const RuntimeAuthClientRoleAriResourceType = "role";
export { RuntimeAuthClientRoleAriResourceType }
export { RuntimeAuthClientRoleAriResourceType as RuntimeAuthClientRoleAriResourceType_alias_1 }

export declare const runtimeAuthClientRoleAriStaticOpts: AriStaticProperties;

export declare const ScheduleRotationType: "schedule-rotation";

export declare const ScheduleType: "schedule";

export declare const SchemaType: "schema";

export declare const ScorecardType: "scorecard";

export declare const ScreenTabType: "screen-tab";

declare class SearchEventAri extends RegisteredAri {
    private constructor();
    private readonly _eventType;
    private readonly _eventId;
    get eventType(): string;
    get eventId(): string;
    static create(opts: SearchEventAriOpts): SearchEventAri;
    static parse(maybeAri: string): SearchEventAri;
    getVariables(): {
        eventType: string;
        eventId: string;
    };
}
export { SearchEventAri }
export { SearchEventAri as SearchEventAri_alias_1 }
export { SearchEventAri as SearchEventAri_alias_2 }

export declare interface SearchEventAriOpts {
    eventType: string;
    eventId: string;
}

declare const SearchEventAriResourceOwner = "search";
export { SearchEventAriResourceOwner }
export { SearchEventAriResourceOwner as SearchEventAriResourceOwner_alias_1 }

declare const SearchEventAriResourceType = "event";
export { SearchEventAriResourceType }
export { SearchEventAriResourceType as SearchEventAriResourceType_alias_1 }

export declare const searchEventAriStaticOpts: AriStaticProperties;

declare class SearchForwardDocumentAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _documentType;
    private readonly _documentId;
    get activationId(): string;
    get documentType(): string;
    get documentId(): string;
    static create(opts: SearchForwardDocumentAriOpts): SearchForwardDocumentAri;
    static parse(maybeAri: string): SearchForwardDocumentAri;
    getVariables(): {
        activationId: string;
        documentType: string;
        documentId: string;
    };
}
export { SearchForwardDocumentAri }
export { SearchForwardDocumentAri as SearchForwardDocumentAri_alias_1 }
export { SearchForwardDocumentAri as SearchForwardDocumentAri_alias_2 }

export declare interface SearchForwardDocumentAriOpts {
    activationId: string;
    documentType: string;
    documentId: string;
}

declare const SearchForwardDocumentAriResourceOwner = "search";
export { SearchForwardDocumentAriResourceOwner }
export { SearchForwardDocumentAriResourceOwner as SearchForwardDocumentAriResourceOwner_alias_1 }

declare const SearchForwardDocumentAriResourceType = "forward-document";
export { SearchForwardDocumentAriResourceType }
export { SearchForwardDocumentAriResourceType as SearchForwardDocumentAriResourceType_alias_1 }

export declare const searchForwardDocumentAriStaticOpts: AriStaticProperties;

declare class SearchForwardDocumentSubscriptionAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _subscriptionType;
    private readonly _subscriptionId;
    get activationId(): string;
    get subscriptionType(): string;
    get subscriptionId(): string;
    static create(opts: SearchForwardDocumentSubscriptionAriOpts): SearchForwardDocumentSubscriptionAri;
    static parse(maybeAri: string): SearchForwardDocumentSubscriptionAri;
    getVariables(): {
        activationId: string;
        subscriptionType: string;
        subscriptionId: string;
    };
}
export { SearchForwardDocumentSubscriptionAri }
export { SearchForwardDocumentSubscriptionAri as SearchForwardDocumentSubscriptionAri_alias_1 }
export { SearchForwardDocumentSubscriptionAri as SearchForwardDocumentSubscriptionAri_alias_2 }

export declare interface SearchForwardDocumentSubscriptionAriOpts {
    activationId: string;
    subscriptionType: string;
    subscriptionId: string;
}

declare const SearchForwardDocumentSubscriptionAriResourceOwner = "search";
export { SearchForwardDocumentSubscriptionAriResourceOwner }
export { SearchForwardDocumentSubscriptionAriResourceOwner as SearchForwardDocumentSubscriptionAriResourceOwner_alias_1 }

declare const SearchForwardDocumentSubscriptionAriResourceType = "forward-document-subscription";
export { SearchForwardDocumentSubscriptionAriResourceType }
export { SearchForwardDocumentSubscriptionAriResourceType as SearchForwardDocumentSubscriptionAriResourceType_alias_1 }

export declare const searchForwardDocumentSubscriptionAriStaticOpts: AriStaticProperties;

export declare const SecureTunnelType: "secure-tunnel";

export declare const SecurityContainerType: "security-container";

export declare const SecurityLevelType: "security-level";

export declare const SecurityWorkspaceType: "security-workspace";

export declare const SEGMENT_SEPARATOR = ":";

export declare const ServiceAndJiraProjectRelationshipType: "service-and-jira-project-relationship";

export declare const ServiceAndOperationsTeamRelationshipType: "service-and-operations-team-relationship";

export declare const ServiceAndVcsRepositoryRelationshipType: "service-and-vcs-repository-relationship";

export declare const ServiceRelationshipType: "service-relationship";

export declare const ServiceType: "service";

export declare const SharepointDocumentType: "sharepoint-document";

export declare const ShipToPartyType: "ship-to-party";

export declare const SiteType: "site";

export declare const SiteUserType: "site-user";

declare class SlackChannelAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _channelId;
    get workspaceId(): string;
    get channelId(): string;
    static create(opts: SlackChannelAriOpts): SlackChannelAri;
    static parse(maybeAri: string): SlackChannelAri;
    getVariables(): {
        workspaceId: string;
        channelId: string;
    };
}
export { SlackChannelAri }
export { SlackChannelAri as SlackChannelAri_alias_1 }
export { SlackChannelAri as SlackChannelAri_alias_2 }

export declare interface SlackChannelAriOpts {
    workspaceId: string;
    channelId: string;
}

declare const SlackChannelAriResourceOwner = "slack";
export { SlackChannelAriResourceOwner }
export { SlackChannelAriResourceOwner as SlackChannelAriResourceOwner_alias_1 }

declare const SlackChannelAriResourceType = "channel";
export { SlackChannelAriResourceType }
export { SlackChannelAriResourceType as SlackChannelAriResourceType_alias_1 }

export declare const slackChannelAriStaticOpts: AriStaticProperties;

declare class SlackMessageAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _channelId;
    private readonly _messageId;
    get workspaceId(): string;
    get channelId(): string;
    get messageId(): string;
    static create(opts: SlackMessageAriOpts): SlackMessageAri;
    static parse(maybeAri: string): SlackMessageAri;
    getVariables(): {
        workspaceId: string;
        channelId: string;
        messageId: string;
    };
}
export { SlackMessageAri }
export { SlackMessageAri as SlackMessageAri_alias_1 }
export { SlackMessageAri as SlackMessageAri_alias_2 }

export declare interface SlackMessageAriOpts {
    workspaceId: string;
    channelId: string;
    messageId: string;
}

declare const SlackMessageAriResourceOwner = "slack";
export { SlackMessageAriResourceOwner }
export { SlackMessageAriResourceOwner as SlackMessageAriResourceOwner_alias_1 }

declare const SlackMessageAriResourceType = "message";
export { SlackMessageAriResourceType }
export { SlackMessageAriResourceType as SlackMessageAriResourceType_alias_1 }

export declare const slackMessageAriStaticOpts: AriStaticProperties;

export declare const SlaType: "sla";

export declare const SpaceType: "space";

export declare const SpreadsheetType: "spreadsheet";

export declare const SprintType: "sprint";

export declare const StaffType: "staff";

declare class StatuspageRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleId;
    get roleId(): string;
    static create(opts: StatuspageRoleAriOpts): StatuspageRoleAri;
    static parse(maybeAri: string): StatuspageRoleAri;
    getVariables(): {
        roleId: string;
    };
}
export { StatuspageRoleAri }
export { StatuspageRoleAri as StatuspageRoleAri_alias_1 }
export { StatuspageRoleAri as StatuspageRoleAri_alias_2 }

export declare interface StatuspageRoleAriOpts {
    roleId: string;
}

declare const StatuspageRoleAriResourceOwner = "statuspage";
export { StatuspageRoleAriResourceOwner }
export { StatuspageRoleAriResourceOwner as StatuspageRoleAriResourceOwner_alias_1 }

declare const StatuspageRoleAriResourceType = "role";
export { StatuspageRoleAriResourceType }
export { StatuspageRoleAriResourceType as StatuspageRoleAriResourceType_alias_1 }

export declare const statuspageRoleAriStaticOpts: AriStaticProperties;

declare class StatuspageSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: StatuspageSiteAriOpts): StatuspageSiteAri;
    static parse(maybeAri: string): StatuspageSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { StatuspageSiteAri }
export { StatuspageSiteAri as StatuspageSiteAri_alias_1 }
export { StatuspageSiteAri as StatuspageSiteAri_alias_2 }

export declare interface StatuspageSiteAriOpts {
    siteId: string;
}

declare const StatuspageSiteAriResourceOwner = "statuspage";
export { StatuspageSiteAriResourceOwner }
export { StatuspageSiteAriResourceOwner as StatuspageSiteAriResourceOwner_alias_1 }

declare const StatuspageSiteAriResourceType = "site";
export { StatuspageSiteAriResourceType }
export { StatuspageSiteAriResourceType as StatuspageSiteAriResourceType_alias_1 }

export declare const statuspageSiteAriStaticOpts: AriStaticProperties;

export declare const StreamhubSchemaType: "streamhub-schema";

export declare const SubscriptionType: "subscription";

export declare const SupervisoryOrgType: "supervisory-org";

declare class SupportCustomerAri extends RegisteredAri {
    private constructor();
    private readonly _resourceName;
    get resourceName(): string;
    static create(opts: SupportCustomerAriOpts): SupportCustomerAri;
    static parse(maybeAri: string): SupportCustomerAri;
    getVariables(): {
        resourceName: string;
    };
}
export { SupportCustomerAri }
export { SupportCustomerAri as SupportCustomerAri_alias_1 }
export { SupportCustomerAri as SupportCustomerAri_alias_2 }

export declare interface SupportCustomerAriOpts {
    resourceName?: string;
}

declare const SupportCustomerAriResourceOwner = "support";
export { SupportCustomerAriResourceOwner }
export { SupportCustomerAriResourceOwner as SupportCustomerAriResourceOwner_alias_1 }

declare const SupportCustomerAriResourceType = "customer";
export { SupportCustomerAriResourceType }
export { SupportCustomerAriResourceType as SupportCustomerAriResourceType_alias_1 }

export declare const supportCustomerAriStaticOpts: AriStaticProperties;

export declare const SwimlaneType: "swimlane";

export declare const TagType: "tag";

export declare const TaskType: "task";

export declare const TeamCalendarType: "team-calendar";

export declare const TeamMemberType: "team-member";

declare class TeamsTeamAri extends RegisteredAri {
    private constructor();
    private readonly _teamId;
    get teamId(): string;
    static create(opts: TeamsTeamAriOpts): TeamsTeamAri;
    static parse(maybeAri: string): TeamsTeamAri;
    getVariables(): {
        teamId: string;
    };
}
export { TeamsTeamAri }
export { TeamsTeamAri as TeamsTeamAri_alias_1 }
export { TeamsTeamAri as TeamsTeamAri_alias_2 }

export declare interface TeamsTeamAriOpts {
    teamId: string;
}

declare const TeamsTeamAriResourceOwner = "teams";
export { TeamsTeamAriResourceOwner }
export { TeamsTeamAriResourceOwner as TeamsTeamAriResourceOwner_alias_1 }

declare const TeamsTeamAriResourceType = "team";
export { TeamsTeamAriResourceType }
export { TeamsTeamAriResourceType as TeamsTeamAriResourceType_alias_1 }

export declare const teamsTeamAriStaticOpts: AriStaticProperties;

export declare const TeamType: "team";

export declare const ThirdPartyGroupType: "third-party-group";

export declare const ThirdPartyUserType: "third-party-user";

export declare const TimelineType: "timeline";

export declare const ToolType: "tool";

export declare function toSatisfyBenchmark(fn: () => void, runs: number, benchmark: Benchmark): {
    pass: boolean;
    message: () => string;
};

declare class TownsquareCommentAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _commentUuid;
    get siteId(): string;
    get commentUuid(): string;
    static create(opts: TownsquareCommentAriOpts): TownsquareCommentAri;
    static parse(maybeAri: string): TownsquareCommentAri;
    getVariables(): {
        siteId: string;
        commentUuid: string;
    };
}
export { TownsquareCommentAri }
export { TownsquareCommentAri as TownsquareCommentAri_alias_1 }
export { TownsquareCommentAri as TownsquareCommentAri_alias_2 }

export declare interface TownsquareCommentAriOpts {
    siteId: string;
    commentUuid: string;
}

declare const TownsquareCommentAriResourceOwner = "townsquare";
export { TownsquareCommentAriResourceOwner }
export { TownsquareCommentAriResourceOwner as TownsquareCommentAriResourceOwner_alias_1 }

declare const TownsquareCommentAriResourceType = "comment";
export { TownsquareCommentAriResourceType }
export { TownsquareCommentAriResourceType as TownsquareCommentAriResourceType_alias_1 }

export declare const townsquareCommentAriStaticOpts: AriStaticProperties;

declare class TownsquareGoalAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _goalUuid;
    get siteId(): string;
    get goalUuid(): string;
    static create(opts: TownsquareGoalAriOpts): TownsquareGoalAri;
    static parse(maybeAri: string): TownsquareGoalAri;
    getVariables(): {
        siteId: string;
        goalUuid: string;
    };
}
export { TownsquareGoalAri }
export { TownsquareGoalAri as TownsquareGoalAri_alias_1 }
export { TownsquareGoalAri as TownsquareGoalAri_alias_2 }

export declare interface TownsquareGoalAriOpts {
    siteId: string;
    goalUuid: string;
}

declare const TownsquareGoalAriResourceOwner = "townsquare";
export { TownsquareGoalAriResourceOwner }
export { TownsquareGoalAriResourceOwner as TownsquareGoalAriResourceOwner_alias_1 }

declare const TownsquareGoalAriResourceType = "goal";
export { TownsquareGoalAriResourceType }
export { TownsquareGoalAriResourceType as TownsquareGoalAriResourceType_alias_1 }

export declare const townsquareGoalAriStaticOpts: AriStaticProperties;

declare class TownsquareHelpPointerAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _helpPointerUuid;
    get siteId(): string;
    get helpPointerUuid(): string;
    static create(opts: TownsquareHelpPointerAriOpts): TownsquareHelpPointerAri;
    static parse(maybeAri: string): TownsquareHelpPointerAri;
    getVariables(): {
        siteId: string;
        helpPointerUuid: string;
    };
}
export { TownsquareHelpPointerAri }
export { TownsquareHelpPointerAri as TownsquareHelpPointerAri_alias_1 }
export { TownsquareHelpPointerAri as TownsquareHelpPointerAri_alias_2 }

export declare interface TownsquareHelpPointerAriOpts {
    siteId: string;
    helpPointerUuid: string;
}

declare const TownsquareHelpPointerAriResourceOwner = "townsquare";
export { TownsquareHelpPointerAriResourceOwner }
export { TownsquareHelpPointerAriResourceOwner as TownsquareHelpPointerAriResourceOwner_alias_1 }

declare const TownsquareHelpPointerAriResourceType = "help-pointer";
export { TownsquareHelpPointerAriResourceType }
export { TownsquareHelpPointerAriResourceType as TownsquareHelpPointerAriResourceType_alias_1 }

export declare const townsquareHelpPointerAriStaticOpts: AriStaticProperties;

declare class TownsquareLearningAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _learningUuid;
    get siteId(): string;
    get learningUuid(): string;
    static create(opts: TownsquareLearningAriOpts): TownsquareLearningAri;
    static parse(maybeAri: string): TownsquareLearningAri;
    getVariables(): {
        siteId: string;
        learningUuid: string;
    };
}
export { TownsquareLearningAri }
export { TownsquareLearningAri as TownsquareLearningAri_alias_1 }
export { TownsquareLearningAri as TownsquareLearningAri_alias_2 }

export declare interface TownsquareLearningAriOpts {
    siteId: string;
    learningUuid: string;
}

declare const TownsquareLearningAriResourceOwner = "townsquare";
export { TownsquareLearningAriResourceOwner }
export { TownsquareLearningAriResourceOwner as TownsquareLearningAriResourceOwner_alias_1 }

declare const TownsquareLearningAriResourceType = "learning";
export { TownsquareLearningAriResourceType }
export { TownsquareLearningAriResourceType as TownsquareLearningAriResourceType_alias_1 }

export declare const townsquareLearningAriStaticOpts: AriStaticProperties;

declare class TownsquareProjectAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _projectUuid;
    get siteId(): string;
    get projectUuid(): string;
    static create(opts: TownsquareProjectAriOpts): TownsquareProjectAri;
    static parse(maybeAri: string): TownsquareProjectAri;
    getVariables(): {
        siteId: string;
        projectUuid: string;
    };
}
export { TownsquareProjectAri }
export { TownsquareProjectAri as TownsquareProjectAri_alias_1 }
export { TownsquareProjectAri as TownsquareProjectAri_alias_2 }

export declare interface TownsquareProjectAriOpts {
    siteId: string;
    projectUuid: string;
}

declare const TownsquareProjectAriResourceOwner = "townsquare";
export { TownsquareProjectAriResourceOwner }
export { TownsquareProjectAriResourceOwner as TownsquareProjectAriResourceOwner_alias_1 }

declare const TownsquareProjectAriResourceType = "project";
export { TownsquareProjectAriResourceType }
export { TownsquareProjectAriResourceType as TownsquareProjectAriResourceType_alias_1 }

export declare const townsquareProjectAriStaticOpts: AriStaticProperties;

declare class TownsquareQuestionAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _questionUuid;
    get siteId(): string;
    get questionUuid(): string;
    static create(opts: TownsquareQuestionAriOpts): TownsquareQuestionAri;
    static parse(maybeAri: string): TownsquareQuestionAri;
    getVariables(): {
        siteId: string;
        questionUuid: string;
    };
}
export { TownsquareQuestionAri }
export { TownsquareQuestionAri as TownsquareQuestionAri_alias_1 }
export { TownsquareQuestionAri as TownsquareQuestionAri_alias_2 }

export declare interface TownsquareQuestionAriOpts {
    siteId: string;
    questionUuid: string;
}

declare const TownsquareQuestionAriResourceOwner = "townsquare";
export { TownsquareQuestionAriResourceOwner }
export { TownsquareQuestionAriResourceOwner as TownsquareQuestionAriResourceOwner_alias_1 }

declare const TownsquareQuestionAriResourceType = "question";
export { TownsquareQuestionAriResourceType }
export { TownsquareQuestionAriResourceType as TownsquareQuestionAriResourceType_alias_1 }

export declare const townsquareQuestionAriStaticOpts: AriStaticProperties;

declare class TownsquareRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleType;
    get roleType(): string;
    static create(opts: TownsquareRoleAriOpts): TownsquareRoleAri;
    static parse(maybeAri: string): TownsquareRoleAri;
    getVariables(): {
        roleType: string;
    };
}
export { TownsquareRoleAri }
export { TownsquareRoleAri as TownsquareRoleAri_alias_1 }
export { TownsquareRoleAri as TownsquareRoleAri_alias_2 }

export declare interface TownsquareRoleAriOpts {
    roleType: string;
}

declare const TownsquareRoleAriResourceOwner = "townsquare";
export { TownsquareRoleAriResourceOwner }
export { TownsquareRoleAriResourceOwner as TownsquareRoleAriResourceOwner_alias_1 }

declare const TownsquareRoleAriResourceType = "role";
export { TownsquareRoleAriResourceType }
export { TownsquareRoleAriResourceType as TownsquareRoleAriResourceType_alias_1 }

export declare const townsquareRoleAriStaticOpts: AriStaticProperties;

declare class TownsquareSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: TownsquareSiteAriOpts): TownsquareSiteAri;
    static parse(maybeAri: string): TownsquareSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { TownsquareSiteAri }
export { TownsquareSiteAri as TownsquareSiteAri_alias_1 }
export { TownsquareSiteAri as TownsquareSiteAri_alias_2 }

export declare interface TownsquareSiteAriOpts {
    siteId: string;
}

declare const TownsquareSiteAriResourceOwner = "townsquare";
export { TownsquareSiteAriResourceOwner }
export { TownsquareSiteAriResourceOwner as TownsquareSiteAriResourceOwner_alias_1 }

declare const TownsquareSiteAriResourceType = "site";
export { TownsquareSiteAriResourceType }
export { TownsquareSiteAriResourceType as TownsquareSiteAriResourceType_alias_1 }

export declare const townsquareSiteAriStaticOpts: AriStaticProperties;

declare class TownsquareTagAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _tagUuid;
    get siteId(): string;
    get tagUuid(): string;
    static create(opts: TownsquareTagAriOpts): TownsquareTagAri;
    static parse(maybeAri: string): TownsquareTagAri;
    getVariables(): {
        siteId: string;
        tagUuid: string;
    };
}
export { TownsquareTagAri }
export { TownsquareTagAri as TownsquareTagAri_alias_1 }
export { TownsquareTagAri as TownsquareTagAri_alias_2 }

export declare interface TownsquareTagAriOpts {
    siteId: string;
    tagUuid: string;
}

declare const TownsquareTagAriResourceOwner = "townsquare";
export { TownsquareTagAriResourceOwner }
export { TownsquareTagAriResourceOwner as TownsquareTagAriResourceOwner_alias_1 }

declare const TownsquareTagAriResourceType = "tag";
export { TownsquareTagAriResourceType }
export { TownsquareTagAriResourceType as TownsquareTagAriResourceType_alias_1 }

export declare const townsquareTagAriStaticOpts: AriStaticProperties;

declare class TownsquareWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    private readonly _activationId;
    get siteId(): string;
    get activationId(): string;
    static create(opts: TownsquareWorkspaceAriOpts): TownsquareWorkspaceAri;
    static parse(maybeAri: string): TownsquareWorkspaceAri;
    getVariables(): {
        siteId: string;
        activationId: string;
    };
}
export { TownsquareWorkspaceAri }
export { TownsquareWorkspaceAri as TownsquareWorkspaceAri_alias_1 }
export { TownsquareWorkspaceAri as TownsquareWorkspaceAri_alias_2 }

export declare interface TownsquareWorkspaceAriOpts {
    siteId: string;
    activationId: string;
}

declare const TownsquareWorkspaceAriResourceOwner = "townsquare";
export { TownsquareWorkspaceAriResourceOwner }
export { TownsquareWorkspaceAriResourceOwner as TownsquareWorkspaceAriResourceOwner_alias_1 }

declare const TownsquareWorkspaceAriResourceType = "workspace";
export { TownsquareWorkspaceAriResourceType }
export { TownsquareWorkspaceAriResourceType as TownsquareWorkspaceAriResourceType_alias_1 }

export declare const townsquareWorkspaceAriStaticOpts: AriStaticProperties;

export declare const TransactionAccountType: "transaction-account";

declare class TrelloAttachmentAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _cardId;
    private readonly _attachmentId;
    get workspaceId(): string;
    get cardId(): string;
    get attachmentId(): string;
    static create(opts: TrelloAttachmentAriOpts): TrelloAttachmentAri;
    static parse(maybeAri: string): TrelloAttachmentAri;
    getVariables(): {
        workspaceId: string;
        cardId: string;
        attachmentId: string;
    };
}
export { TrelloAttachmentAri }
export { TrelloAttachmentAri as TrelloAttachmentAri_alias_1 }
export { TrelloAttachmentAri as TrelloAttachmentAri_alias_2 }

export declare interface TrelloAttachmentAriOpts {
    workspaceId?: string;
    cardId?: string;
    attachmentId?: string;
}

declare const TrelloAttachmentAriResourceOwner = "trello";
export { TrelloAttachmentAriResourceOwner }
export { TrelloAttachmentAriResourceOwner as TrelloAttachmentAriResourceOwner_alias_1 }

declare const TrelloAttachmentAriResourceType = "attachment";
export { TrelloAttachmentAriResourceType }
export { TrelloAttachmentAriResourceType as TrelloAttachmentAriResourceType_alias_1 }

export declare const trelloAttachmentAriStaticOpts: AriStaticProperties;

declare class TrelloBoardAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _boardId;
    get workspaceId(): string;
    get boardId(): string;
    static create(opts: TrelloBoardAriOpts): TrelloBoardAri;
    static parse(maybeAri: string): TrelloBoardAri;
    getVariables(): {
        workspaceId: string;
        boardId: string;
    };
}
export { TrelloBoardAri }
export { TrelloBoardAri as TrelloBoardAri_alias_1 }
export { TrelloBoardAri as TrelloBoardAri_alias_2 }

export declare interface TrelloBoardAriOpts {
    workspaceId?: string;
    boardId?: string;
}

declare const TrelloBoardAriResourceOwner = "trello";
export { TrelloBoardAriResourceOwner }
export { TrelloBoardAriResourceOwner as TrelloBoardAriResourceOwner_alias_1 }

declare const TrelloBoardAriResourceType = "board";
export { TrelloBoardAriResourceType }
export { TrelloBoardAriResourceType as TrelloBoardAriResourceType_alias_1 }

export declare const trelloBoardAriStaticOpts: AriStaticProperties;

declare class TrelloCardAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _cardId;
    get workspaceId(): string;
    get cardId(): string;
    static create(opts: TrelloCardAriOpts): TrelloCardAri;
    static parse(maybeAri: string): TrelloCardAri;
    getVariables(): {
        workspaceId: string;
        cardId: string;
    };
}
export { TrelloCardAri }
export { TrelloCardAri as TrelloCardAri_alias_1 }
export { TrelloCardAri as TrelloCardAri_alias_2 }

export declare interface TrelloCardAriOpts {
    workspaceId?: string;
    cardId?: string;
}

declare const TrelloCardAriResourceOwner = "trello";
export { TrelloCardAriResourceOwner }
export { TrelloCardAriResourceOwner as TrelloCardAriResourceOwner_alias_1 }

declare const TrelloCardAriResourceType = "card";
export { TrelloCardAriResourceType }
export { TrelloCardAriResourceType as TrelloCardAriResourceType_alias_1 }

export declare const trelloCardAriStaticOpts: AriStaticProperties;

declare class TrelloEnterpriseAri extends RegisteredAri {
    private constructor();
    private readonly _enterpriseId;
    get enterpriseId(): string;
    static create(opts: TrelloEnterpriseAriOpts): TrelloEnterpriseAri;
    static parse(maybeAri: string): TrelloEnterpriseAri;
    getVariables(): {
        enterpriseId: string;
    };
}
export { TrelloEnterpriseAri }
export { TrelloEnterpriseAri as TrelloEnterpriseAri_alias_1 }
export { TrelloEnterpriseAri as TrelloEnterpriseAri_alias_2 }

export declare interface TrelloEnterpriseAriOpts {
    enterpriseId?: string;
}

declare const TrelloEnterpriseAriResourceOwner = "trello";
export { TrelloEnterpriseAriResourceOwner }
export { TrelloEnterpriseAriResourceOwner as TrelloEnterpriseAriResourceOwner_alias_1 }

declare const TrelloEnterpriseAriResourceType = "enterprise";
export { TrelloEnterpriseAriResourceType }
export { TrelloEnterpriseAriResourceType as TrelloEnterpriseAriResourceType_alias_1 }

export declare const trelloEnterpriseAriStaticOpts: AriStaticProperties;

declare class TrelloListAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    private readonly _listId;
    get workspaceId(): string;
    get listId(): string;
    static create(opts: TrelloListAriOpts): TrelloListAri;
    static parse(maybeAri: string): TrelloListAri;
    getVariables(): {
        workspaceId: string;
        listId: string;
    };
}
export { TrelloListAri }
export { TrelloListAri as TrelloListAri_alias_1 }
export { TrelloListAri as TrelloListAri_alias_2 }

export declare interface TrelloListAriOpts {
    workspaceId?: string;
    listId?: string;
}

declare const TrelloListAriResourceOwner = "trello";
export { TrelloListAriResourceOwner }
export { TrelloListAriResourceOwner as TrelloListAriResourceOwner_alias_1 }

declare const TrelloListAriResourceType = "list";
export { TrelloListAriResourceType }
export { TrelloListAriResourceType as TrelloListAriResourceType_alias_1 }

export declare const trelloListAriStaticOpts: AriStaticProperties;

declare class TrelloRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleGroup;
    private readonly _roleType;
    get roleGroup(): string;
    get roleType(): string;
    static create(opts: TrelloRoleAriOpts): TrelloRoleAri;
    static parse(maybeAri: string): TrelloRoleAri;
    getVariables(): {
        roleGroup: string;
        roleType: string;
    };
}
export { TrelloRoleAri }
export { TrelloRoleAri as TrelloRoleAri_alias_1 }
export { TrelloRoleAri as TrelloRoleAri_alias_2 }

export declare interface TrelloRoleAriOpts {
    roleGroup: string;
    roleType: string;
}

declare const TrelloRoleAriResourceOwner = "trello";
export { TrelloRoleAriResourceOwner }
export { TrelloRoleAriResourceOwner as TrelloRoleAriResourceOwner_alias_1 }

declare const TrelloRoleAriResourceType = "role";
export { TrelloRoleAriResourceType }
export { TrelloRoleAriResourceType as TrelloRoleAriResourceType_alias_1 }

export declare const trelloRoleAriStaticOpts: AriStaticProperties;

declare class TrelloSiteAri extends RegisteredAri {
    private constructor();
    static create(opts: TrelloSiteAriOpts): TrelloSiteAri;
    static parse(maybeAri: string): TrelloSiteAri;
    getVariables(): {};
}
export { TrelloSiteAri }
export { TrelloSiteAri as TrelloSiteAri_alias_1 }
export { TrelloSiteAri as TrelloSiteAri_alias_2 }

export declare interface TrelloSiteAriOpts {
}

declare const TrelloSiteAriResourceOwner = "trello";
export { TrelloSiteAriResourceOwner }
export { TrelloSiteAriResourceOwner as TrelloSiteAriResourceOwner_alias_1 }

declare const TrelloSiteAriResourceType = "site";
export { TrelloSiteAriResourceType }
export { TrelloSiteAriResourceType as TrelloSiteAriResourceType_alias_1 }

export declare const trelloSiteAriStaticOpts: AriStaticProperties;

declare class TrelloUserAri extends RegisteredAri {
    private constructor();
    private readonly _userId;
    get userId(): string;
    static create(opts: TrelloUserAriOpts): TrelloUserAri;
    static parse(maybeAri: string): TrelloUserAri;
    getVariables(): {
        userId: string;
    };
}
export { TrelloUserAri }
export { TrelloUserAri as TrelloUserAri_alias_1 }
export { TrelloUserAri as TrelloUserAri_alias_2 }

export declare interface TrelloUserAriOpts {
    userId?: string;
}

declare const TrelloUserAriResourceOwner = "trello";
export { TrelloUserAriResourceOwner }
export { TrelloUserAriResourceOwner as TrelloUserAriResourceOwner_alias_1 }

declare const TrelloUserAriResourceType = "user";
export { TrelloUserAriResourceType }
export { TrelloUserAriResourceType as TrelloUserAriResourceType_alias_1 }

export declare const trelloUserAriStaticOpts: AriStaticProperties;

declare class TrelloWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _workspaceId;
    get workspaceId(): string;
    static create(opts: TrelloWorkspaceAriOpts): TrelloWorkspaceAri;
    static parse(maybeAri: string): TrelloWorkspaceAri;
    getVariables(): {
        workspaceId: string;
    };
}
export { TrelloWorkspaceAri }
export { TrelloWorkspaceAri as TrelloWorkspaceAri_alias_1 }
export { TrelloWorkspaceAri as TrelloWorkspaceAri_alias_2 }

export declare interface TrelloWorkspaceAriOpts {
    workspaceId?: string;
}

declare const TrelloWorkspaceAriResourceOwner = "trello";
export { TrelloWorkspaceAriResourceOwner }
export { TrelloWorkspaceAriResourceOwner as TrelloWorkspaceAriResourceOwner_alias_1 }

declare const TrelloWorkspaceAriResourceType = "workspace";
export { TrelloWorkspaceAriResourceType }
export { TrelloWorkspaceAriResourceType as TrelloWorkspaceAriResourceType_alias_1 }

export declare const trelloWorkspaceAriStaticOpts: AriStaticProperties;

export declare const TypeType: "type";

export declare const UnifiedAccountType: "unified-account";

declare class UnifiedHelpRoleAri extends RegisteredAri {
    private constructor();
    private readonly _roleType;
    get roleType(): string;
    static create(opts: UnifiedHelpRoleAriOpts): UnifiedHelpRoleAri;
    static parse(maybeAri: string): UnifiedHelpRoleAri;
    getVariables(): {
        roleType: string;
    };
}
export { UnifiedHelpRoleAri }
export { UnifiedHelpRoleAri as UnifiedHelpRoleAri_alias_1 }
export { UnifiedHelpRoleAri as UnifiedHelpRoleAri_alias_2 }

export declare interface UnifiedHelpRoleAriOpts {
    roleType: string;
}

declare const UnifiedHelpRoleAriResourceOwner = "unified-help";
export { UnifiedHelpRoleAriResourceOwner }
export { UnifiedHelpRoleAriResourceOwner as UnifiedHelpRoleAriResourceOwner_alias_1 }

declare const UnifiedHelpRoleAriResourceType = "role";
export { UnifiedHelpRoleAriResourceType }
export { UnifiedHelpRoleAriResourceType as UnifiedHelpRoleAriResourceType_alias_1 }

export declare const unifiedHelpRoleAriStaticOpts: AriStaticProperties;

declare class UnifiedHelpSiteAri extends RegisteredAri {
    private constructor();
    private readonly _siteId;
    get siteId(): string;
    static create(opts: UnifiedHelpSiteAriOpts): UnifiedHelpSiteAri;
    static parse(maybeAri: string): UnifiedHelpSiteAri;
    getVariables(): {
        siteId: string;
    };
}
export { UnifiedHelpSiteAri }
export { UnifiedHelpSiteAri as UnifiedHelpSiteAri_alias_1 }
export { UnifiedHelpSiteAri as UnifiedHelpSiteAri_alias_2 }

export declare interface UnifiedHelpSiteAriOpts {
    siteId: string;
}

declare const UnifiedHelpSiteAriResourceOwner = "unified-help";
export { UnifiedHelpSiteAriResourceOwner }
export { UnifiedHelpSiteAriResourceOwner as UnifiedHelpSiteAriResourceOwner_alias_1 }

declare const UnifiedHelpSiteAriResourceType = "site";
export { UnifiedHelpSiteAriResourceType }
export { UnifiedHelpSiteAriResourceType as UnifiedHelpSiteAriResourceType_alias_1 }

export declare const unifiedHelpSiteAriStaticOpts: AriStaticProperties;

declare class UnifiedHelpWorkspaceAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    get activationId(): string;
    static create(opts: UnifiedHelpWorkspaceAriOpts): UnifiedHelpWorkspaceAri;
    static parse(maybeAri: string): UnifiedHelpWorkspaceAri;
    getVariables(): {
        activationId: string;
    };
}
export { UnifiedHelpWorkspaceAri }
export { UnifiedHelpWorkspaceAri as UnifiedHelpWorkspaceAri_alias_1 }
export { UnifiedHelpWorkspaceAri as UnifiedHelpWorkspaceAri_alias_2 }

export declare interface UnifiedHelpWorkspaceAriOpts {
    activationId: string;
}

declare const UnifiedHelpWorkspaceAriResourceOwner = "unified-help";
export { UnifiedHelpWorkspaceAriResourceOwner }
export { UnifiedHelpWorkspaceAriResourceOwner as UnifiedHelpWorkspaceAriResourceOwner_alias_1 }

declare const UnifiedHelpWorkspaceAriResourceType = "workspace";
export { UnifiedHelpWorkspaceAriResourceType }
export { UnifiedHelpWorkspaceAriResourceType as UnifiedHelpWorkspaceAriResourceType_alias_1 }

export declare const unifiedHelpWorkspaceAriStaticOpts: AriStaticProperties;

declare class UnifiedPortableProfileLinkedAccountAri extends RegisteredAri {
    private constructor();
    private readonly _linkedAccountInternalId;
    get linkedAccountInternalId(): string;
    static create(opts: UnifiedPortableProfileLinkedAccountAriOpts): UnifiedPortableProfileLinkedAccountAri;
    static parse(maybeAri: string): UnifiedPortableProfileLinkedAccountAri;
    getVariables(): {
        linkedAccountInternalId: string;
    };
}
export { UnifiedPortableProfileLinkedAccountAri }
export { UnifiedPortableProfileLinkedAccountAri as UnifiedPortableProfileLinkedAccountAri_alias_1 }
export { UnifiedPortableProfileLinkedAccountAri as UnifiedPortableProfileLinkedAccountAri_alias_2 }

export declare interface UnifiedPortableProfileLinkedAccountAriOpts {
    linkedAccountInternalId: string;
}

declare const UnifiedPortableProfileLinkedAccountAriResourceOwner = "unified-portable-profile";
export { UnifiedPortableProfileLinkedAccountAriResourceOwner }
export { UnifiedPortableProfileLinkedAccountAriResourceOwner as UnifiedPortableProfileLinkedAccountAriResourceOwner_alias_1 }

declare const UnifiedPortableProfileLinkedAccountAriResourceType = "linked-account";
export { UnifiedPortableProfileLinkedAccountAriResourceType }
export { UnifiedPortableProfileLinkedAccountAriResourceType as UnifiedPortableProfileLinkedAccountAriResourceType_alias_1 }

export declare const unifiedPortableProfileLinkedAccountAriStaticOpts: AriStaticProperties;

declare class UnifiedPortableProfileParentAccountAri extends RegisteredAri {
    private constructor();
    private readonly _parentAccountInternalId;
    get parentAccountInternalId(): string;
    static create(opts: UnifiedPortableProfileParentAccountAriOpts): UnifiedPortableProfileParentAccountAri;
    static parse(maybeAri: string): UnifiedPortableProfileParentAccountAri;
    getVariables(): {
        parentAccountInternalId: string;
    };
}
export { UnifiedPortableProfileParentAccountAri }
export { UnifiedPortableProfileParentAccountAri as UnifiedPortableProfileParentAccountAri_alias_1 }
export { UnifiedPortableProfileParentAccountAri as UnifiedPortableProfileParentAccountAri_alias_2 }

export declare interface UnifiedPortableProfileParentAccountAriOpts {
    parentAccountInternalId: string;
}

declare const UnifiedPortableProfileParentAccountAriResourceOwner = "unified-portable-profile";
export { UnifiedPortableProfileParentAccountAriResourceOwner }
export { UnifiedPortableProfileParentAccountAriResourceOwner as UnifiedPortableProfileParentAccountAriResourceOwner_alias_1 }

declare const UnifiedPortableProfileParentAccountAriResourceType = "parent-account";
export { UnifiedPortableProfileParentAccountAriResourceType }
export { UnifiedPortableProfileParentAccountAriResourceType as UnifiedPortableProfileParentAccountAriResourceType_alias_1 }

export declare const unifiedPortableProfileParentAccountAriStaticOpts: AriStaticProperties;

declare class UnifiedPortableProfileUnifiedAccountAri extends RegisteredAri {
    private constructor();
    private readonly _linkedAccountInternalId;
    get linkedAccountInternalId(): string;
    static create(opts: UnifiedPortableProfileUnifiedAccountAriOpts): UnifiedPortableProfileUnifiedAccountAri;
    static parse(maybeAri: string): UnifiedPortableProfileUnifiedAccountAri;
    getVariables(): {
        linkedAccountInternalId: string;
    };
}
export { UnifiedPortableProfileUnifiedAccountAri }
export { UnifiedPortableProfileUnifiedAccountAri as UnifiedPortableProfileUnifiedAccountAri_alias_1 }
export { UnifiedPortableProfileUnifiedAccountAri as UnifiedPortableProfileUnifiedAccountAri_alias_2 }

export declare interface UnifiedPortableProfileUnifiedAccountAriOpts {
    linkedAccountInternalId: string;
}

declare const UnifiedPortableProfileUnifiedAccountAriResourceOwner = "unified-portable-profile";
export { UnifiedPortableProfileUnifiedAccountAriResourceOwner }
export { UnifiedPortableProfileUnifiedAccountAriResourceOwner as UnifiedPortableProfileUnifiedAccountAriResourceOwner_alias_1 }

declare const UnifiedPortableProfileUnifiedAccountAriResourceType = "unified-account";
export { UnifiedPortableProfileUnifiedAccountAriResourceType }
export { UnifiedPortableProfileUnifiedAccountAriResourceType as UnifiedPortableProfileUnifiedAccountAriResourceType_alias_1 }

export declare const unifiedPortableProfileUnifiedAccountAriStaticOpts: AriStaticProperties;

declare class UnifiedPortableProfileUnifiedProfileAri extends RegisteredAri {
    private constructor();
    private readonly _unifiedProfileInternalId;
    get unifiedProfileInternalId(): string;
    static create(opts: UnifiedPortableProfileUnifiedProfileAriOpts): UnifiedPortableProfileUnifiedProfileAri;
    static parse(maybeAri: string): UnifiedPortableProfileUnifiedProfileAri;
    getVariables(): {
        unifiedProfileInternalId: string;
    };
}
export { UnifiedPortableProfileUnifiedProfileAri }
export { UnifiedPortableProfileUnifiedProfileAri as UnifiedPortableProfileUnifiedProfileAri_alias_1 }
export { UnifiedPortableProfileUnifiedProfileAri as UnifiedPortableProfileUnifiedProfileAri_alias_2 }

export declare interface UnifiedPortableProfileUnifiedProfileAriOpts {
    unifiedProfileInternalId: string;
}

declare const UnifiedPortableProfileUnifiedProfileAriResourceOwner = "unified-portable-profile";
export { UnifiedPortableProfileUnifiedProfileAriResourceOwner }
export { UnifiedPortableProfileUnifiedProfileAriResourceOwner as UnifiedPortableProfileUnifiedProfileAriResourceOwner_alias_1 }

declare const UnifiedPortableProfileUnifiedProfileAriResourceType = "unified-profile";
export { UnifiedPortableProfileUnifiedProfileAriResourceType }
export { UnifiedPortableProfileUnifiedProfileAriResourceType as UnifiedPortableProfileUnifiedProfileAriResourceType_alias_1 }

export declare const unifiedPortableProfileUnifiedProfileAriStaticOpts: AriStaticProperties;

export declare const UnifiedProfileType: "unified-profile";

export declare type UnknownResourceOwner = string;

export declare type UnknownResourceType = string;

export declare type UnknownResourceType_alias_1 = string;

export declare const UserbaseType: "userbase";

export declare const UserBoardConfigType: "user-board-config";

export declare const UserBroadcastMessageType: "user-broadcast-message";

export declare const UserDefinedParameterType: "user-defined-parameter";

export declare const UserGrantType: "userGrant";

export declare const UserPropertyType: "user-property";

export declare const UserType: "user";

export declare function validateAriQualifier(qualifier: any): asserts qualifier is AriQualifier;

export declare function validateArmQualifier(qualifier: any): asserts qualifier is ArmQualifier;

export declare function validateAtiQualifier(qualifier: any): asserts qualifier is AtiQualifier;

export declare function validateCloudId(cloudId: any, format?: RegExp): asserts cloudId is CloudId;

export declare function validateNullableResourceMatcher(maybeMatcher: string): asserts maybeMatcher is ResourceMatcher;

export declare function validatePlatformQualifier(qualifier: any): asserts qualifier is PlatformQualifier;

export declare function validateResourceId(id: string, format?: RegExp, key?: string): asserts id is ResourceId;

export declare function validateResourceIdSegments(resourceIdSegmentValues: Record<string, string>, resourceIdSegmentFormats?: Record<string, RegExp>): asserts resourceIdSegmentValues is Record<string, ResourceId>;

export declare function validateResourceMatcher(maybeMatcher: string): asserts maybeMatcher is ResourceMatcher;

export declare function validateResourceOwner(owner: any, expectedResourceOwner?: ResourceOwner_alias_1 | UnknownResourceOwner): asserts owner is ResourceOwner_alias_1 | UnknownResourceOwner;

export declare function validateResourceType(type: unknown, expectedResourceType?: ResourceType_alias_1 | UnknownResourceType): asserts type is ResourceType_alias_1 | UnknownResourceType;

declare class ValidationError extends Error {
}
export { ValidationError }
export { ValidationError as ValidationError_alias_1 }

export declare const VersionApproverType: "version-approver";

export declare const VersionType: "version";

export declare const VideoHistoryType: "video-history";

export declare const VideoType: "video";

export declare const ViewConfigType: "view-config";

declare class VirtualAgentConfigurationAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _configurationId;
    get activationId(): string;
    get configurationId(): string;
    static create(opts: VirtualAgentConfigurationAriOpts): VirtualAgentConfigurationAri;
    static parse(maybeAri: string): VirtualAgentConfigurationAri;
    getVariables(): {
        activationId: string;
        configurationId: string;
    };
}
export { VirtualAgentConfigurationAri }
export { VirtualAgentConfigurationAri as VirtualAgentConfigurationAri_alias_1 }
export { VirtualAgentConfigurationAri as VirtualAgentConfigurationAri_alias_2 }

export declare interface VirtualAgentConfigurationAriOpts {
    activationId: string;
    configurationId: string;
}

declare const VirtualAgentConfigurationAriResourceOwner = "virtual-agent";
export { VirtualAgentConfigurationAriResourceOwner }
export { VirtualAgentConfigurationAriResourceOwner as VirtualAgentConfigurationAriResourceOwner_alias_1 }

declare const VirtualAgentConfigurationAriResourceType = "configuration";
export { VirtualAgentConfigurationAriResourceType }
export { VirtualAgentConfigurationAriResourceType as VirtualAgentConfigurationAriResourceType_alias_1 }

export declare const virtualAgentConfigurationAriStaticOpts: AriStaticProperties;

declare class VirtualAgentConversationAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _configurationId;
    private readonly _conversationId;
    get activationId(): string;
    get configurationId(): string;
    get conversationId(): string;
    static create(opts: VirtualAgentConversationAriOpts): VirtualAgentConversationAri;
    static parse(maybeAri: string): VirtualAgentConversationAri;
    getVariables(): {
        activationId: string;
        configurationId: string;
        conversationId: string;
    };
}
export { VirtualAgentConversationAri }
export { VirtualAgentConversationAri as VirtualAgentConversationAri_alias_1 }
export { VirtualAgentConversationAri as VirtualAgentConversationAri_alias_2 }

export declare interface VirtualAgentConversationAriOpts {
    activationId: string;
    configurationId: string;
    conversationId: string;
}

declare const VirtualAgentConversationAriResourceOwner = "virtual-agent";
export { VirtualAgentConversationAriResourceOwner }
export { VirtualAgentConversationAriResourceOwner as VirtualAgentConversationAriResourceOwner_alias_1 }

declare const VirtualAgentConversationAriResourceType = "conversation";
export { VirtualAgentConversationAriResourceType }
export { VirtualAgentConversationAriResourceType as VirtualAgentConversationAriResourceType_alias_1 }

export declare const virtualAgentConversationAriStaticOpts: AriStaticProperties;

declare class VirtualAgentFlowEditorAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _configurationId;
    private readonly _flowEditorId;
    get activationId(): string;
    get configurationId(): string;
    get flowEditorId(): string;
    static create(opts: VirtualAgentFlowEditorAriOpts): VirtualAgentFlowEditorAri;
    static parse(maybeAri: string): VirtualAgentFlowEditorAri;
    getVariables(): {
        activationId: string;
        configurationId: string;
        flowEditorId: string;
    };
}
export { VirtualAgentFlowEditorAri }
export { VirtualAgentFlowEditorAri as VirtualAgentFlowEditorAri_alias_1 }
export { VirtualAgentFlowEditorAri as VirtualAgentFlowEditorAri_alias_2 }

export declare interface VirtualAgentFlowEditorAriOpts {
    activationId: string;
    configurationId: string;
    flowEditorId: string;
}

declare const VirtualAgentFlowEditorAriResourceOwner = "virtual-agent";
export { VirtualAgentFlowEditorAriResourceOwner }
export { VirtualAgentFlowEditorAriResourceOwner as VirtualAgentFlowEditorAriResourceOwner_alias_1 }

declare const VirtualAgentFlowEditorAriResourceType = "flow-editor";
export { VirtualAgentFlowEditorAriResourceType }
export { VirtualAgentFlowEditorAriResourceType as VirtualAgentFlowEditorAriResourceType_alias_1 }

export declare const virtualAgentFlowEditorAriStaticOpts: AriStaticProperties;

declare class VirtualAgentIntentProjectionAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _configurationId;
    private readonly _intentId;
    get activationId(): string;
    get configurationId(): string;
    get intentId(): string;
    static create(opts: VirtualAgentIntentProjectionAriOpts): VirtualAgentIntentProjectionAri;
    static parse(maybeAri: string): VirtualAgentIntentProjectionAri;
    getVariables(): {
        activationId: string;
        configurationId: string;
        intentId: string;
    };
}
export { VirtualAgentIntentProjectionAri }
export { VirtualAgentIntentProjectionAri as VirtualAgentIntentProjectionAri_alias_1 }
export { VirtualAgentIntentProjectionAri as VirtualAgentIntentProjectionAri_alias_2 }

export declare interface VirtualAgentIntentProjectionAriOpts {
    activationId: string;
    configurationId: string;
    intentId: string;
}

declare const VirtualAgentIntentProjectionAriResourceOwner = "virtual-agent";
export { VirtualAgentIntentProjectionAriResourceOwner }
export { VirtualAgentIntentProjectionAriResourceOwner as VirtualAgentIntentProjectionAriResourceOwner_alias_1 }

declare const VirtualAgentIntentProjectionAriResourceType = "intent-projection";
export { VirtualAgentIntentProjectionAriResourceType }
export { VirtualAgentIntentProjectionAriResourceType as VirtualAgentIntentProjectionAriResourceType_alias_1 }

export declare const virtualAgentIntentProjectionAriStaticOpts: AriStaticProperties;

declare class VirtualAgentIntentQuestionProjectionAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _configurationId;
    private readonly _intentQuestionId;
    get activationId(): string;
    get configurationId(): string;
    get intentQuestionId(): string;
    static create(opts: VirtualAgentIntentQuestionProjectionAriOpts): VirtualAgentIntentQuestionProjectionAri;
    static parse(maybeAri: string): VirtualAgentIntentQuestionProjectionAri;
    getVariables(): {
        activationId: string;
        configurationId: string;
        intentQuestionId: string;
    };
}
export { VirtualAgentIntentQuestionProjectionAri }
export { VirtualAgentIntentQuestionProjectionAri as VirtualAgentIntentQuestionProjectionAri_alias_1 }
export { VirtualAgentIntentQuestionProjectionAri as VirtualAgentIntentQuestionProjectionAri_alias_2 }

export declare interface VirtualAgentIntentQuestionProjectionAriOpts {
    activationId: string;
    configurationId: string;
    intentQuestionId: string;
}

declare const VirtualAgentIntentQuestionProjectionAriResourceOwner = "virtual-agent";
export { VirtualAgentIntentQuestionProjectionAriResourceOwner }
export { VirtualAgentIntentQuestionProjectionAriResourceOwner as VirtualAgentIntentQuestionProjectionAriResourceOwner_alias_1 }

declare const VirtualAgentIntentQuestionProjectionAriResourceType = "intent-question-projection";
export { VirtualAgentIntentQuestionProjectionAriResourceType }
export { VirtualAgentIntentQuestionProjectionAriResourceType as VirtualAgentIntentQuestionProjectionAriResourceType_alias_1 }

export declare const virtualAgentIntentQuestionProjectionAriStaticOpts: AriStaticProperties;

declare class VirtualAgentIntentRuleProjectionAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _configurationId;
    private readonly _intentId;
    get activationId(): string;
    get configurationId(): string;
    get intentId(): string;
    static create(opts: VirtualAgentIntentRuleProjectionAriOpts): VirtualAgentIntentRuleProjectionAri;
    static parse(maybeAri: string): VirtualAgentIntentRuleProjectionAri;
    getVariables(): {
        activationId: string;
        configurationId: string;
        intentId: string;
    };
}
export { VirtualAgentIntentRuleProjectionAri }
export { VirtualAgentIntentRuleProjectionAri as VirtualAgentIntentRuleProjectionAri_alias_1 }
export { VirtualAgentIntentRuleProjectionAri as VirtualAgentIntentRuleProjectionAri_alias_2 }

export declare interface VirtualAgentIntentRuleProjectionAriOpts {
    activationId: string;
    configurationId: string;
    intentId: string;
}

declare const VirtualAgentIntentRuleProjectionAriResourceOwner = "virtual-agent";
export { VirtualAgentIntentRuleProjectionAriResourceOwner }
export { VirtualAgentIntentRuleProjectionAriResourceOwner as VirtualAgentIntentRuleProjectionAriResourceOwner_alias_1 }

declare const VirtualAgentIntentRuleProjectionAriResourceType = "intent-rule-projection";
export { VirtualAgentIntentRuleProjectionAriResourceType }
export { VirtualAgentIntentRuleProjectionAriResourceType as VirtualAgentIntentRuleProjectionAriResourceType_alias_1 }

export declare const virtualAgentIntentRuleProjectionAriStaticOpts: AriStaticProperties;

declare class VirtualAgentIntentTemplateAri extends RegisteredAri {
    private constructor();
    private readonly _activationId;
    private readonly _intentTemplateId;
    get activationId(): string;
    get intentTemplateId(): string;
    static create(opts: VirtualAgentIntentTemplateAriOpts): VirtualAgentIntentTemplateAri;
    static parse(maybeAri: string): VirtualAgentIntentTemplateAri;
    getVariables(): {
        activationId: string;
        intentTemplateId: string;
    };
}
export { VirtualAgentIntentTemplateAri }
export { VirtualAgentIntentTemplateAri as VirtualAgentIntentTemplateAri_alias_1 }
export { VirtualAgentIntentTemplateAri as VirtualAgentIntentTemplateAri_alias_2 }

export declare interface VirtualAgentIntentTemplateAriOpts {
    activationId: string;
    intentTemplateId: string;
}

declare const VirtualAgentIntentTemplateAriResourceOwner = "virtual-agent";
export { VirtualAgentIntentTemplateAriResourceOwner }
export { VirtualAgentIntentTemplateAriResourceOwner as VirtualAgentIntentTemplateAriResourceOwner_alias_1 }

declare const VirtualAgentIntentTemplateAriResourceType = "intent-template";
export { VirtualAgentIntentTemplateAriResourceType }
export { VirtualAgentIntentTemplateAriResourceType as VirtualAgentIntentTemplateAriResourceType_alias_1 }

export declare const virtualAgentIntentTemplateAriStaticOpts: AriStaticProperties;

export declare const VulnerabilityHistoryType: "vulnerability-history";

export declare const VulnerabilityType: "vulnerability";

export declare const WebhookType: "webhook";

export declare const WhiteboardType: "whiteboard";

declare class WorkatoJobAri extends RegisteredAri {
    private constructor();
    private readonly _workatoTenantKey;
    private readonly _jobId;
    get workatoTenantKey(): string;
    get jobId(): string;
    static create(opts: WorkatoJobAriOpts): WorkatoJobAri;
    static parse(maybeAri: string): WorkatoJobAri;
    getVariables(): {
        workatoTenantKey: string;
        jobId: string;
    };
}
export { WorkatoJobAri }
export { WorkatoJobAri as WorkatoJobAri_alias_1 }
export { WorkatoJobAri as WorkatoJobAri_alias_2 }

export declare interface WorkatoJobAriOpts {
    workatoTenantKey: string;
    jobId: string;
}

declare const WorkatoJobAriResourceOwner = "workato";
export { WorkatoJobAriResourceOwner }
export { WorkatoJobAriResourceOwner as WorkatoJobAriResourceOwner_alias_1 }

declare const WorkatoJobAriResourceType = "job";
export { WorkatoJobAriResourceType }
export { WorkatoJobAriResourceType as WorkatoJobAriResourceType_alias_1 }

export declare const workatoJobAriStaticOpts: AriStaticProperties;

declare class WorkatoRecipeAri extends RegisteredAri {
    private constructor();
    private readonly _workatoTenantKey;
    private readonly _recipeId;
    get workatoTenantKey(): string;
    get recipeId(): string;
    static create(opts: WorkatoRecipeAriOpts): WorkatoRecipeAri;
    static parse(maybeAri: string): WorkatoRecipeAri;
    getVariables(): {
        workatoTenantKey: string;
        recipeId: string;
    };
}
export { WorkatoRecipeAri }
export { WorkatoRecipeAri as WorkatoRecipeAri_alias_1 }
export { WorkatoRecipeAri as WorkatoRecipeAri_alias_2 }

export declare interface WorkatoRecipeAriOpts {
    workatoTenantKey: string;
    recipeId: string;
}

declare const WorkatoRecipeAriResourceOwner = "workato";
export { WorkatoRecipeAriResourceOwner }
export { WorkatoRecipeAriResourceOwner as WorkatoRecipeAriResourceOwner_alias_1 }

declare const WorkatoRecipeAriResourceType = "recipe";
export { WorkatoRecipeAriResourceType }
export { WorkatoRecipeAriResourceType as WorkatoRecipeAriResourceType_alias_1 }

export declare const workatoRecipeAriStaticOpts: AriStaticProperties;

export declare const WorkbenchResourceType: "workbench-resource";

declare class WorkdayCostCenterAri extends RegisteredAri {
    private constructor();
    private readonly _workdayTenantKey;
    private readonly _costCenterWorkdayId;
    get workdayTenantKey(): string;
    get costCenterWorkdayId(): string;
    static create(opts: WorkdayCostCenterAriOpts): WorkdayCostCenterAri;
    static parse(maybeAri: string): WorkdayCostCenterAri;
    getVariables(): {
        workdayTenantKey: string;
        costCenterWorkdayId: string;
    };
}
export { WorkdayCostCenterAri }
export { WorkdayCostCenterAri as WorkdayCostCenterAri_alias_1 }
export { WorkdayCostCenterAri as WorkdayCostCenterAri_alias_2 }

export declare interface WorkdayCostCenterAriOpts {
    workdayTenantKey: string;
    costCenterWorkdayId: string;
}

declare const WorkdayCostCenterAriResourceOwner = "workday";
export { WorkdayCostCenterAriResourceOwner }
export { WorkdayCostCenterAriResourceOwner as WorkdayCostCenterAriResourceOwner_alias_1 }

declare const WorkdayCostCenterAriResourceType = "cost-center";
export { WorkdayCostCenterAriResourceType }
export { WorkdayCostCenterAriResourceType as WorkdayCostCenterAriResourceType_alias_1 }

export declare const workdayCostCenterAriStaticOpts: AriStaticProperties;

declare class WorkdayJobProfileAri extends RegisteredAri {
    private constructor();
    private readonly _workdayTenantKey;
    private readonly _jobProfileWorkdayId;
    get workdayTenantKey(): string;
    get jobProfileWorkdayId(): string;
    static create(opts: WorkdayJobProfileAriOpts): WorkdayJobProfileAri;
    static parse(maybeAri: string): WorkdayJobProfileAri;
    getVariables(): {
        workdayTenantKey: string;
        jobProfileWorkdayId: string;
    };
}
export { WorkdayJobProfileAri }
export { WorkdayJobProfileAri as WorkdayJobProfileAri_alias_1 }
export { WorkdayJobProfileAri as WorkdayJobProfileAri_alias_2 }

export declare interface WorkdayJobProfileAriOpts {
    workdayTenantKey: string;
    jobProfileWorkdayId: string;
}

declare const WorkdayJobProfileAriResourceOwner = "workday";
export { WorkdayJobProfileAriResourceOwner }
export { WorkdayJobProfileAriResourceOwner as WorkdayJobProfileAriResourceOwner_alias_1 }

declare const WorkdayJobProfileAriResourceType = "job-profile";
export { WorkdayJobProfileAriResourceType }
export { WorkdayJobProfileAriResourceType as WorkdayJobProfileAriResourceType_alias_1 }

export declare const workdayJobProfileAriStaticOpts: AriStaticProperties;

declare class WorkdayPositionAri extends RegisteredAri {
    private constructor();
    private readonly _workdayTenantKey;
    private readonly _positionWorkdayId;
    get workdayTenantKey(): string;
    get positionWorkdayId(): string;
    static create(opts: WorkdayPositionAriOpts): WorkdayPositionAri;
    static parse(maybeAri: string): WorkdayPositionAri;
    getVariables(): {
        workdayTenantKey: string;
        positionWorkdayId: string;
    };
}
export { WorkdayPositionAri }
export { WorkdayPositionAri as WorkdayPositionAri_alias_1 }
export { WorkdayPositionAri as WorkdayPositionAri_alias_2 }

export declare interface WorkdayPositionAriOpts {
    workdayTenantKey: string;
    positionWorkdayId: string;
}

declare const WorkdayPositionAriResourceOwner = "workday";
export { WorkdayPositionAriResourceOwner }
export { WorkdayPositionAriResourceOwner as WorkdayPositionAriResourceOwner_alias_1 }

declare const WorkdayPositionAriResourceType = "position";
export { WorkdayPositionAriResourceType }
export { WorkdayPositionAriResourceType as WorkdayPositionAriResourceType_alias_1 }

export declare const workdayPositionAriStaticOpts: AriStaticProperties;

declare class WorkdayStaffAri extends RegisteredAri {
    private constructor();
    private readonly _workdayTenantKey;
    private readonly _staffId;
    get workdayTenantKey(): string;
    get staffId(): string;
    static create(opts: WorkdayStaffAriOpts): WorkdayStaffAri;
    static parse(maybeAri: string): WorkdayStaffAri;
    getVariables(): {
        workdayTenantKey: string;
        staffId: string;
    };
}
export { WorkdayStaffAri }
export { WorkdayStaffAri as WorkdayStaffAri_alias_1 }
export { WorkdayStaffAri as WorkdayStaffAri_alias_2 }

export declare interface WorkdayStaffAriOpts {
    workdayTenantKey: string;
    staffId: string;
}

declare const WorkdayStaffAriResourceOwner = "workday";
export { WorkdayStaffAriResourceOwner }
export { WorkdayStaffAriResourceOwner as WorkdayStaffAriResourceOwner_alias_1 }

declare const WorkdayStaffAriResourceType = "staff";
export { WorkdayStaffAriResourceType }
export { WorkdayStaffAriResourceType as WorkdayStaffAriResourceType_alias_1 }

export declare const workdayStaffAriStaticOpts: AriStaticProperties;

declare class WorkdaySupervisoryOrgAri extends RegisteredAri {
    private constructor();
    private readonly _workdayTenantKey;
    private readonly _supervisoryOrgWorkdayId;
    get workdayTenantKey(): string;
    get supervisoryOrgWorkdayId(): string;
    static create(opts: WorkdaySupervisoryOrgAriOpts): WorkdaySupervisoryOrgAri;
    static parse(maybeAri: string): WorkdaySupervisoryOrgAri;
    getVariables(): {
        workdayTenantKey: string;
        supervisoryOrgWorkdayId: string;
    };
}
export { WorkdaySupervisoryOrgAri }
export { WorkdaySupervisoryOrgAri as WorkdaySupervisoryOrgAri_alias_1 }
export { WorkdaySupervisoryOrgAri as WorkdaySupervisoryOrgAri_alias_2 }

export declare interface WorkdaySupervisoryOrgAriOpts {
    workdayTenantKey: string;
    supervisoryOrgWorkdayId: string;
}

declare const WorkdaySupervisoryOrgAriResourceOwner = "workday";
export { WorkdaySupervisoryOrgAriResourceOwner }
export { WorkdaySupervisoryOrgAriResourceOwner as WorkdaySupervisoryOrgAriResourceOwner_alias_1 }

declare const WorkdaySupervisoryOrgAriResourceType = "supervisory-org";
export { WorkdaySupervisoryOrgAriResourceType }
export { WorkdaySupervisoryOrgAriResourceType as WorkdaySupervisoryOrgAriResourceType_alias_1 }

export declare const workdaySupervisoryOrgAriStaticOpts: AriStaticProperties;

declare class WorkdayWorkerAri extends RegisteredAri {
    private constructor();
    private readonly _workdayTenantKey;
    private readonly _workerWorkdayId;
    get workdayTenantKey(): string;
    get workerWorkdayId(): string;
    static create(opts: WorkdayWorkerAriOpts): WorkdayWorkerAri;
    static parse(maybeAri: string): WorkdayWorkerAri;
    getVariables(): {
        workdayTenantKey: string;
        workerWorkdayId: string;
    };
}
export { WorkdayWorkerAri }
export { WorkdayWorkerAri as WorkdayWorkerAri_alias_1 }
export { WorkdayWorkerAri as WorkdayWorkerAri_alias_2 }

export declare interface WorkdayWorkerAriOpts {
    workdayTenantKey: string;
    workerWorkdayId: string;
}

declare const WorkdayWorkerAriResourceOwner = "workday";
export { WorkdayWorkerAriResourceOwner }
export { WorkdayWorkerAriResourceOwner as WorkdayWorkerAriResourceOwner_alias_1 }

declare const WorkdayWorkerAriResourceType = "worker";
export { WorkdayWorkerAriResourceType }
export { WorkdayWorkerAriResourceType as WorkdayWorkerAriResourceType_alias_1 }

export declare const workdayWorkerAriStaticOpts: AriStaticProperties;

export declare const WorkerType: "worker";

export declare const WorkflowSchemeType: "workflow-scheme";

export declare const WorkflowType: "workflow";

export declare const WorklogType: "worklog";

export declare const WorkspaceType: "workspace";

export { }
