import {
  JiraRepositoryAriResourceOwner,
  JiraRepositoryAriResourceType
} from "./chunk-PYOC3DJR.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/jira/repository/manifest.ts
var jiraRepositoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraRepositoryAriResourceOwner,
  resourceType: JiraRepositoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{repositoryId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    repositoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/repository/index.ts
var JiraRepositoryAri = class _JiraRepositoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._repositoryId = opts.resourceIdSegmentValues.repositoryId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get repositoryId() {
    return this._repositoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraRepositoryAriStaticOpts.qualifier,
      platformQualifier: jiraRepositoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraRepositoryAriStaticOpts.resourceOwner,
      resourceType: jiraRepositoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.repositoryId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        repositoryId: opts.repositoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraRepositoryAriStaticOpts);
    return new _JiraRepositoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraRepositoryAriStaticOpts);
    return new _JiraRepositoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      repositoryId: this.repositoryId
    };
  }
};

export {
  JiraRepositoryAri
};
