import {
  ConfluenceRoleAriResourceOwner,
  ConfluenceRoleAriResourceType
} from "./chunk-VTWZOXAB.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/confluence/role/manifest.ts
var confluenceRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]*$"),
  resourceOwner: ConfluenceRoleAriResourceOwner,
  resourceType: ConfluenceRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/role/index.ts
var ConfluenceRoleAri = class _ConfluenceRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._optionalSiteId = opts.cloudId || "", this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get optionalSiteId() {
    return this._optionalSiteId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceRoleAriStaticOpts.qualifier,
      platformQualifier: confluenceRoleAriStaticOpts.platformQualifier,
      cloudId: opts.optionalSiteId,
      resourceOwner: confluenceRoleAriStaticOpts.resourceOwner,
      resourceType: confluenceRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceRoleAriStaticOpts);
    return new _ConfluenceRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceRoleAriStaticOpts);
    return new _ConfluenceRoleAri(opts);
  }
  getVariables() {
    return {
      optionalSiteId: this.optionalSiteId,
      roleId: this.roleId
    };
  }
};

export {
  ConfluenceRoleAri
};
