import {
  MeasurementUserAriResourceOwner,
  MeasurementUserAriResourceType
} from "./chunk-G4CB4RQJ.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/measurement/user/manifest.ts
var measurementUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MeasurementUserAriResourceOwner,
  resourceType: MeasurementUserAriResourceType,
  resourceIdSlug: "ff-client-anonymous/{anonUserId}",
  resourceIdSegmentFormats: {
    anonUserId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/measurement/user/index.ts
var MeasurementUserAri = class _MeasurementUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._anonUserId = opts.resourceIdSegmentValues.anonUserId;
  }
  get anonUserId() {
    return this._anonUserId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: measurementUserAriStaticOpts.qualifier,
      platformQualifier: measurementUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: measurementUserAriStaticOpts.resourceOwner,
      resourceType: measurementUserAriStaticOpts.resourceType,
      resourceId: `ff-client-anonymous/${opts.anonUserId}`,
      resourceIdSegmentValues: {
        anonUserId: opts.anonUserId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, measurementUserAriStaticOpts);
    return new _MeasurementUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, measurementUserAriStaticOpts);
    return new _MeasurementUserAri(opts);
  }
  getVariables() {
    return {
      anonUserId: this.anonUserId
    };
  }
};

export {
  MeasurementUserAri
};
