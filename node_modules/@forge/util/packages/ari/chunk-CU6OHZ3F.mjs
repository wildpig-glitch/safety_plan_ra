import {
  CmdbImportConfigurationAriResourceOwner,
  CmdbImportConfigurationAriResourceType
} from "./chunk-W3AHDHPL.mjs";
import {
  RegisteredAri
} from "./chunk-CLQNXEWF.mjs";
import {
  AriParser
} from "./chunk-HNZGDVUS.mjs";

// src/cmdb/import-configuration/manifest.ts
var cmdbImportConfigurationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbImportConfigurationAriResourceOwner,
  resourceType: CmdbImportConfigurationAriResourceType,
  resourceIdSlug: "{workspaceId}/{importConfigId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    importConfigId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/import-configuration/index.ts
var CmdbImportConfigurationAri = class _CmdbImportConfigurationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._importConfigId = opts.resourceIdSegmentValues.importConfigId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get importConfigId() {
    return this._importConfigId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbImportConfigurationAriStaticOpts.qualifier,
      platformQualifier: cmdbImportConfigurationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbImportConfigurationAriStaticOpts.resourceOwner,
      resourceType: cmdbImportConfigurationAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.importConfigId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        importConfigId: opts.importConfigId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbImportConfigurationAriStaticOpts);
    return new _CmdbImportConfigurationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbImportConfigurationAriStaticOpts);
    return new _CmdbImportConfigurationAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      importConfigId: this.importConfigId
    };
  }
};

export {
  CmdbImportConfigurationAri
};
