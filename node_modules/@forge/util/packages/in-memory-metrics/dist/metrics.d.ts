import { Counter, Gauge, Metrics, Tags, Timing } from '@atlassian/metrics-interface';
import { InMemoryCounterMetric } from './metric/counter';
import { InMemoryGaugeMetric } from './metric/gauge';
import { InMemoryMetric } from './metric/metric';
import { InMemoryTimedMetric } from './metric/timed';
/**
 * Metrics class that keeps results in memory, for use in Forge Runtime and
 * testing.
 */
export declare class InMemoryMetrics extends InMemoryMetric implements Metrics {
    private readonly _timers;
    private readonly _counters;
    private readonly _gauges;
    private readonly _children;
    constructor(tags?: Tags, name?: string);
    getTimers(): InMemoryTimedMetric[];
    getCounters(): Map<string, InMemoryCounterMetric>;
    getGauges(): Map<string, InMemoryGaugeMetric>;
    getChildren(): Map<string, InMemoryMetrics>;
    private tagsWith;
    private getHashedMetricName;
    child(name: string, tags?: Tags): InMemoryMetrics;
    counter(name: string, tags?: Tags): Counter;
    counterByName(name: string): InMemoryCounterMetric;
    gauge(name: string, tags?: Tags): Gauge;
    gaugeByName(name: string): InMemoryGaugeMetric;
    timerByName(name: string): InMemoryTimedMetric;
    timing(name: string, tags?: Tags): Timing;
    event(_title: string, _description?: string): void;
    set(_name: string, _tags?: Tags | undefined): never;
    histogram(_name: string, _buckets: number[], _tags?: Tags | undefined): never;
}
//# sourceMappingURL=metrics.d.ts.map