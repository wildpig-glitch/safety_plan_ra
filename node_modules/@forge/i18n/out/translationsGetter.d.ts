import { type ForgeSupportedLocaleCode, type I18nInfo } from './types';
export interface TranslationResourceContent {
    [key: string]: string | TranslationResourceContent;
}
export interface I18nResourcesAccessor {
    getI18nInfoConfig: () => Promise<I18nInfo['config']>;
    getTranslationResource: (locale: ForgeSupportedLocaleCode) => Promise<TranslationResourceContent>;
}
export interface GetTranslationsResult {
    locale: ForgeSupportedLocaleCode;
    translations: TranslationResourceContent | null;
}
export interface GetTranslationsOptions {
    fallback: boolean;
}
export declare class TranslationGetterError extends Error {
    constructor(message: string);
}
export declare class TranslationsGetter {
    private resourcesAccessor;
    private i18nInfoConfig;
    private translationResources;
    constructor(resourcesAccessor: I18nResourcesAccessor);
    getTranslations(locale: ForgeSupportedLocaleCode, options?: GetTranslationsOptions): Promise<GetTranslationsResult>;
    getTranslationsByLocaleLookupOrder(locale: ForgeSupportedLocaleCode): Promise<Array<{
        locale: ForgeSupportedLocaleCode;
        translations: TranslationResourceContent;
    }>>;
    reset(): void;
    private getTranslationResource;
    private getI18nInfoConfig;
    private getLocaleLookupOrder;
}
//# sourceMappingURL=translationsGetter.d.ts.map