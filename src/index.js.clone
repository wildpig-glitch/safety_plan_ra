import api, { route } from '@forge/api';

/**
 * Clones an ASIL story (and its sub-tasks) from FuSaDemo into the target project.
 * @param {object} params
 * @param {string} params.targetProject - The key of the target Jira project
 * @param {number} params.asilLevel - The ASIL level (1, 2, or 3)
 */
export async function cloneAsilStory(params) {
  const { targetProject, asilLevel } = params;

  if (![1, 2, 3].includes(asilLevel)) {
    throw new Error('ASIL level must be 1, 2, or 3.');
  }

  // Map ASIL level to source issue key
  const sourceIssueKey = `FUS-${asilLevel}`;

  // Step 1: Clone the source issue (with sub-tasks)
  const cloneResponse = await api.asApp().requestJira(
    route`/rest/internal/latest/issue/${sourceIssueKey}/clone`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        summary: `CLONE of ${sourceIssueKey} for project FuSaDemo`,
        includeAttachments: true,
        includeSubtasksOrChildren: true,
        includeLinks: true
      })
    }
  );

  if (!cloneResponse.ok) {
    const errText = await cloneResponse.text();
    throw new Error(`Failed to start clone: ${cloneResponse.status} ${errText}`);
  }

  const cloneResult = await cloneResponse.json();
  const taskId = cloneResult.taskId;

  // Step 2: Poll for completion
  let status = 'ENQUEUED';
  let result;
  while (status !== 'COMPLETE') {
    await new Promise(res => setTimeout(res, 2000));
    const taskResponse = await api.asApp().requestJira(
      route`/rest/api/2/task/${taskId}`
    );
    result = await taskResponse.json();
    status = result.status;
    if (status === 'FAILED') {
      throw new Error(`Clone task failed: ${result.message}`);
    }
  }

  // Step 3: Move the cloned issue to the target project
  const newIssueId = result.result.issueId;

  // Get the issue key of the cloned issue
  const issueResponse = await api.asApp().requestJira(
    route`/rest/api/3/issue/${newIssueId}`,
    { method: 'GET' }
  );
  if (!issueResponse.ok) {
    const errText = await issueResponse.text();
    throw new Error(`Failed to fetch cloned issue: ${issueResponse.status} ${errText}`);
  }
  const issueData = await issueResponse.json();
  const clonedIssueKey = issueData.key;

  // Move the issue to the target project
  // We need to specify the target project and issue type (must match the current issue type)
  const issueTypeId = issueData.fields.issuetype.id;

  const moveResponse = await api.asApp().requestJira(
    route`/rest/api/3/issue/${clonedIssueKey}`,
    {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        fields: {
          project: { key: targetProject },
          issuetype: { id: issueTypeId }
        }
      })
    }
  );

  if (!moveResponse.ok) {
    const errText = await moveResponse.text();
    throw new Error(`Failed to move issue: ${moveResponse.status} ${errText}`);
  }

  return {
    message: `ASIL story ${sourceIssueKey} cloned and moved to project ${targetProject} successfully with sub-tasks.`,
    newIssueKey: clonedIssueKey
  };
}